[{"D:\\ws_front\\gmap-ui\\src\\index.js":"1","D:\\ws_front\\gmap-ui\\src\\App.js":"2","D:\\ws_front\\gmap-ui\\src\\serviceWorker.js":"3","D:\\ws_front\\gmap-ui\\src\\common\\gflow.js":"4","D:\\ws_front\\gmap-ui\\src\\models\\index.js":"5","D:\\ws_front\\gmap-ui\\src\\common\\gflowUtil.js":"6","D:\\ws_front\\gmap-ui\\src\\common\\SagaPromiseMiddleWare.js":"7","D:\\ws_front\\gmap-ui\\src\\models\\common.js":"8","D:\\ws_front\\gmap-ui\\src\\models\\filesel.js":"9","D:\\ws_front\\gmap-ui\\src\\models\\tabs.js":"10","D:\\ws_front\\gmap-ui\\src\\service\\generalSvc.js":"11","D:\\ws_front\\gmap-ui\\src\\service\\api.js":"12","D:\\ws_front\\gmap-ui\\src\\service\\mindmapSvc.js":"13","D:\\ws_front\\gmap-ui\\src\\service\\newMindmapSvc.js":"14","D:\\ws_front\\gmap-ui\\src\\service\\mindMapValidateSvc.js":"15","D:\\ws_front\\gmap-ui\\src\\service\\ganttSvc.js":"16","D:\\ws_front\\gmap-ui\\src\\common\\dateUtil.js":"17","D:\\ws_front\\gmap-ui\\src\\ui\\home\\index.js":"18","D:\\ws_front\\gmap-ui\\src\\ui\\home\\MapsViewer.js":"19","D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\OpenGraphDlg.js":"20","D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\NewGraphDlg.js":"21","D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\RefViewer.js":"22","D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\GraphTabs.js":"23","D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\Welcome.js":"24","D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\gantt\\GantDlg.js":"25","D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\Toolbar.js":"26","D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\ProgsViewer.js":"27","D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\TimelineViewer.js":"28","D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\EditGraphDlg.js":"29","D:\\ws_front\\gmap-ui\\src\\service\\screenShot.js":"30","D:\\ws_front\\gmap-ui\\src\\common\\uiUtil.js":"31","D:\\ws_front\\gmap-ui\\src\\ui\\common\\specialDlg.js":"32","D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\edit\\HelpDlg.js":"33","D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\edit\\DateDlg.js":"34","D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\edit\\ColorPickerDlg.js":"35","D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\edit\\AdvColorPickerDlg.js":"36","D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\edit\\InsertImgDlg.js":"37","D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\edit\\Editor.js":"38","D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\NewMindmap.js":"39","D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\MindNode.js":"40","D:\\ws_front\\gmap-ui\\src\\common\\keyDetector.js":"41","D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\ConnectedPathSelect.js":"42","D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\PathSelect.js":"43","D:\\ws_front\\gmap-ui\\src\\common\\markedHighlightUtil.js":"44","D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\gantt\\GantChart.js":"45","D:\\ws_front\\gmap-ui\\src\\service\\editorSvc.js":"46"},{"size":690,"mtime":1608275678087,"results":"47","hashOfConfig":"48"},{"size":739,"mtime":1610591355448,"results":"49","hashOfConfig":"48"},{"size":5226,"mtime":1602210578317,"results":"50","hashOfConfig":"48"},{"size":15261,"mtime":1608275678083,"results":"51","hashOfConfig":"48"},{"size":111,"mtime":1608275678089,"results":"52","hashOfConfig":"48"},{"size":2786,"mtime":1608275678084,"results":"53","hashOfConfig":"48"},{"size":1357,"mtime":1608275678082,"results":"54","hashOfConfig":"48"},{"size":2598,"mtime":1608275678088,"results":"55","hashOfConfig":"48"},{"size":1174,"mtime":1608275678089,"results":"56","hashOfConfig":"48"},{"size":18015,"mtime":1611198315787,"results":"57","hashOfConfig":"48"},{"size":562,"mtime":1608275678094,"results":"58","hashOfConfig":"48"},{"size":5021,"mtime":1610587777778,"results":"59","hashOfConfig":"48"},{"size":46193,"mtime":1614937915452,"results":"60","hashOfConfig":"48"},{"size":22085,"mtime":1608275678097,"results":"61","hashOfConfig":"48"},{"size":3458,"mtime":1608275678095,"results":"62","hashOfConfig":"48"},{"size":18816,"mtime":1608275678093,"results":"63","hashOfConfig":"48"},{"size":1756,"mtime":1608275471768,"results":"64","hashOfConfig":"48"},{"size":50,"mtime":1602210578319,"results":"65","hashOfConfig":"48"},{"size":12502,"mtime":1611198553835,"results":"66","hashOfConfig":"48"},{"size":1856,"mtime":1610591454477,"results":"67","hashOfConfig":"48"},{"size":4323,"mtime":1610591442172,"results":"68","hashOfConfig":"48"},{"size":4368,"mtime":1610591468663,"results":"69","hashOfConfig":"48"},{"size":7038,"mtime":1611198501323,"results":"70","hashOfConfig":"48"},{"size":3512,"mtime":1610591487617,"results":"71","hashOfConfig":"48"},{"size":2706,"mtime":1610591502087,"results":"72","hashOfConfig":"48"},{"size":5513,"mtime":1610591480949,"results":"73","hashOfConfig":"48"},{"size":2156,"mtime":1610591463998,"results":"74","hashOfConfig":"48"},{"size":1564,"mtime":1610591474273,"results":"75","hashOfConfig":"48"},{"size":10368,"mtime":1610591426662,"results":"76","hashOfConfig":"48"},{"size":8190,"mtime":1608275678098,"results":"77","hashOfConfig":"48"},{"size":927,"mtime":1608275678086,"results":"78","hashOfConfig":"48"},{"size":2040,"mtime":1610591557048,"results":"79","hashOfConfig":"48"},{"size":11511,"mtime":1614934321363,"results":"80","hashOfConfig":"48"},{"size":5855,"mtime":1611111776993,"results":"81","hashOfConfig":"48"},{"size":1509,"mtime":1610591515621,"results":"82","hashOfConfig":"48"},{"size":1297,"mtime":1610591510889,"results":"83","hashOfConfig":"48"},{"size":9691,"mtime":1610591536074,"results":"84","hashOfConfig":"48"},{"size":8185,"mtime":1610591526916,"results":"85","hashOfConfig":"48"},{"size":7185,"mtime":1610591446625,"results":"86","hashOfConfig":"48"},{"size":9672,"mtime":1610591437380,"results":"87","hashOfConfig":"48"},{"size":5580,"mtime":1608531655798,"results":"88","hashOfConfig":"48"},{"size":736,"mtime":1610591418614,"results":"89","hashOfConfig":"48"},{"size":4232,"mtime":1610591459309,"results":"90","hashOfConfig":"48"},{"size":6460,"mtime":1608275678085,"results":"91","hashOfConfig":"48"},{"size":17947,"mtime":1610591496787,"results":"92","hashOfConfig":"48"},{"size":2461,"mtime":1608275678092,"results":"93","hashOfConfig":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"1hjnoa8",{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"96"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"96"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"96"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"96"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"96"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"96"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"96"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"96"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"96"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"96"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"96"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"96"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"96"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"96"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"96"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"96"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"96"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"96"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"96"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"180","messages":"181","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"96"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"96"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"96"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"96"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"96"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"96"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"96"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"96"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"96"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"D:\\ws_front\\gmap-ui\\src\\index.js",[],["215","216"],"D:\\ws_front\\gmap-ui\\src\\App.js",["217"],"/** @jsxImportSource @emotion/react */\r\nimport {Global } from '@emotion/react';\r\nimport React from 'react';\r\nimport logo from './logo.svg';\r\nimport { view as MapsViewer } from './ui/home';\r\nimport { ConfigProvider } from 'antd';\r\nimport zhCN from 'antd/es/locale/zh_CN';\r\nimport 'moment/locale/zh-cn';\r\nimport 'antd/dist/antd.css';\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <React.Fragment>\r\n            <Global styles={{\r\n                body: {\r\n                    margin: 0,\r\n                    backgroundColor: '#f0f2f5',\r\n                }\r\n            }}/>\r\n            <ConfigProvider locale={zhCN}>\r\n                <MapsViewer />\r\n            </ConfigProvider>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n","D:\\ws_front\\gmap-ui\\src\\serviceWorker.js",[],"D:\\ws_front\\gmap-ui\\src\\common\\gflow.js",["218","219"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport * as sagaEffects from 'redux-saga/effects';\r\nimport {Provider,connect as reduxConnect} from 'react-redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport SagaPromiseMiddleWare from './SagaPromiseMiddleWare';\r\nimport gflowUtil from './gflowUtil';\r\n\r\n\r\n/**\r\n * 类似dva的方式，简化redux-saga的开发：\r\n * 1、初始状态、reducer、saga配置在一起\r\n * 2、支持全局事件订阅\r\n */\r\nclass Gflow{\r\n    constructor(){\r\n        this.runTimes=0;            //计数器：用于判断run方法只能执行一次\r\n        this.initState={};          //初始状态\r\n        this.reducerItems={};       //子reducer\r\n        this.actionDispatcher={};   //action dispatvher\r\n        this.actionCreater={};      //action creater\r\n        this.subscriptionFuns=[];   //初始化事件，当根组件mount后才执行\r\n    }\r\n\r\n    /**\r\n     * 合并后的总的reducer\r\n     */\r\n    sumReducer=(state,action)=>{\r\n        //action type没有指定命名空间，不计算\r\n        const reg=/^[^/]+[/][^/]+$/;// eg. user/add\r\n        if(!gflowUtil.isModelActionType(action.type)){\r\n            return state;\r\n        }\r\n\r\n        //未找到对应的子reducer，不计算\r\n        let[ns,type]=action.type.split(\"/\");\r\n        if(!this.reducerItems[ns] || !this.reducerItems[ns][type]){\r\n            return state;\r\n        }\r\n\r\n        //用子reducer计算并把结果合并入总的state里\r\n        let partialState=this.reducerItems[ns][type](state[ns],action.payload);\r\n        let result={...state};\r\n        result[ns]=partialState;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 初始状态合并\r\n     */\r\n    combineState=(initState,model)=>{\r\n        let ns=model.namespace;\r\n        this.initState[ns]={...this.initState[ns], ...model.state};\r\n    }\r\n\r\n    /**\r\n     * 合并各子reducer\r\n     */\r\n    combineReducer=(model)=>{\r\n        let ns=model.namespace;\r\n        this.reducerItems[ns]={...this.reducerItems[ns], ...model.reducers};\r\n    }\r\n\r\n    /**\r\n     * 合并副作用\r\n     */\r\n    combineEffects=(sagaList,model)=>{\r\n        let sagaItems=[];\r\n        let ns=model.namespace;\r\n        const scope=this;\r\n        const baseEffectParam={\r\n            ...sagaEffects,                 //redux-saga自带的副作用\r\n            gcreater:scope.actionCreater,   //全局creater\r\n            creater:scope.actionCreater[ns],//当前模块的creater\r\n            ns: ns,\r\n            sel:defSelectCurrModelState.bind(this,ns),\r\n        };\r\n        \r\n\r\n        \r\n           \r\n\r\n\r\n        //循环每个副作用函数，并加入列表\r\n        model.effects.forEach(item=>{\r\n            //由于saga可以跨模块监听事件，所以如果key中自带命名空间，则直接使用，否则加入model自身的命名空间\r\n            let targetActionType=ns+\"/\"+item.k;\r\n            if(gflowUtil.isModelActionType(item.k)){\r\n                targetActionType=item.k;\r\n            }\r\n\r\n            //创建watcher，不使用takeEvery而使用take的原因是需要在调用worker时传递第二个参数（指定副作用操作符与promise的reolve、reject等）\r\n            let watcher=function*() {\r\n                while(true) {\r\n                    //侦听action事件\r\n                    const action = yield sagaEffects.take(targetActionType);\r\n\r\n                    //封装第二个参数\r\n                    let effectParam=baseEffectParam;\r\n                    if(item.prom){//action需要返回结果，则把resolve、reject加入其中\r\n                        effectParam={\r\n                            ...effectParam, \r\n                            res:        action.extras.res, \r\n                            rej:        action.extras.rej,\r\n                            resolve:    action.extras.res, \r\n                            reject:     action.extras.rej,\r\n                        };\r\n                    }\r\n\r\n                    //执行副作用\r\n                    // yield* model.effects[key](action.payload,effectParam);\r\n                    yield sagaEffects.fork(item.v,action.payload,effectParam);\r\n                }\r\n            };\r\n            //运行侦听器并加入列表\r\n            sagaItems.push(watcher());\r\n        });\r\n\r\n        //手动监控的函数\r\n        for(let key in model.watchers){\r\n            let effectParam=baseEffectParam;\r\n            sagaItems.push(model.watchers[key](effectParam));\r\n        }\r\n\r\n        //把列表中的副作用合并为一个，并加入总体列表中\r\n        sagaList.push(function*() {yield sagaEffects.all(sagaItems);}());\r\n    }\r\n\r\n    /**\r\n     * 提取actionCreater与actionDispatcher\r\n     */\r\n    extractActionCreatersAndActionDispatchers=(model)=>{\r\n        let ns=model.namespace;\r\n        // let reducersAndEffects={...model.reducers, ...model.effects};\r\n        for(let key in model.reducers){\r\n            let[targetNS,targetKey]= gflowUtil.addModelPrefix(key,ns).split(\"/\");//如果key中自带命名空间，则直接使用，否则加入model自身的命名空间\r\n            this.actionCreater[targetNS][targetKey]=defActionCreater.bind(this,targetNS,targetKey,false);\r\n            this.actionDispatcher[targetNS][targetKey]=defActionDispatcher.bind(this,this.store,targetNS,targetKey,false);\r\n        }\r\n        model.effects.forEach(item=>{\r\n            let[targetNS,targetKey]= gflowUtil.addModelPrefix(item.k,ns).split(\"/\");//如果key中自带命名空间，则直接使用，否则加入model自身的命名空间\r\n            this.actionCreater[targetNS][targetKey]=defActionCreater.bind(this,targetNS,targetKey,item.prom);\r\n            this.actionDispatcher[targetNS][targetKey]=defActionDispatcher.bind(this,this.store,targetNS,targetKey,item.prom);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 记录事件，待根组件mount后执行\r\n     */\r\n    regSubscriptionEvents=(model)=>{\r\n        let ns=model.namespace;\r\n        for(let key in model.subscriptions){\r\n            this.subscriptionFuns.push(\r\n                model.subscriptions[key].bind(\r\n                    this,\r\n                    {\r\n                        gdispatcher:this.actionDispatcher, \r\n                        dispatcher: this.actionDispatcher[ns],\r\n                    }\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * 整理effects的格式，把模块配置中不同的方式整理成同一格式，同时标记是否为promise类型\r\n     */\r\n    handleRegularEffects=(model)=>{\r\n        let effectList=[];\r\n        for(let key in model.effects){\r\n            //是生成器\r\n            if(gflowUtil.isGen(model.effects[key])){\r\n                effectList.push({\r\n                    k: key,\r\n                    v: model.effects[key],\r\n                    prom: gflowUtil.isPromiseActionType(key)\r\n                });\r\n                continue;\r\n            }\r\n\r\n            //是promise组\r\n            if(true===model.effects[key].promise){\r\n                for(let subKey in model.effects[key]){\r\n                    if(subKey==='promise'){continue;}\r\n                    if(gflowUtil.isGen(model.effects[key][subKey])){\r\n                        effectList.push({\r\n                            k: subKey,\r\n                            v: model.effects[key][subKey],\r\n                            prom: true\r\n                        });\r\n                    }\r\n                }\r\n                continue;\r\n            }\r\n\r\n            //是非promise组\r\n            if(false===model.effects[key].promise){\r\n                for(let subKey in model.effects[key]){\r\n                    if(subKey==='promise'){continue;}\r\n                    if(gflowUtil.isGen(model.effects[key][subKey])){\r\n                        effectList.push({\r\n                            k: subKey,\r\n                            v: model.effects[key][subKey],\r\n                            prom: false\r\n                        });\r\n                    }\r\n                }\r\n                continue;\r\n            }\r\n        }\r\n        model.effects=effectList;\r\n    }\r\n\r\n    /**\r\n     * 非空处理\r\n     */\r\n    makeNotEmpty=(models, extraMidlewares)=>{\r\n        if(!extraMidlewares){\r\n            extraMidlewares=[];\r\n        }\r\n        if(!models){\r\n            models=[];\r\n        }      \r\n        models.forEach(model => {\r\n            if(!model.namespace){\r\n                model.namespace=DEFAULT_NAMESPACE;//默认命名空间\r\n            }\r\n            if(!model.state){\r\n                model.state={};\r\n            }\r\n            if(!model.reducers){\r\n                model.reducers={};\r\n            }\r\n            if(!model.effects){\r\n                model.effects={};\r\n            }\r\n            if(!model.watchers){\r\n                model.watchers={};\r\n            }\r\n            if(!model.subscriptions){\r\n                model.subscriptions={};\r\n            }\r\n            if(!this.reducerItems[model.namespace]){\r\n                this.reducerItems[model.namespace]={};\r\n            }\r\n            if(!this.actionDispatcher[model.namespace]){\r\n                this.actionDispatcher[model.namespace]={};\r\n            }\r\n            if(!this.actionCreater[model.namespace]){\r\n                this.actionCreater[model.namespace]={};\r\n            }\r\n            if(!this.initState[model.namespace]){\r\n                this.initState[model.namespace]={};\r\n            }\r\n            this.handleRegularEffects(model);\r\n        });\r\n        return [models,extraMidlewares];\r\n    }\r\n\r\n    /**\r\n     * 初始化\r\n     * @param {*} models [\r\n     *      {\r\n     *          namespace: 'def',  //命名空间，可省略，省略后认为是def\r\n     *          state:{}    //初始状态\r\n     *          reducers:{//子reducer\r\n     *              add: (state, payload)=>newState\r\n     *          },\r\n     *          effects:{//副作用，名称以promise（忽略大小写）开头或结尾表示需要返回值（promise）\r\n     *              *add: (payload, {})=>void\r\n     *          },\r\n     *          subscriptions:{//订阅源\r\n     *              setup:({gdispatcher, dispatcher})=>{...}\r\n     *          }\r\n     *      }\r\n     * ]\r\n     * @param {*} extraMidlewares [mw1, mw2, ...] 额外的中间什\r\n     */\r\n    init=(models, extraMidlewares)=>{\r\n        //非空处理\r\n        let modelsAndMds=this.makeNotEmpty(models,extraMidlewares);\r\n        models=modelsAndMds[0];\r\n        extraMidlewares=modelsAndMds[1];\r\n\r\n        //合并state、reducer\r\n        models.forEach(model => {\r\n            this.combineState(this.initState,model);//合并初始state\r\n            this.combineReducer(model);//合并reducer\r\n        });\r\n        \r\n        //初始化中间件并生成store\r\n        const sagaMiddleware = createSagaMiddleware();\r\n        let middlewares=[SagaPromiseMiddleWare, sagaMiddleware, ...extraMidlewares];\r\n        this.store=createStore(\r\n            this.sumReducer,\r\n            this.initState,\r\n            applyMiddleware(...middlewares)\r\n        );\r\n\r\n        //根据model中reducer与effect的名字，提取成对应的action creater与action dispatcher\r\n        models.forEach(model => {\r\n            this.extractActionCreatersAndActionDispatchers(model);\r\n        });\r\n        this.actionDispatcher.dispatch=this.store.dispatch;//在封装的action dispatcher里加入原始的dispatch函数，以备特殊用途\r\n\r\n        //合并副作用处理函数并启动saga\r\n        let sagaList=[];\r\n        models.forEach(model => {\r\n            this.combineEffects(sagaList,model);//合并副作用\r\n        });        \r\n        let rootSaga=function*() {\r\n            yield sagaEffects.all(sagaList)\r\n        };\r\n        sagaMiddleware.run(rootSaga);\r\n\r\n        //记录事件源，待包装组件mount后执行\r\n        models.forEach(model => {\r\n            this.regSubscriptionEvents(model);\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * 开启程序：\r\n     * 1、创建store并设置初始状态\r\n     * 2、设置reducer\r\n     * 3、设置saga\r\n     * @param options {\r\n     *      rootEle:            ReactElement    //根react元素\r\n     *      domSelector:        \"#root\",        //可选：渲染位置的dom选择器，默认为 #root\r\n     *      models:             [m1, m2],       //可靠：所有model的数组\r\n     *      extraMiddlewares:    [mw1, mw2, ...] //可选：其他中间传的数组\r\n     * }\r\n     */\r\n    run=({rootEle, domSelector, models, extraMiddlewares=[],strict=false})=>{\r\n        //校验\r\n        ++this.runTimes;\r\n        if(1<this.runTimes){\r\n            throw new Error(\"只能执行一次run方法\");\r\n        }\r\n        if(!rootEle){\r\n            throw new Error(\"未提供根组件\");\r\n        }\r\n\r\n        //初始化\r\n        this.init(models, extraMiddlewares);\r\n\r\n        //渲染初始页面\r\n        ReactDOM.render( \r\n            <Provider store={this.store}>\r\n                <EventWrapperComponent subscriptionEvents={this.subscriptionFuns}>\r\n                    {\r\n                        true===strict ? <React.StrictMode>{rootEle}</React.StrictMode> : <>{rootEle}</>\r\n                    }\r\n                </EventWrapperComponent>\r\n            </Provider>, \r\n            document.querySelector(domSelector?domSelector:\"#root\")\r\n        );\r\n    }\r\n\r\n    /**\r\n     * 对mapState进行包装，注入dispatcher，让容器组件可调用this.props.dispatcher...\r\n     */\r\n    wrapMapState=(mapState)=>{\r\n        return (state,ownProps)=>{\r\n            let result=mapState(state,ownProps);\r\n            return {...result, dispatcher:this.actionDispatcher};\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 对redux的connect进行包装，把dispatcher传递到组件的props里\r\n     */\r\n    connect=(mapState,mapDispatch=null)=>{\r\n        if(!mapState){\r\n            mapState=()=>({});\r\n        }\r\n        if(!mapDispatch){\r\n            mapDispatch=()=>({});\r\n        }\r\n        let wrapper=this.wrapMapState(mapState);\r\n        return reduxConnect(wrapper,mapDispatch);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * 事件包装器，所有订阅事件在组件的componentDidMount里执行，以防止执行事件时根组件还未初始化\r\n */\r\nclass EventWrapperComponent extends React.Component{\r\n    componentDidMount(){\r\n        if(this.props.subscriptionEvents){\r\n            this.props.subscriptionEvents.forEach(event=>{\r\n                event();\r\n            });\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\n\r\n\r\nconst defActionCreater=(ns,key,isPromise,payload)=>({\r\n    type:       ns+\"/\"+key,\r\n    payload:    payload,\r\n    extras:     {promise:isPromise}\r\n});\r\nconst defActionDispatcher=(store,ns,key,isPromise,payload)=>(store.dispatch(defActionCreater(ns,key,isPromise,payload)));\r\nconst defSelectCurrModelState=(ns)=>sagaEffects.select(state=>state[ns]);\r\n\r\nconst DEFAULT_NAMESPACE=\"def\";\r\n\r\n\r\nconst inst=new Gflow();\r\nexport default {run: inst.run};//程序入口\r\nexport const dispatcher=inst.actionDispatcher;//action dispatcher，一般在容器组件里用\r\nexport const creater=inst.actionCreater;//action creater，一般在saga里用\r\nexport const connect=inst.connect;//对react-redux的connect方法的包装\r\nexport const join=gflowUtil.joinModNameAndActionType;","D:\\ws_front\\gmap-ui\\src\\models\\index.js",["220"],"import m1 from './common';\r\nimport m2 from './filesel';\r\nimport m3 from './tabs';\r\n\r\nexport default [m1,m2,m3];","D:\\ws_front\\gmap-ui\\src\\common\\gflowUtil.js",["221","222","223","224","225"],"/**\r\n * gflow相关工具\r\n */\r\n\r\n\r\n\r\n\r\nclass GflowUtil{\r\n    /**\r\n     * action type是否包含模块名\r\n     */\r\n    isModelActionType=(type)=>regWithModel.test(type);\r\n\r\n    /**\r\n     * action type是否不包含模块名\r\n     */\r\n    isNoModelActionType=(type)=>regNoModel.test(type);\r\n\r\n    /**\r\n     * 对action type增加模块前缀，如果已经有了，则不变\r\n     */\r\n    addModelPrefix=(type,currModel)=>{\r\n        if(this.isModelActionType(type)){\r\n            return type;\r\n        }\r\n        return currModel+\"/\"+type;\r\n    };\r\n\r\n    /**\r\n     * 连接模块名和action type\r\n     */\r\n    joinModNameAndActionType=(modName,actionType)=>{\r\n        return modName+\"/\"+actionType;\r\n    }\r\n\r\n    /**\r\n     * action type名称是否指明是promise类型（程序中除该方式外，还有另一方式判断是否是promise类型action）\r\n     */\r\n    isPromiseActionType=(actionType)=>{\r\n        return needPromiseReg.test(actionType.trim());\r\n    }\r\n\r\n    /**\r\n     * 是否是生成器\r\n     */\r\n    isGen=(fn)=>{\r\n        // if (typeof fn !== 'function') {\r\n        //     return false;\r\n        // }\r\n        // if (isFnRegex.test(fnToStr.call(fn))) {\r\n        //     return true;\r\n        // }\r\n        // if (!hasToStringTag) {\r\n        //     var str = toStr.call(fn);\r\n        //     return str === '[object GeneratorFunction]';\r\n        // }\r\n        // return getProto(fn) === GeneratorFunction;\r\n\r\n        if(!fn){\r\n            return false;\r\n        }\r\n        return \"function\"===typeof(fn) && 0<=(\"\"+fn.prototype).toLowerCase().indexOf(\"generator\");\r\n    }\r\n};\r\n\r\n\r\n\r\nconst regWithModel=/^[^/]+[/][^/]+$/;\r\nconst regNoModel=/^[^/]+$/;\r\n\r\n\r\n//判断是否是生成器相关的变量\r\nvar toStr = Object.prototype.toString;\r\nvar fnToStr = Function.prototype.toString;\r\nvar isFnRegex = /^\\s*(?:function)?\\*/;\r\nvar hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';\r\nvar getProto = Object.getPrototypeOf;\r\nvar getGeneratorFunc = function () { // eslint-disable-line consistent-return\r\n    if (!hasToStringTag) {\r\n        return false;\r\n    }\r\n    try {\r\n        return Function('return function*() {}')();\r\n    } catch (e) {\r\n    }\r\n};\r\nvar generatorFunc = getGeneratorFunc();\r\nvar GeneratorFunction = generatorFunc ? getProto(generatorFunc) : {};\r\n\r\n\r\n//根据action.type判断是否需要返回promise的正则\r\n//1、promiseAddUser          不带命名空间，以promise作为前缀\r\n//2、addUserPromise          不带命名空间，以promise作为后缀\r\n//3、user/promiseAddUser     带命名空间，以promise作为前缀\r\n//4、user/addUserPromise     带命名空间，以promise作为后缀\r\nconst needPromiseReg=/^([^/]+[/])?((promise[^/]+)|([^/]+promise))$/i;\r\n\r\n\r\n\r\nexport default new GflowUtil();","D:\\ws_front\\gmap-ui\\src\\common\\SagaPromiseMiddleWare.js",["226"],"/**\r\n * 用来的对saga中间件进行增强，以支持返回值，该中间件应放在saga中间件之前\r\n * @param {*} param0 \r\n */\r\nconst sagaPromiseMiddleWare= (({ getState, dispatch })=>next=>action=>{\r\n    //如果action.type为包含promise前缀或后缀，则表示执行该action会需要得到结果,以promise包装并在promise内部向下一个中间件传递\r\n    if(action && action.extras && true===action.extras.promise  /*needPromiseReg.test(action.type.trim())*/){\r\n        return new Promise((res,rej)=>{\r\n            if(!action.extras){\r\n                action.extras={};\r\n            }\r\n            action.extras.promise=true;\r\n            action.extras.res=res;\r\n            action.extras.rej=rej;\r\n            return next(action);\r\n        });\r\n    }\r\n\r\n    //否则，直接向下一个中间传递\r\n    let nextLink=next(action);\r\n    return nextLink;\r\n});\r\n\r\n\r\n//根据action.type判断是否需要返回promise\r\n//1、promiseAddUser          不带命名空间，以promise作为前缀\r\n//2、addUserPromise          不带命名空间，以promise作为后缀\r\n//3、user/promiseAddUser     带命名空间，以promise作为前缀\r\n//4、user/addUserPromise     带命名空间，以promise作为后缀\r\nconst needPromiseReg=/^([^/]+[/])?((promise[^/]+)|([^/]+promise))$/i;\r\n\r\n\r\n\r\nexport default sagaPromiseMiddleWare;\r\n\r\n","D:\\ws_front\\gmap-ui\\src\\models\\common.js",[],"D:\\ws_front\\gmap-ui\\src\\models\\filesel.js",[],"D:\\ws_front\\gmap-ui\\src\\models\\tabs.js",[],"D:\\ws_front\\gmap-ui\\src\\service\\generalSvc.js",[],"D:\\ws_front\\gmap-ui\\src\\service\\api.js",["227"],"import {message} from 'antd';\r\nimport {dispatcher} from '../common/gflow';\r\n\r\nconst {app,getCurrentWebContents} = window.require('electron').remote;\r\n\r\n\r\nclass Api{\r\n\r\n\r\n    /**\r\n     * 初始化查找对话框，需要在页面加载完之后调用\r\n     */\r\n    initFindInPageDlg=()=>{\r\n        app.initFindInPage(300);\r\n    }\r\n\r\n    showFindInPageDlg=()=>{\r\n        app.showFindInPage(300,140);\r\n    }\r\n\r\n    closeFindInPageDlg=()=>{\r\n        app.hideFindInPage();\r\n    }\r\n\r\n    getInnerModuleVersions=()=>{\r\n        return app.getInnerModuleVersions();\r\n    }\r\n\r\n    openBash=()=>{\r\n        app.openGitBash();\r\n    }\r\n\r\n    openMapsDir=()=>{\r\n        app.openMapsDir();\r\n    }\r\n\r\n    existsFullpath=(fullpath)=>{\r\n        return app.existsFullpath(fullpath);\r\n    }\r\n\r\n    existsPic=(picName)=>{\r\n        return app.existsPic(picName);\r\n    }\r\n\r\n    existsAtt=(picName)=>{\r\n        return app.existsAtt(picName);\r\n    }\r\n\r\n    openPicByName=(name)=>{\r\n        return app.openPicByName(name);\r\n    }\r\n\r\n    openAttByName=(name)=>{\r\n        return app.openAttByName(name);\r\n    }\r\n\r\n    \r\n\r\n\r\n    \r\n    loadAppInfo=()=>{\r\n        return app.loadAppInfo();\r\n    }\r\n\r\n    reloadAppPage=()=>{\r\n        app.reloadAppPage();\r\n    }\r\n\r\n    isUrlFormat=(txt)=>{\r\n        return app.isUrlFormat(txt);\r\n    }\r\n\r\n    loadAppNameAndVersionTxt=()=>{\r\n        let {showname,version}=this.loadAppInfo();\r\n        return showname+\"　V\"+version;\r\n    }\r\n\r\n    existsGraph=(fn)=>{\r\n        return app.existsGraph(fn);\r\n    }\r\n\r\n    copyClipboardPicToImgsDir=(showName,currGraphFullpath)=>{\r\n        return app.copyClipboardPicToImgsDir(showName,currGraphFullpath);\r\n    }\r\n\r\n    copyPicToImgsDir=(picFullpath,showName,currGraphFullpath)=>{\r\n        return app.copyPicToImgsDir(picFullpath,showName,currGraphFullpath);\r\n    }\r\n    copyAttToAttsDir=(picFullpath,showName,currGraphFullpath)=>{\r\n        return app.copyAttToAttsDir(picFullpath,showName,currGraphFullpath);\r\n    }\r\n\r\n    selPicFile=()=>{\r\n        let rs=app.selPicFile();\r\n        // // console.log(\"选择目录结果\",rs);\r\n        return rs;\r\n\r\n        // dialog.showOpenDialog({properties: ['openFile']}, (files)=>{\r\n        //     if (files){\r\n        //         console.log(\"选\",files);\r\n        //         return;\r\n        //     }\r\n        //     console.log(\"未选\");\r\n        // });\r\n    }\r\n\r\n    isDevMode=()=>{\r\n        return app.isDevMode();\r\n    }\r\n\r\n\r\n    hasDevToolExtension=()=>{\r\n        return app.hasDevToolExtension();\r\n    }\r\n\r\n    getDevToolExtensionUrl=()=>{\r\n        return app.getDevToolExtensionUrl();\r\n    }\r\n\r\n    isMaximized=()=>{\r\n        return app.isMaximized();\r\n    }\r\n\r\n    openSaveFileDlg=()=>{\r\n        return app.openSaveFileDlg();\r\n    }\r\n\r\n    selAttFile=()=>{\r\n        let rs=app.selAttFile();\r\n        return rs;\r\n    }\r\n\r\n    calcPicUrl=(graphFileFullpath,picRelaPath)=>{\r\n        return app.calcPicUrl(graphFileFullpath,picRelaPath);\r\n    }\r\n    calcAttUrl=(graphFileFullpath,picRelaPath)=>{\r\n        return app.calcAttUrl(graphFileFullpath,picRelaPath);\r\n    }\r\n\r\n    openUrl=(url)=>{\r\n        if(url.startsWith(\"gmap://\")){\r\n            let fn=url.substring(\"gmap://\".length);\r\n            let flag=app.existsGraph(fn);\r\n            if(true!==flag){\r\n                message.warning(\"链接已经失效，请修改后重试\");\r\n                return;\r\n            }\r\n\r\n            let item=app.getFileItem(fn);\r\n            dispatcher.tabs.onSelItemPromise(item).then();\r\n            // console.log(\"笔记链接跳转：\",url,item);\r\n            return;\r\n        }\r\n\r\n        app.openUrl(url);\r\n    }\r\n\r\n\r\n    getPathItems=(dir=null)=>{\r\n        return app.getPathItems(dir);\r\n    }\r\n\r\n    showDevTool=()=>{\r\n        app.openDevTool();\r\n    }\r\n\r\n    /**\r\n     * 列出所有文件\r\n     */\r\n    list=(basedir=null)=>{\r\n        return app.listFiles(basedir).map(item=>({\r\n            showname: item.name,\r\n            itemsName:item.itemsName,\r\n            fullpath: item.fullpath,\r\n            isfile:   item.isfile,\r\n            size:     item.isfile ? getSizeStr(item.size) :(item.emptyDir?\"<空目录>\":\"<目录>\"),\r\n            pic:      item.pic,\r\n        }));\r\n\r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n                \r\n    }\r\n\r\n    /**\r\n     * 保存文件\r\n     */\r\n    save=(fullpath,content)=>{\r\n        app.saveFile(fullpath,content.replace(/\\r/g,'').trim());//\\r\\n全部换为\\n\r\n    }\r\n\r\n    /**\r\n     * 读取文件内容\r\n     */\r\n    load=(fullpath)=>{\r\n        let ret=app.readFile(fullpath);\r\n        if('string'===typeof(ret)){\r\n            return ret.replace(/\\r/g,'').trim();//\\r\\n全部换为\\n\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    getBasePath=()=>{\r\n        return app.getBasePath();\r\n    }\r\n\r\n    listAllDirs=()=>{\r\n        return app.listAllDirs();\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nconst getSizeStr=(size=0)=>{\r\n    if(0===size){\r\n        return \"<空>\";\r\n    }\r\n    if(size<1024){\r\n        return \"1K\";\r\n    }\r\n    return parseInt(size/1000)+\"K\";\r\n};\r\n\r\nexport default new Api();","D:\\ws_front\\gmap-ui\\src\\service\\mindmapSvc.js",["228","229","230"],"D:\\ws_front\\gmap-ui\\src\\service\\newMindmapSvc.js",[],"D:\\ws_front\\gmap-ui\\src\\service\\mindMapValidateSvc.js",[],"D:\\ws_front\\gmap-ui\\src\\service\\ganttSvc.js",["231","232","233","234","235"],"import dateUtil from '../common/dateUtil';\r\n\r\nclass GanttSvc{\r\n    /**\r\n     * 解析甘特图的一行记录，如果失败返回false，成功返回解析后的对象\r\n     */\r\n    parseGantItem=(str=\"\")=>{\r\n        /*\r\n        配置\r\n        使用两个逗号分隔的四部分：id, 起始日期/上个任务id, 结束日期/天数, 进度（0~100）\r\n        g:task1,20.3.5,20.4.5,40   //id  起始日期 结束日期 进度\r\n        g:taskx,20.3.5,12,0         //id  起始日期 天数 进度\r\n        g:taskm,task1,3,20          //id 从20.4.6开始（引用的任务的结果日期的后一天） 到20.4.8为结束日期，完成 20%\r\n        */\r\n\r\n        let ret=/^g[:]([^,]{1,50})[,]([^,]{1,50})[,]([-/.0-9]{1,8})[,]([0-9]{1,3})$/;\r\n        let mathResult=str.match(ret);\r\n        if(!mathResult){\r\n            return false;\r\n        }\r\n        let id=mathResult[1];\r\n        let startOrLastId=mathResult[2];\r\n        let endOrDays=mathResult[3];\r\n        let prog=parseInt(mathResult[4]);\r\n\r\n        //开始日期或引用id\r\n        let dateReg=/^[0-9]{2}[-/.][0-9]{1,2}[-/.][0-9]{1,2}$/;\r\n        if(dateReg.test(startOrLastId)){\r\n            startOrLastId={\r\n                isDate:true,\r\n                ymd:startOrLastId.replace(/[-/.]/g, '|').split('|').map((eachPart,ind) => parseInt(eachPart)+(0===ind?2000:0)),\r\n            };\r\n        }else{\r\n            startOrLastId={\r\n                isRef:true,\r\n                refId:startOrLastId,\r\n                ymd:null,\r\n            };\r\n        }\r\n\r\n        //结束日期或天数\r\n        if(dateReg.test(endOrDays)){\r\n            endOrDays={\r\n                isDate:true,\r\n                ymd:endOrDays.replace(/[-/.]/g, '|').split('|').map((eachPart,ind) => parseInt(eachPart)+(0===ind?2000:0)),\r\n            };\r\n        }else if(/^[0-9]{1,5}$/.test(endOrDays)){\r\n            endOrDays={\r\n                isDays:true,\r\n                days:parseInt(endOrDays),\r\n                ymd:null,\r\n            };\r\n        }else{\r\n            return false;\r\n        }\r\n\r\n\r\n        return {id,startObj:startOrLastId,endObj:endOrDays,prog};\r\n    }\r\n\r\n\r\n    /**\r\n     * 把甘特图数据解析成最终表格需要的数据\r\n     */\r\n    parseGantData=(gantItems=[])=>{\r\n        // let samples=[\r\n        //     \"g:task1,20.3.5,20.3.10,40\",\r\n        //     \"g:taskx,20.3.9,4,50\",\r\n        //     \"g:taskm,task1,10,100\",\r\n        //     \"g:task4,20.4/6,3,30\",\r\n        //     \"g:task4,20.4/6,3,30\",\r\n        //     \"g:task4,20.4/6,3,30\",\r\n        //     \"g:task4,20.4/6,3,30\",\r\n        //     \"g:task4,20.4/6,3,30\",\r\n        //     \"g:task4,20.4/6,3,30\",\r\n        //     \"g:task4,20.4/6,3,30\",\r\n        //     \"g:task4,20.4/6,10,30\",\r\n        // ];\r\n\r\n        if(!gantItems || 0===gantItems.length){\r\n            return {data:[],colKeys:[],relas:[]};\r\n        }\r\n\r\n        // let gantItems=[];\r\n        let minDay=[2055,12,31];\r\n        let maxDay=[2000,1,1];\r\n        let daysSpan=0;\r\n        \r\n\r\n        //迭代每个对象，计算准确的开始结束日期，任务天数等\r\n        gantItems.forEach((gant,ind)=>{\r\n            //计算起始日期\r\n            //起始日期是引用类型\r\n            if(gant.startObj.isRef){\r\n                let refItem=null;\r\n                let refInd=-1;\r\n\r\n                \r\n                //按引用id查找引用的任务\r\n                for(let i=0;i<ind;++i){\r\n                    let ref=gantItems[i];\r\n                    if(ref.id===gant.startObj.refId){\r\n                        refInd=i;\r\n                        refItem=ref;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                //如果没找到，并且格式为 refid+5、refid-3 的形式，\r\n                let daysAdjust=0;\r\n                let splitReg=/^(.+)([+-])([0-9]{1,3})$/;\r\n                let matchItems=gant.startObj.refId.match(splitReg);\r\n                if(null===refItem && matchItems){\r\n                    let rid=matchItems[1];\r\n                    let op=matchItems[2];\r\n                    let days=parseInt(matchItems[3]);\r\n\r\n                    for(let i=0;i<ind;++i){\r\n                        let ref=gantItems[i];\r\n                        if(ref.id===rid){\r\n                            refInd=i;\r\n                            refItem=ref;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if(refItem){\r\n                        daysAdjust=('+'===op?days:0-days);\r\n                    }\r\n                }\r\n\r\n\r\n                \r\n\r\n                // gantItems.forEach((ref,ind)=>{\r\n                //     if(ref.id===gant.startObj.refId){\r\n                //         refInd=ind;\r\n                //         refItem=ref;\r\n                //         return;\r\n                //     }\r\n                // });\r\n\r\n                if(!refItem){\r\n                    throw \"甘特图中未找到依赖的任务项，请确保被依赖项必须出现在依赖项之前。任务名称：\"+gant.task;\r\n                }\r\n                if(!refItem.end){\r\n                    throw \"甘特图的被依赖项的时间无法计算得到。任务名称：\"+gant.task;\r\n                }\r\n                let tmpDate=dateUtil.addDays(refItem.end,1+daysAdjust);               \r\n                gant.start=tmpDate;\r\n                gant.hasDep=true;\r\n                gant.depInd=refInd;\r\n                console.log(\"gant.depInd\",gant.depInd);\r\n                //引用关系\r\n            }\r\n            //起始日期是固定的日期\r\n            else{\r\n                gant.start=gant.startObj.ymd;\r\n            }\r\n\r\n            //计算结束日期\r\n            //结束日期是天数\r\n            if(gant.endObj.isDays){\r\n                if(!gant.start){\r\n                    throw \"甘特图的起始时间无法计算得到\";\r\n                }\r\n                \r\n                let tmpDate=dateUtil.addDays(gant.start,gant.endObj.days-1);                \r\n                gant.end=tmpDate;\r\n                gant.days=gant.endObj.days;\r\n            }\r\n            //结束日期是固定的日期\r\n            else{\r\n                gant.end=gant.endObj.ymd;\r\n                gant.days=dateUtil.distDays(gant.end,gant.start)+1;\r\n            }\r\n\r\n\r\n            if(dateUtil.dateLargeThan(gant.start,gant.end)){\r\n                throw \"甘特图的初始日期不能在结束日期之后。任务名称：\"+gant.task;\r\n            }\r\n\r\n\r\n\r\n            if(dateUtil.dateSmallThan(gant.start,minDay)){\r\n                minDay=gant.start;\r\n            }\r\n            if(dateUtil.dateLargeThan(gant.end,maxDay)){\r\n                maxDay=gant.end;\r\n            }\r\n\r\n            gant.overlim=false;\r\n            if(dateUtil.dateSmallThan(gant.end,dateUtil.currDayYMD()) && gant.prog<100){\r\n                gant.overlim=true;\r\n            }\r\n\r\n            // console.log(\"计算后\",gant);\r\n        });\r\n\r\n\r\n        \r\n        \r\n        //日期范围边界至少比实际日期范围多 3 天\r\n        minDay=dateUtil.addDays(minDay,-3);\r\n        maxDay=dateUtil.addDays(maxDay,3);\r\n\r\n        //保证日期间隔不小于30天\r\n        daysSpan=dateUtil.distDays(minDay,maxDay);\r\n        if(daysSpan<30){\r\n            let supply=parseInt((30-daysSpan+1)/2);\r\n            minDay=dateUtil.addDays(minDay,0-supply);\r\n            maxDay=dateUtil.addDays(maxDay,supply);\r\n            daysSpan=dateUtil.distDays(minDay,maxDay);\r\n        }\r\n\r\n        \r\n        //  minDay[2]=1;\r\n        \r\n        \r\n        // let eachMonthDays=[-1,31,28,31,30,31,30,31,31,30,31,30,31];\r\n        // if(dateUtil.isLeapYear(maxDay[0])){\r\n        //     eachMonthDays[2]=29;\r\n        // }\r\n        // maxDay[2]=eachMonthDays[maxDay[1]];\r\n        // daysSpan=dateUtil.distDays(minDay,maxDay);\r\n\r\n        // console.log(minDay.join(\"-\")+\" ~ \"+maxDay.join(\"-\"));\r\n\r\n\r\n        // 所有的天生成数组，后面迭代用\r\n        let alldays=[];\r\n        for(let eachDay=minDay; dateUtil.dateSmallThan(eachDay,maxDay,true); eachDay=dateUtil.addDays(eachDay,1)){\r\n            alldays.push(eachDay);\r\n        }\r\n\r\n\r\n        //列名称\r\n        const colKeys=[]; // [ [colid,colname], [colid,colname,ymd], [colid,colname,ymd] ...  ]  从第2项起每项有ymd\r\n        const yearColKeys=[];\r\n        colKeys.push(['task','任务']);\r\n        yearColKeys.push(['task','任务']);\r\n        alldays.forEach((day,ind)=>{\r\n            let prefix=\"\";\r\n            if([1,11,21].includes(day[2])){//遇到每月1、11、21号，则显示月份\r\n                prefix=day[1]+\".\";\r\n            }\r\n            let title=[prefix+day[2],dateUtil.getWeekday(day)];//第一行日期，第二行星期\r\n            colKeys.push([\"d\"+ind,title,day]);\r\n        });\r\n\r\n        \r\n        \r\n        let data=[];\r\n        const relas=[];\r\n        const currYMD=dateUtil.currDayYMD();\r\n\r\n        //循环每行记录\r\n        gantItems.forEach((gantLine,lineInd)=>{\r\n            let item={};\r\n            item.task=gantLine.task;\r\n            item.key=\"gantline-\"+lineInd;\r\n            \r\n            //循环每个日期作为列\r\n            alldays.forEach((day,colind)=>{\r\n                \r\n\r\n                //背景颜色的覆盖关系：当前天 > 月首日 > 休息日\r\n                let obj={\r\n                    isCurrDay: dateUtil.isDayEq(day),\r\n                    isHoliday: dateUtil.isHoliday(day),\r\n                    isFirstDay:1===day[2],\r\n\r\n                    headerShouldShowSetHolidayBg:false,\r\n                    headerShouldShowSetFirstDayBg:false,\r\n                    headerShouldShowSetCurrdayBg:false,\r\n                };\r\n\r\n                //标题列的样式，从优先级低到最高依次覆盖\r\n                if(obj.isHoliday){\r\n                    obj.headerShouldShowSetHolidayBg=true;\r\n                    obj.headerShouldShowSetFirstDayBg=false;\r\n                    obj.headerShouldShowSetCurrdayBg=false;\r\n                }\r\n                if(obj.isFirstDay){\r\n                    obj.headerShouldShowSetFirstDayBg=true;\r\n                    obj.headerShouldShowSetHolidayBg=false;\r\n                    obj.headerShouldShowSetCurrdayBg=false;\r\n                }\r\n                if(obj.isCurrDay){\r\n                    obj.headerShouldShowSetCurrdayBg=true;\r\n                    obj.headerShouldShowSetHolidayBg=false;\r\n                    obj.headerShouldShowSetFirstDayBg=false;\r\n                    \r\n                }\r\n\r\n                //是初始日期\r\n                if(dateUtil.isDayEq(day,gantLine.start)){\r\n                    obj.span=gantLine.days;\r\n                    obj.hasProg=true;\r\n                    obj.prog=gantLine.prog;\r\n                    obj.overlim=gantLine.overlim;\r\n                    obj.progSt=(100===gantLine.prog?\"success\":(obj.overlim?\"exception\":\"active\"));\r\n                    item.progInd=colind;\r\n\r\n                    //有依赖项则记录对应关系，以便后面画箭头用\r\n                    if(gantLine.hasDep){\r\n                        relas.push({\r\n                            from:[gantLine.depInd,  data[gantLine.depInd].progInd+1,],\r\n                            to:[lineInd,  colind+1,]\r\n                        });\r\n                    }\r\n\r\n                    //今天在任务初始结束日期之间，并且跨度大于1天。由于单元格跨列，需使用渐变的样式配合百分比的背景定位来显示背景\r\n                    // if(1<gantLine.days && dateUtil.dateSmallThan(gantLine.start,currYMD,true) && dateUtil.dateSmallThan(currYMD,gantLine.end,true)){\r\n                    //     let startPercent=100*dateUtil.distDays(gantLine.start,currYMD)/(gantLine.days-1);//位置是除去背景大小后剩余部分的百分比\r\n                    //     let widPercent=100/gantLine.days;\r\n                    //     obj.percentBg=[startPercent,widPercent];\r\n                    //     obj.shouldSetCurrDayBg=true;\r\n                    // }\r\n\r\n                    //如果是跨多列的情况，则按每列计算\r\n                    if(1<gantLine.days){\r\n                        let percentBg=[];\r\n                        for(let eachDay=gantLine.start,eachDist=0; dateUtil.dateSmallThan(eachDay,gantLine.end,true); eachDay=dateUtil.addDays(eachDay,1),++eachDist){\r\n                            let dayProps={\r\n                                isCurrDay: dateUtil.isDayEq(eachDay),\r\n                                isHoliday: dateUtil.isHoliday(eachDay),\r\n                                isFirstDay:1===eachDay[2],\r\n                            }\r\n                            let startPercent=100*eachDist/(gantLine.days-1);//位置是除去背景大小后剩余部分的百分比\r\n                            let widPercent=100/gantLine.days;\r\n                            let isSpecialDay=false;\r\n                            let dayConfig=null;\r\n                            if(dayProps.isHoliday){\r\n                                isSpecialDay=true;\r\n                                dayConfig={\r\n                                    st:startPercent,\r\n                                    wid:widPercent,\r\n                                    isHoliday:true,\r\n                                };\r\n                            }\r\n                            if(dayProps.isFirstDay){\r\n                                isSpecialDay=true;\r\n                                dayConfig={\r\n                                    st:startPercent,\r\n                                    wid:widPercent,\r\n                                    isFirstDay:true,\r\n                                };\r\n                            }\r\n                            if(dayProps.isCurrDay){\r\n                                isSpecialDay=true;\r\n                                dayConfig={\r\n                                    st:startPercent,\r\n                                    wid:widPercent,\r\n                                    isCurrDay:true,\r\n                                };\r\n                            }\r\n                            if(isSpecialDay){\r\n                                percentBg.push(dayConfig);\r\n                            }\r\n                        }\r\n                        if(percentBg && 0<percentBg.length){\r\n                            obj.percentBg=percentBg;\r\n                            obj.shouldShowPercentBg=true;\r\n                        }\r\n                        \r\n                    }\r\n\r\n\r\n                    //浮动消息，两种格式：\r\n                    //1、字符串\r\n                    //2、数组 [  {txt:'aa', strong:true/false}, ... ]\r\n                    let leftDays=dateUtil.distDays(gantLine.end,currYMD);\r\n                    let leftStartDays=dateUtil.distDays(gantLine.start,currYMD);\r\n                    //已完成\r\n                    if(100===obj.prog){\r\n                        obj.msg=\"任务已经完成\";\r\n                    }\r\n                    //未完成\r\n                    else{\r\n                        //过期\r\n                        if(obj.overlim){\r\n                            obj.msg=[\r\n                                {txt: \"任务已经过期\",},\r\n                                {txt: \"\"+leftDays, strong:true},\r\n                                {txt:\"天\"},\r\n                            ];\r\n                        }\r\n                        //还未开始\r\n                        else if(dateUtil.dateSmallThan(currYMD,gantLine.start)){\r\n                            obj.msg=[\r\n                                {txt:\"距离任务开始还有\"},\r\n                                {txt:''+leftStartDays, strong:true},\r\n                                {txt:\"天\"}\r\n                            ];\r\n                            if(leftStartDays<4){\r\n                                let tmp=['今天','明天','后天','大后天'][leftStartDays];\r\n                                obj.msg=\"任务将于【\"+tmp+\"】开始\";\r\n                            }\r\n                        }\r\n                        //已开始\r\n                        else {\r\n                            let daysUsed=dateUtil.distDays(currYMD,gantLine.start)+1;\r\n                            obj.msg=[\r\n                                {txt:\"任务已开始\"},\r\n                                {txt:''+daysUsed, strong:true},\r\n                                {txt: '天，'},\r\n                            ];\r\n                            if(leftDays<4){\r\n                                let tmp=['今天','明天','后天','大后天'][leftDays];\r\n                                obj.msg.push({txt:\"预计【\"+tmp+\"】完成\"});\r\n                            }else{\r\n                                obj.msg.push({txt:'离完成还剩'});\r\n                                obj.msg.push({txt:''+leftDays, strong:true});\r\n                                obj.msg.push({txt:'天'});\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                //起始与结束日期之间，不包括初始，包括结束\r\n                else if(dateUtil.dateLargeThan(day,gantLine.start) &&  dateUtil.dateSmallThan(day,gantLine.end,true)){\r\n                    obj.span=0;\r\n                    obj.hasProg=false;\r\n                    obj.prog=0;\r\n                }\r\n                //其他日期\r\n                else{\r\n                    obj.span=1;\r\n                    obj.hasProg=false;\r\n                    obj.prog=0;\r\n                }\r\n\r\n                //特殊日期的背景色标识\r\n                if(1===obj.span && obj.isHoliday){\r\n                    obj.shouldSetHolidayBg=true;\r\n                }\r\n                if(1===obj.span && obj.isCurrDay){\r\n                    obj.shouldSetCurrDayBg=true;\r\n                }\r\n                if(1===obj.span && obj.isFirstDay){\r\n                    // console.log(\"222\");\r\n                    obj.shouldSetFirstDayBg=true;\r\n                }\r\n\r\n                //跨列的背景样式 > 当前天 > 月首日 > 休息日\r\n                //解决不同日期类型背景的优先级问题\r\n                if(obj.shouldShowPercentBg){\r\n                    obj.shouldSetCurrDayBg=false;\r\n                    obj.shouldSetFirstDayBg=false;\r\n                    obj.shouldSetHolidayBg=false;\r\n                }\r\n                else if(obj.shouldSetCurrDayBg){\r\n                    obj.shouldSetFirstDayBg=false;\r\n                    obj.shouldSetHolidayBg=false;\r\n                }else if(obj.shouldSetFirstDayBg){\r\n                    obj.shouldSetHolidayBg=false;\r\n                }\r\n\r\n                item[\"d\"+colind]=obj;\r\n            });\r\n\r\n            data.push(item);\r\n        });\r\n\r\n\r\n\r\n        return {data,colKeys,relas};\r\n    }\r\n\r\n    \r\n\r\n}\r\n\r\nconst inst=new GanttSvc();\r\n\r\n// loadGanttData: inst.loadGanttData,\r\nexport default {\r\n    parseGantData : inst.parseGantData,    \r\n    parseGantItem:inst.parseGantItem,\r\n};","D:\\ws_front\\gmap-ui\\src\\common\\dateUtil.js",["236"],"const addDays=(ymd,days)=>{\r\n    let tmpDate=new Date(ymd[0],ymd[1]-1,ymd[2]);\r\n    tmpDate.setDate(tmpDate.getDate()+days);\r\n    return [\r\n        tmpDate.getFullYear(),\r\n        tmpDate.getMonth()+1,\r\n        tmpDate.getDate(),\r\n    ];\r\n}\r\n\r\nconst distDays=(ymd1,ymd2)=>{\r\n    let d1=new Date(ymd1[0],ymd1[1]-1,ymd1[2]);\r\n    let d2=new Date(ymd2[0],ymd2[1]-1,ymd2[2]);\r\n    return parseInt(Math.abs(d1.getTime()-d2.getTime())/85400000);\r\n}\r\n\r\nconst dateSmallThan=(ymd1,ymd2,containsEq=false)=>{\r\n    let d1=new Date(ymd1[0],ymd1[1]-1,ymd1[2]);\r\n    let d2=new Date(ymd2[0],ymd2[1]-1,ymd2[2]);\r\n    return containsEq ? d1.getTime()<=d2.getTime() : d1.getTime()<d2.getTime();\r\n}\r\n\r\nconst dateLargeThan=(ymd1,ymd2,containsEq=false)=>{\r\n    let d1=new Date(ymd1[0],ymd1[1]-1,ymd1[2]);\r\n    let d2=new Date(ymd2[0],ymd2[1]-1,ymd2[2]);\r\n    return containsEq ? d1.getTime()>=d2.getTime() : d1.getTime()>d2.getTime();\r\n}\r\n\r\nconst currDayYMD=()=>{\r\n    let now=new Date();\r\n    now.setHours(0);\r\n    now.setMinutes(0)\r\n    now.setSeconds(0);\r\n    now.setMilliseconds(0);\r\n    return [now.getFullYear(),now.getMonth()+1,now.getDate()];\r\n}\r\n\r\nconst isLeapYear=(year)=>{\r\n    return (0===year%400 || (0===year%4 && 0!==year%100));\r\n}\r\n\r\nconst isDayEq=(ymd,ymd2=null)=>{\r\n    if(null===ymd2){\r\n        ymd2=currDayYMD();\r\n    }\r\n    \r\n    return (ymd[0]===ymd2[0] && ymd[1]===ymd2[1] && ymd[2]===ymd2[2]);\r\n}\r\n\r\nconst isHoliday=(ymd)=>{\r\n    return ['六','日'].includes(getWeekday(ymd));\r\n}\r\n\r\nconst getWeekday=(ymd)=>{\r\n    let date=new Date(ymd[0],ymd[1]-1,ymd[2]);    \r\n    return [\"日\",\"一\",\"二\",\"三\",\"四\",\"五\",\"六\"][date.getDay()];\r\n}\r\n\r\nexport default {addDays,distDays,dateSmallThan,dateLargeThan,isDayEq,getWeekday,isHoliday,currDayYMD,isLeapYear};","D:\\ws_front\\gmap-ui\\src\\ui\\home\\index.js",[],"D:\\ws_front\\gmap-ui\\src\\ui\\home\\MapsViewer.js",["237","238","239","240","241","242"],"/** @jsxImportSource @emotion/react */\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport { Layout, message,Modal } from 'antd';\r\n\r\nimport Welcome from './views/Welcome';\r\nimport OpenGraphDlg from './views/OpenGraphDlg';\r\nimport NewGraphDlg from './views/NewGraphDlg';\r\nimport EditGraphDlg from './views/EditGraphDlg';\r\nimport Toolbar from './views/Toolbar';\r\nimport GraphTabs from './views/GraphTabs';\r\nimport RefViewer from './views/RefViewer';\r\nimport TimelineViewer from './views/TimelineViewer';\r\nimport ProgsViewer from './views/ProgsViewer';\r\nimport GantDlg from './views/gantt/GantDlg';\r\n\r\n\r\nimport * as uiUtil from '../../common/uiUtil';\r\nimport {connect,dispatcher} from '../../common/gflow';\r\nimport api from '../../service/api';\r\nimport screenShot from '../../service/screenShot';\r\nimport { useSelector } from 'react-redux';\r\nimport keyDetector from '../../common/keyDetector';\r\n\r\n\r\nconst { Content } = Layout;\r\n\r\n\r\n/**\r\n * panes格式：\r\n * [\r\n *      {\r\n *          title: name,\r\n *          key: fullpath,\r\n *          mapTxts: defMapTxt,\r\n *          mapCells: cells\r\n *      }\r\n * ]\r\n * \r\n * filelist格式：\r\n * [\r\n *      {\r\n *          showname:'数据结构',\r\n *          fullpath:'d:/a/b/c/数据结构.md',\r\n *          size:'108K'\r\n *      }\r\n * ]\r\n */\r\nconst MapsViewer=(props)=>{\r\n    const {hasPane,installPathValid,activeKey,panes}= useSelector((state)=>({\r\n        hasPane:            state.tabs && state.tabs.panes && 0 < state.tabs.panes.length,\r\n        installPathValid:   state.common.installPathValid,\r\n        activeKey:          state.tabs.activeKey,\r\n        panes:              state.tabs.panes,\r\n    }));\r\n\r\n\r\n    const [newMapDlgVisible, setNewMapDlgVisible]=useState(false);\r\n    const [selMapDlgVisible, setSelMapDlgVisible]=useState(false);\r\n\r\n    const [{currMapName,editTmpTxt,editMapDlgVisible}, setEditDlgState]= useState({\r\n        currMapName: '',\r\n        editTmpTxt: '',\r\n        editMapDlgVisible: false,\r\n    });\r\n\r\n    const [{gantdlgVisible, gantObj}, setGantdlgState]=useState({\r\n        gantdlgVisible: false,\r\n        gantObj:null,\r\n    });\r\n\r\n    const [{refViewerDlgVisible, currRefObj}, setRefViewerDlgState]=useState({\r\n        refViewerDlgVisible: false,\r\n        currRefObj:{},\r\n    });\r\n\r\n    const [{timelineDlgVisible, timelineObj}, setTimelineDlgState]=useState({\r\n        timelineDlgVisible: false,\r\n        timelineObj: [],\r\n    });\r\n\r\n    const [{progsDlgVisible, progsObj}, setProgsDlgState]=useState({\r\n        progsDlgVisible: false,\r\n            progsObj: [],\r\n    });\r\n\r\n    useEffect(()=>{\r\n        if(!installPathValid){\r\n            Modal.warning({\r\n                title: '警告',\r\n                content: '请不要安装到中文路径或带空格的路径下，否则可能造成某些功能异常',\r\n            });\r\n            return;\r\n        }\r\n    },[installPathValid]);\r\n\r\n\r\n    \r\n    \r\n\r\n    const closeAllDlg =useCallback(() => {\r\n        setNewMapDlgVisible(false);\r\n        setSelMapDlgVisible(false);\r\n        setEditDlgState((state)=>({...state, editMapDlgVisible:false}));\r\n        setRefViewerDlgState((state)=>({...state, refViewerDlgVisible:false}));\r\n        setTimelineDlgState((state)=>({...state, timelineDlgVisible:false}));\r\n        setProgsDlgState((state)=>({...state, progsDlgVisible:false}));\r\n        setGantdlgState((state)=>({...state, gantdlgVisible:false}));\r\n    },[\r\n        setNewMapDlgVisible,\r\n        setSelMapDlgVisible,\r\n        setEditDlgState,\r\n        setRefViewerDlgState,\r\n        setTimelineDlgState,\r\n        setProgsDlgState,\r\n        setGantdlgState\r\n    ]);\r\n\r\n\r\n\r\n    /**\r\n     * 初始化查找快捷键，并在组件销毁时移除\r\n     */\r\n    useEffect(()=>{\r\n        const keyHandle=(e)=>{\r\n            //当编辑窗口或新建窗口打开时，不支持查找功能\r\n            const excludeStates=[editMapDlgVisible, newMapDlgVisible];\r\n            const isExclude=excludeStates.some(each=>true===each);\r\n\r\n            keyDetector.on(e,{\r\n                //ctrl+f 网页内查找\r\n                'ctrl+f':(e)=>{\r\n                    if(isExclude){return;}\r\n                    api.showFindInPageDlg();\r\n                },\r\n\r\n                //esc 关闭网页内查找\r\n                'esc':(e)=>{\r\n                    if(isExclude){return;}\r\n                    api.closeFindInPageDlg();\r\n                },\r\n            });\r\n        }\r\n\r\n        document.addEventListener('keydown', keyHandle);\r\n        return ()=>document.removeEventListener('keydown',keyHandle);\r\n    },[editMapDlgVisible, newMapDlgVisible]);\r\n\r\n    useEffect(()=>{\r\n        api.closeFindInPageDlg();\r\n    },[hasPane]);\r\n\r\n\r\n\r\n    //------------新建图表操作----------------------------------------------------------------------\r\n    const onShowNewMapDlg =useCallback(() => {\r\n        api.closeFindInPageDlg();\r\n        setNewMapDlgVisible(true);\r\n    },[setNewMapDlgVisible]);\r\n\r\n\r\n    const onNewMapDlgOK =useCallback(async ({dir,name}) => {\r\n        try {\r\n            await dispatcher.tabs.onNewMapPromise({dir,name});\r\n            setNewMapDlgVisible(false);\r\n        } catch (error) {\r\n        }\r\n    },[dispatcher, setNewMapDlgVisible]);\r\n\r\n\r\n    //------------修改导图----------------------------------------------------------------------\r\n    const onShowEditMapDlg =useCallback(async () => {\r\n        try {\r\n            api.closeFindInPageDlg();\r\n            let currPane=await dispatcher.tabs.selectCurrPanePromise();\r\n            setEditDlgState({\r\n                editMapDlgVisible: true,\r\n                editTmpTxt: currPane.mapTxts,\r\n                currMapName: currPane.title\r\n            });\r\n        } catch (error) {\r\n        }\r\n    },[dispatcher, setEditDlgState]);\r\n\r\n    const onChangeEditTmpTxt =useCallback((editor, data, value) => {\r\n        setEditDlgState((state)=>({...state, editTmpTxt: value}));\r\n    },[setEditDlgState]);\r\n\r\n    const onEditMapDlgOK =useCallback(async (closeDlg = true) => {\r\n        try {\r\n            let txt = editTmpTxt;\r\n            await dispatcher.tabs.onSaveMapPromise(txt);\r\n            setEditDlgState(state=>({...state, editMapDlgVisible: !closeDlg}));\r\n            if (!closeDlg) {\r\n                message.success(\"图表内容已保存\");\r\n            }\r\n        } catch (error) {\r\n        }\r\n    },[dispatcher, setEditDlgState, editTmpTxt]);\r\n\r\n\r\n\r\n    //------------选择文件功能----------------------------------------------------------------------\r\n    const onSelectMapItem =useCallback(async (item) => {\r\n        try{\r\n            await dispatcher.tabs.onSelItemPromise(item);\r\n            setSelMapDlgVisible(false);\r\n        }catch(e){\r\n        }\r\n    },[dispatcher, setSelMapDlgVisible]);\r\n\r\n\r\n    const showSelMapDlg =useCallback(() => {\r\n        setSelMapDlgVisible(true);\r\n    },[setSelMapDlgVisible]);\r\n\r\n\r\n\r\n    //------------导图的操作----------------------------------------------------------------------\r\n\r\n    const onShowTimeline =useCallback((timelineObj) => {\r\n        setTimelineDlgState({\r\n            timelineDlgVisible: true,\r\n            timelineObj: timelineObj,\r\n        });\r\n    },[setTimelineDlgState]);\r\n\r\n    const onShowProgs =useCallback((progs) => {\r\n        setProgsDlgState({\r\n            progsObj: progs,\r\n            progsDlgVisible: true,\r\n        });\r\n    },[setProgsDlgState]);\r\n\r\n    const onShowGant =useCallback((gantObj) => {\r\n        setGantdlgState({\r\n            gantdlgVisible: true,\r\n            gantObj,\r\n        });\r\n    },[setGantdlgState]);\r\n\r\n    const openRef =useCallback((refObj) => {\r\n        setRefViewerDlgState({\r\n            currRefObj: refObj,\r\n            refViewerDlgVisible: true,\r\n        });\r\n    },[setRefViewerDlgState]);\r\n\r\n    const onExpImage=useCallback(()=>{\r\n        panes.forEach((item,ind)=>{\r\n            if(activeKey!==item.key){\r\n                return;\r\n            }\r\n            let ele=document.querySelector(`#graphwrapper_${ind}`);\r\n            if(!ele){\r\n                message.warn(\"图表状态异常，无法导出\");\r\n                return;\r\n            }\r\n            let containerEle=ele.parentNode;\r\n            let {x,y}=containerEle.getBoundingClientRect();\r\n\r\n\r\n            if(!api.isMaximized()){\r\n                message.warn(\"请先点击最大化按钮后再导出图片\");\r\n                return;\r\n            }\r\n\r\n\r\n            \r\n            screenShot(\r\n                api.openSaveFileDlg,    //保存文件对话框函数\r\n                api.openUrl,            //执行截屏的函数\r\n                containerEle,           //容器元素\r\n                ele,                    //内容元素\r\n                Math.floor(x),          //开始截取的位置相对于浏览器主体内容区域左边的距离\r\n                Math.floor(y),          //开始截取的位置相对于浏览器主体内容区域上边的距离\r\n                api.isDevMode()         //是否考虑菜单栏的高度：开始模式显示菜单栏，运行模式不显示\r\n            );\r\n        });\r\n    },[activeKey, panes]);\r\n\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <Layout>\r\n                {\r\n                    hasPane ?\r\n                        <>\r\n                            <Toolbar\r\n                                onShowNewMapDlg={onShowNewMapDlg}\r\n                                onShowSelMapDlg={showSelMapDlg}\r\n                                onShowEditMapDlg={onShowEditMapDlg}\r\n                                onShowDir={api.openMapsDir}\r\n                                onShowCmd={api.openBash}\r\n                                onShowDevTool={api.showDevTool}\r\n                                onReloadApp={api.reloadAppPage}\r\n                                onExpImage={onExpImage}\r\n                                onCopyMapLink={dispatcher.tabs.copyCurrMapLink}\r\n                            />\r\n                            <GraphTabs\r\n                                editing={editMapDlgVisible}\r\n                                newing={newMapDlgVisible}\r\n                                opening={selMapDlgVisible}\r\n                                onOpenLink={api.openUrl}\r\n                                onOpenRef={openRef}\r\n                                onShowTimeline={onShowTimeline}\r\n                                onShowProgs={onShowProgs}\r\n                                onShowGant={onShowGant}\r\n                            />\r\n                        </>\r\n\r\n                        :\r\n\r\n                        <Content>\r\n                            <Welcome \r\n                                onOpenMapsDir={api.openMapsDir}\r\n                                onOpenBash={api.openBash}\r\n                                onShowDevTool={api.showDevTool}\r\n                                onReloadApp={api.reloadAppPage}\r\n                                onAddMap={onShowNewMapDlg}\r\n                                onSelectMapItem={onSelectMapItem}/>\r\n                        </Content>\r\n                }\r\n            </Layout>\r\n\r\n            <NewGraphDlg\r\n                visible={newMapDlgVisible}\r\n                onOk={onNewMapDlgOK}\r\n                onCancel={closeAllDlg}\r\n            />\r\n\r\n            <EditGraphDlg\r\n                visible={editMapDlgVisible}\r\n                currMapName={currMapName}\r\n                editTmpTxt={editTmpTxt}\r\n                onOnlySave={onEditMapDlgOK.bind(this, false)}\r\n                onOk={onEditMapDlgOK.bind(this, true)}\r\n                onCancel={closeAllDlg}\r\n                onChangeEditTmpTxt={onChangeEditTmpTxt}\r\n            />\r\n\r\n            <OpenGraphDlg\r\n                visible={selMapDlgVisible}\r\n                onCancel={closeAllDlg}\r\n                onSelectMapItem={onSelectMapItem}\r\n            />\r\n\r\n            <RefViewer\r\n                currRefObj={currRefObj}\r\n                visible={refViewerDlgVisible}\r\n                onCancel={closeAllDlg}\r\n            />\r\n\r\n            <TimelineViewer\r\n                visible={timelineDlgVisible}\r\n                timelineObj={timelineObj}\r\n                onCancel={closeAllDlg}\r\n            />\r\n\r\n            <ProgsViewer\r\n                visible={progsDlgVisible}\r\n                progsObj={progsObj}\r\n                onCancel={closeAllDlg}\r\n            />\r\n\r\n            <GantDlg\r\n                visible={gantdlgVisible}\r\n                gantObj={gantObj}\r\n                onCancel={closeAllDlg}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n    \r\n}\r\n\r\n\r\n\r\nexport default React.memo(MapsViewer);\r\n\r\n","D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\OpenGraphDlg.js",["243","244","245","246","247","248","249","250"],"/** @jsxImportSource @emotion/react */\r\nimport React from 'react';\r\nimport { Layout,   Tabs, Modal, Input, message, Button, Divider } from 'antd';\r\nimport PathSelect from './PathSelect';\r\nimport {withEnh} from '../../common/specialDlg';\r\nimport {connect} from '../../../common/gflow';\r\nimport ConnectedPathSelect from './ConnectedPathSelect';\r\nimport {createSelector} from 'reselect';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst EnhDlg=withEnh(Modal);\r\n\r\n/**\r\n * 打开图表对话框\r\n * @param {*} props \r\n */\r\nconst OpenGraphDlg=(props)=>{\r\n    const {winW,winH}=useSelector((state)=>({\r\n        winW:state.common.winW,\r\n        winH:state.common.winH,\r\n    }));\r\n\r\n    let {dlgW, backtopLoc, contentMaxH}=calcSizeProps({winW,winH});\r\n\r\n    return (\r\n        <EnhDlg noFooter\r\n                title=\"打开图表\"\r\n                size={{w:dlgW}}\r\n                visible={props.visible}\r\n                onCancel={props.onCancel}>\r\n            <ConnectedPathSelect \r\n                maxH={contentMaxH}\r\n                forceMaxH={true}\r\n                backtopLoc={backtopLoc}\r\n                onSelectMapItem={props.onSelectMapItem}/>\r\n        </EnhDlg>\r\n    );\r\n    \r\n}\r\n\r\n/**\r\n * 计算对话框相关大小和位置等信息\r\n */\r\nconst calcSizeProps=createSelector(\r\n    props=>props.winW,\r\n    props=>props.winH,\r\n    (winW, winH)=>{\r\n        //对话框宽度计算\r\n        let dlgW=900;\r\n        if(winW<=dlgW){\r\n            dlgW=winW-50;\r\n        }\r\n\r\n        //backtop按钮的位置计算：右、上\r\n        let backtopLoc=[\r\n            (winW-dlgW)/2+100,\r\n            150\r\n        ];\r\n\r\n        //对话框内容区的最大高度\r\n        let contentMaxH=winH- 64 - 250;\r\n\r\n        return {\r\n            dlgW,\r\n            backtopLoc,\r\n            contentMaxH\r\n        };\r\n    }\r\n);\r\n\r\nexport default React.memo(OpenGraphDlg);","D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\NewGraphDlg.js",["251","252","253","254","255","256","257","258"],"/** @jsxImportSource @emotion/react */\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport {  Modal, Input,AutoComplete,Button,TreeSelect } from 'antd';\r\nimport * as uiUtil from '../../../common/uiUtil';\r\nimport { FileMarkdownOutlined,ReloadOutlined,HomeOutlined,FolderOutlined } from '@ant-design/icons';\r\nimport api from '../../../service/api';\r\nimport {connect,dispatcher} from '../../../common/gflow';\r\nimport {createSelector} from 'reselect';\r\nimport { useSelector } from 'react-redux';\r\n\r\n/**\r\n * 新建图表对话框\r\n */\r\nconst NewGraphDlg=(props)=>{\r\n    const {allDirs}=useSelector((state)=>({\r\n        allDirs: state.common.allDirs,\r\n    }));\r\n\r\n    const [name, setName]=useState('');\r\n    const [dir, setDir]=useState('');\r\n    const nameEle=useRef();\r\n\r\n    //每次显示时把输入框设置焦点\r\n    useEffect(()=>{\r\n        if(props.visible){\r\n            setName('');\r\n            setTimeout(() => {\r\n                if(nameEle.current){\r\n                    nameEle.current.focus();\r\n                }\r\n            }, 300);\r\n        }\r\n    },[props.visible]);\r\n\r\n    //加载所有目录层次\r\n    const reloadAllDirs=useCallback(()=>{\r\n        dispatcher.common.reloadAllDirs();\r\n    },[dispatcher]);\r\n\r\n    /**\r\n     * 修改事件\r\n     * @param {*} fun \r\n     * @param {*} e \r\n     */\r\n    const onChange=useCallback((fun,e)=>{\r\n        let val=(e && e.target ? e.target.value : e);\r\n        val=('undefined'===typeof(val) ? '' : val);\r\n        fun(val);\r\n    },[]);\r\n\r\n    /**\r\n     * 确定事件\r\n     * @param {*} e \r\n     */\r\n    const onOk=(e)=>{\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        props.onOk({dir:dir.trim(), name:name.trim()});\r\n    }\r\n\r\n    \r\n    return (\r\n        <Modal  title={getDlgTitle({dir, name})}\r\n                visible={props.visible}\r\n                onOk={onOk}\r\n                onCancel={props.onCancel}\r\n                width={700}>\r\n            \r\n            <table css={{width:'100%'}}>\r\n                <tbody>\r\n                    <tr>\r\n                        <td css={{paddingTop:'10px',width:'80px'}}>图表目录：</td>\r\n                        <td css={{paddingTop:'10px',}}>\r\n                            <TreeSelect\r\n                                style={{ width: '100%' }}\r\n                                value={dir}\r\n                                dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\r\n                                treeData={allDirs}\r\n                                placeholder=\"请选择图表目录\"\r\n                                treeDefaultExpandAll\r\n                                allowClear\r\n                                onChange={onChange.bind(this,setDir)}\r\n                            />\r\n                        </td>\r\n                        <td css={{paddingTop:'10px',width:'50px'}}>\r\n                            <Button css={{marginLeft:'15px'}} \r\n                                title='刷新目录列表' \r\n                                size='small' \r\n                                type=\"default\" \r\n                                shape=\"circle\" \r\n                                icon={<ReloadOutlined />} \r\n                                onClick={reloadAllDirs} />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td css={{paddingTop:'10px',}}>图表名称：</td>\r\n                        <td css={{paddingTop:'10px',}}>\r\n                            <Input\r\n                                css={{width:'100%'}}\r\n                                placeholder=\"请输入图表名称\"\r\n                                ref={nameEle}\r\n                                value={name} \r\n                                onChange={onChange.bind(this,setName)} \r\n                                onPressEnter={onOk}\r\n                            />\r\n                        </td>\r\n                        <td></td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n            \r\n            \r\n        </Modal>\r\n    );\r\n    \r\n}\r\n\r\nconst getDlgTitle=createSelector(\r\n    props=>props.dir.trim(),\r\n    props=>props.name.trim(),\r\n    (dir,name)=>(\"新建图表 - \"+(dir ? dir+\"/\"+(name?name:\"<空>\") : (name?name:\"<空>\")))\r\n);\r\n\r\n\r\n\r\n\r\nexport default React.memo(NewGraphDlg);","D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\RefViewer.js",["259","260","261","262","263","264","265","266","267"],"/** @jsxImportSource @emotion/react */\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport { Layout,   Tabs, Modal, Input, message, Button, Divider,Popover,BackTop,Avatar } from 'antd';\r\nimport {withEnh} from '../../common/specialDlg';\r\nimport {connect} from '../../../common/gflow';\r\nimport MarkedHighlightUtil from '../../../common/markedHighlightUtil';\r\nimport mindmapSvc from '../../../service/mindmapSvc';\r\nimport api from '../../../service/api';\r\nimport {createSelector} from 'reselect';\r\n\r\nimport marked from 'marked';\r\nimport hljs from 'highlight.js';\r\nimport 'highlight.js/styles/atom-one-dark-reasonable.css';\r\nimport 'github-markdown-css/github-markdown.css';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst EnhDlg=withEnh(Modal);\r\nconst codeBg = 'rgba(40,44,52,1)'; //40 44 52  #282c34\r\nconst markedHighlightUtil = new MarkedHighlightUtil();\r\n\r\n/**\r\n * 引用查看器\r\n * @param {*} props \r\n */\r\nconst RefViewer=(props)=>{\r\n    const {winW,winH,activeKey}=useSelector((state)=>({\r\n        winW:       state.common.winW,\r\n        winH:       state.common.winH,\r\n        activeKey:  state.tabs.activeKey,\r\n    }));\r\n\r\n    const [wrapperId]=useState(()=>\"refviewercontainer\"+new Date().getTime());\r\n\r\n    useEffect(()=>{\r\n        markedHighlightUtil.init(marked, hljs, {\r\n            codeConfig: {\r\n                bg: codeBg\r\n            },\r\n            linkConfig: {\r\n                disableDefault: true,\r\n                convertUrl: (oldurl) => {\r\n                    let addr = oldurl;\r\n                    if (mindmapSvc.hasUrlPrefix(addr)){\r\n                        return addr;\r\n                    }\r\n                    if(addr.startsWith(\"./\")){\r\n                        return api.calcAttUrl(activeKey, oldurl);\r\n                    }\r\n                    return addr;\r\n                }\r\n            },\r\n            imgConfig: {\r\n                convertUrl: (oldurl) => {\r\n                    if (!(oldurl.startsWith(\"./\") || oldurl.startsWith(\"../\"))) { return oldurl; }//跳过不是本地相对路径的\r\n                    return api.calcPicUrl(activeKey, oldurl);\r\n                }\r\n            }\r\n        });\r\n    },[activeKey]);\r\n\r\n    \r\n    useEffect(()=>{\r\n        if(props.visible){\r\n            setTimeout(() => {\r\n                markedHighlightUtil.bindLinkClickEvent(api.openUrl);\r\n                markedHighlightUtil.bindImgClickEvent(api.openUrl);\r\n            }, 100);//迟\r\n        }\r\n    },[props.visible]);\r\n    \r\n\r\n    \r\n\r\n    const getScrollTarget=useCallback(()=>document.getElementById(wrapperId),[wrapperId]);\r\n    let result=dataSelector(props);\r\n    if(null===result){\r\n        return null;\r\n    }\r\n    let {refname,refCont}=result;\r\n    \r\n\r\n    return (\r\n        <EnhDlg noFooter\r\n                title={\"查看引用 - \" + refname}\r\n                size={{w:winW-200, h:winH-300, fixh:true, wrapperId:wrapperId}}                \r\n                visible={props.visible}\r\n                maskClosable={true}               \r\n                onCancel={props.onCancel}>\r\n            <div className='markdown-body' css={{\r\n                margin:'0px auto',\r\n                width:'98%',\r\n                overflowX:'hidden'}}\r\n                dangerouslySetInnerHTML={{__html:refCont}}>\r\n            </div>\r\n            {\r\n                (props.backtopLoc && 2===props.backtopLoc.length) && (   \r\n                    <BackTop  target={getScrollTarget} css={{\r\n                        right:200,\r\n                        bottom:170,\r\n                        ...backtopColorStyle\r\n                    }}/>\r\n                )\r\n            }\r\n        </EnhDlg>\r\n    );\r\n    \r\n}\r\n\r\nconst dataSelector=createSelector(\r\n    props=>props.currRefObj,\r\n    refObj=>{\r\n        if(!refObj || !refObj.txt || !refObj.showname){\r\n            return null;\r\n        }\r\n        if (null == refObj.parsedTxt) {\r\n            refObj.parsedTxt = marked(refObj.txt);\r\n        }\r\n        let refname=refObj.showname;\r\n        let refCont=refObj.parsedTxt;\r\n        return {refname,refCont};\r\n    }\r\n);\r\n\r\n//24  144 255    #1890ff\r\n//16  136 233    #1088e9\r\nconst backtopColorStyle={\r\n    '& .ant-back-top-content':{\r\n        backgroundColor:'rgba(24,144,255, .80)',\r\n    },\r\n    '&:hover .ant-back-top-content':{\r\n        backgroundColor:'rgba(24,144,255, 1.0)', \r\n    },\r\n}\r\n\r\nexport default React.memo(RefViewer);","D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\GraphTabs.js",["268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289"],"/** @jsxImportSource @emotion/react */\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { Layout,   Tabs, Modal, Input, message, Button, Divider,Spin  } from 'antd';\r\nimport { PlusCircleOutlined,MinusCircleOutlined,FormOutlined,LinkOutlined,FileMarkdownOutlined,PictureOutlined,FileTextOutlined,FileOutlined,BookOutlined,FileImageOutlined,ReadOutlined,ClockCircleOutlined,CloseOutlined,CheckOutlined } from '@ant-design/icons';\r\nimport {createSelector} from 'reselect';\r\n\r\nimport NewMindmap from './NewMindmap';\r\nimport MindNode from './MindNode';\r\nimport {connect,dispatcher} from '../../../common/gflow';\r\n\r\nimport api from '../../../service/api';\r\nimport { useSelector } from 'react-redux';\r\nimport keyDetector from '../../../common/keyDetector';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\n\r\n\r\n/**\r\n * 选项卡组件\r\n * @param {*} props \r\n */\r\nconst GraphTabs=(props)=>{\r\n    const {winW,winH,activeKey,panes}= useSelector((state)=>({\r\n        winW:       state.common.winW,\r\n        winH:       state.common.winH,\r\n        activeKey:  state.tabs.activeKey,\r\n        panes:      state.tabs.panes,\r\n    }));\r\n\r\n\r\n    let beginTime=new Date().getTime();\r\n    \r\n    \r\n    /**\r\n     * 节点内容的render props\r\n     */\r\n    const ndContentRenderer=(nd)=>{\r\n        return <MindNode key={nd.id} nd={nd}\r\n            onOpenLink={props.onOpenLink} \r\n            onOpenRef={props.onOpenRef}\r\n            onShowTimeline={props.onShowTimeline}\r\n            onShowProgs={props.onShowProgs}\r\n            onShowGant={props.onShowGant}/>;\r\n    }\r\n\r\n    /**\r\n     * 折叠按钮的render props\r\n     */\r\n    const ndExpBtnRenderer=(nd)=>{\r\n        return (\r\n            <Button \r\n                type=\"link\" \r\n                size='small' \r\n                title={nd.expand?\"折叠\":\"展开\"} \r\n                css={styles.expbtn}\r\n                icon={\r\n                    nd.expand ?\r\n                        <MinusCircleOutlined className='expbtnicon' css={colors.toggle}/>\r\n                            :\r\n                        <PlusCircleOutlined className='expbtnicon' css={colors.toggle2}/>\r\n                }  \r\n                onClick={dispatcher.tabs.toggleExpand.bind(this,nd)}/>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * 删除tab\r\n     * @param {*} targetKey \r\n     * @param {*} action \r\n     */\r\n    const onEditTab =useCallback((targetKey, action) => {\r\n        if (\"remove\" === action) {\r\n            dispatcher.tabs.removeTab(targetKey);\r\n        }\r\n    },[]);\r\n\r\n\r\n    /**\r\n     * 初始化快捷键，并在组件销毁时移除\r\n     */\r\n    useEffect(()=>{\r\n        const keyHandle=(e)=>{\r\n            //当编辑窗口、新建窗口、选择图表窗口打开时，不支持选项卡操作\r\n            const excludeStates=[props.editing, props.newing, props.opening];\r\n            const isExclude=excludeStates.some(each=>true===each);\r\n\r\n            keyDetector.on(e,{\r\n                //alt+w 关闭当前选项卡（未使用ctrl+w，因为快捷键已被chrome使用，程序不能捕获到事件）\r\n                'alt+w':(e)=>{\r\n                    if(isExclude){return;}\r\n                    onEditTab(activeKey,\"remove\");\r\n                },\r\n\r\n                //alt+shift+w 关闭全部选项卡\r\n                'alt+shift+w':(e)=>{\r\n                    if(isExclude){return;}\r\n                    dispatcher.tabs.removeAllTabs();\r\n                },\r\n\r\n                //alt+o 关闭其他选项卡\r\n                'alt+o':(e)=>{\r\n                    if(isExclude){return;}\r\n                    dispatcher.tabs.removeOtherTabs();\r\n                },\r\n\r\n                //alt+p 关闭右侧选项卡\r\n                'alt+p':(e)=>{\r\n                    if(isExclude){return;}\r\n                    dispatcher.tabs.removeRightTabs();\r\n                },\r\n\r\n                //alt+i 关闭左侧选项卡\r\n                'alt+i':(e)=>{\r\n                    if(isExclude){return;}\r\n                    dispatcher.tabs.removeLeftTabs();\r\n                },\r\n\r\n                //ctrl+PageUp 前一个选项卡\r\n                'ctrl+pgup':(e)=>{\r\n                    if(isExclude){return;}\r\n                    dispatcher.tabs.togglePreTab();\r\n                },\r\n\r\n                //ctrl+PageDown 后一个选项卡\r\n                'ctrl+pgdn':(e)=>{\r\n                    if(isExclude){return;}\r\n                    dispatcher.tabs.toggleNextTab();\r\n                },\r\n\r\n                //ctrl+Shift+PageUp 选项卡前移\r\n                'ctrl+shift+pgup':(e)=>{\r\n                    if(isExclude){return;}\r\n                    dispatcher.tabs.movePreTab();\r\n                },\r\n\r\n                //ctrl+Shift+PageDown 选项卡后移\r\n                'ctrl+shift+pgdn':(e)=>{\r\n                    if(isExclude){return;}\r\n                    dispatcher.tabs.moveNextTab();\r\n                },\r\n            });\r\n        }\r\n\r\n        document.addEventListener('keydown', keyHandle);\r\n        return ()=>document.removeEventListener('keydown',keyHandle);\r\n    },[props.editing, props.newing, props.opening, activeKey, onEditTab]);\r\n\r\n    \r\n    \r\n    const result= <React.Fragment>\r\n        <Tabs\r\n            hideAdd={true}\r\n            type=\"editable-card\"\r\n            activeKey={activeKey}\r\n            css={{ height:winH-64, 'backgroundColor': 'white' }}\r\n            onChange={dispatcher.tabs.changeActiveKey}\r\n            onEdit={onEditTab}>\r\n            {\r\n                panes.map((pane,ind) => (\r\n                    <TabPane tab={\r\n                        <span>\r\n                            {pane.key===activeKey ? <FileMarkdownOutlined /> : <FileOutlined/>}\r\n                            {pane.title}\r\n                        </span>\r\n                    } key={pane.key} closable={true}>\r\n                        <div css={getTabItemContainerStyle(winH- 64 - 55-1)}>\r\n                            <NewMindmap\r\n                                ind={ind}\r\n                                ds={pane.ds}\r\n                                ndContentRenderer={ndContentRenderer}\r\n                                ndExpBtnRenderer={ndExpBtnRenderer}\r\n                            />\r\n                        </div>\r\n                    </TabPane>\r\n                ))\r\n            }\r\n        </Tabs>\r\n    </React.Fragment>;\r\n\r\n    let endTime=new Date().getTime();\r\n    console.log(`tab渲染时间：${(endTime-beginTime)} ms`);\r\n    return result;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst styles={\r\n    expbtn:{\r\n        width:14,\r\n        height:14,\r\n        verticalAlign:'bottom',\r\n        padding:0,\r\n        lineHeight:'14px',\r\n\r\n        '& .expbtnicon':{\r\n            fontSize:14,\r\n            lineHeight:'14px',\r\n            margin:0,\r\n            padding:0,\r\n        }\r\n    },\r\n};\r\n\r\n\r\nconst colors={\r\n    toggle: {color:'#7cb305'},\r\n    toggle2: {color:'#eb2f96'},//#eb2f96 #9254de\r\n};\r\n\r\nconst getTabItemContainerStyle=(h)=>({\r\n    height: h,\r\n    maxHeight: h,\r\n    overflowY: 'auto',\r\n    overflowX: 'auto',\r\n    width:'100%',\r\n    paddingBottom:'30px'\r\n});\r\n\r\n\r\nexport default React.memo(GraphTabs);","D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\Welcome.js",["290","291","292","293"],"/** @jsxImportSource @emotion/react */\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { Button,Row, Col, Avatar   } from 'antd';\r\nimport { PlusOutlined,FolderOutlined,CodeOutlined,ControlOutlined,ReloadOutlined } from '@ant-design/icons';\r\n\r\nimport PathSelect from './PathSelect';\r\nimport logourl from '../../../assets/logo.jpg';\r\nimport { createSelector } from 'reselect';\r\nimport api from '../../../service/api';\r\nimport {connect} from '../../../common/gflow';\r\nimport ConnectedPathSelect from './ConnectedPathSelect';\r\nimport { useSelector } from 'react-redux';\r\n\r\n/**\r\n * 首页\r\n * @param {*} props \r\n */\r\nconst Welcome=(props)=>{\r\n    const {winW,winH}=useSelector((state)=>({\r\n        winW:state.common.winW,\r\n        winH:state.common.winH,\r\n    }));\r\n\r\n    const [appInfo]=useState(()=>appInfoSelector(undefined));\r\n    const fileselectRight= calcBackTopRight({winW,winH});\r\n\r\n    return (\r\n        <Row>\r\n            <Col span={16} offset={4}>\r\n                <Row css={{\r\n                    marginTop:50,\r\n                    padding:10,\r\n                    backgroundColor:'white'\r\n                }}>\r\n                    <Col span={14} >\r\n                        <ConnectedPathSelect \r\n                            maxH={winH-160}\r\n                            backtopLoc={[fileselectRight,120]}\r\n                            onSelectMapItem={props.onSelectMapItem}/>\r\n                    </Col>\r\n                    <Col span={10}>                   \r\n                        <div css={logoWrapperStyle}>\r\n                            <p><Avatar size={256} src={logourl}/></p>\r\n                            <p className='appname'>{appInfo.showname}<span className='ver'>V{appInfo.version}</span></p>\r\n                            <div className='btns'>\r\n                                <Button type=\"primary\"  icon={<PlusOutlined />} size='large' onClick={props.onAddMap}>新建</Button>\r\n                                <Button type=\"default\" className='r2btn' title='打开目录' shape='circle'  icon={<FolderOutlined />} size='large' onClick={props.onOpenMapsDir}></Button>\r\n                                <Button type=\"default\" className='rbtn' title='打开控制台' shape='circle' icon={<CodeOutlined/>} size='large' onClick={props.onOpenBash}></Button>\r\n                                <Button type=\"default\" className='rbtn' title='开发者工具' shape='circle' icon={<ControlOutlined/>} size='large' onClick={props.onShowDevTool}></Button>\r\n                                <Button type=\"default\" className='rbtn' title='重新载入应用' shape='circle' icon={<ReloadOutlined/>} size='large' onClick={props.onReloadApp}></Button>\r\n                            </div>                               \r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    );\r\n    \r\n}\r\n\r\n\r\nconst calcBackTopRight= createSelector(\r\n    props=>props.winW,\r\n    winw=>parseInt(winw*4/9)+80\r\n);\r\n\r\n\r\nconst appInfoSelector=createSelector(\r\n    noUse=>noUse,\r\n    noUse=>api.loadAppInfo()\r\n);\r\n\r\n\r\n\r\nconst logoWrapperStyle={\r\n    'textAlign':'center',\r\n    'marginBottom':50,\r\n\r\n    '& .appname':{\r\n        'fontSize':18\r\n    },\r\n    '& .ver':{\r\n        'display':'inline-block',\r\n        'marginLeft':30\r\n    },\r\n    '& .btns':{\r\n        'marginTop':20\r\n    },\r\n    '& .btns .rbtn':{\r\n        'marginLeft':10\r\n    },\r\n    '& .btns .r2btn':{\r\n        'marginLeft':20\r\n    }\r\n};\r\n\r\n\r\n\r\nexport default React.memo(Welcome);","D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\gantt\\GantDlg.js",["294","295","296"],"/** @jsxImportSource @emotion/react */\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { Modal } from 'antd';\r\nimport {  } from '@ant-design/icons';\r\nimport GantChart from './GantChart';\r\nimport {withEnh} from '../../../common/specialDlg';\r\nimport {connect} from '../../../../common/gflow';\r\nimport { createSelector } from 'reselect';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst EnhDlg=withEnh(Modal);\r\n\r\n/**\r\n * 甘特图对话框\r\n * @param {*} props \r\n */\r\nconst GantDlg=(props)=>{\r\n    const {winW,winH,resizeSymbol}= useSelector((state)=>({\r\n        winW:           state.common.winW,\r\n        winH:           state.common.winH,\r\n        resizeSymbol:   state.common.resizeSymbol\r\n    }));\r\n\r\n    const [layoutArrows, setLayoutArrows]=useState(null);\r\n    const showCntRef=useRef(0);\r\n    \r\n    /**\r\n     * 延迟重绘箭头位置\r\n     */\r\n    const delayRelayoutArrows=useCallback(()=>{\r\n        setTimeout(()=>{\r\n            setLayoutArrows(Symbol());\r\n        }, 100);\r\n    },[setLayoutArrows]);\r\n    \r\n    /**\r\n     * 第2次以上渲染，引发重绘\r\n     */\r\n    useEffect(()=>{\r\n        if(props.visible){\r\n            showCntRef.current=showCntRef.current+1;         \r\n            if(1<showCntRef.current){\r\n                console.log(\"gant - 第2次以上渲染，引发重绘\");\r\n                delayRelayoutArrows();\r\n            }\r\n        }\r\n    },[props.visible]);\r\n\r\n    /**\r\n     * 窗口大小调整，引发重绘\r\n     */\r\n    useEffect(()=>{\r\n        console.log(\"gant - 窗口大小调整，引发重绘\");\r\n        delayRelayoutArrows();\r\n    },[resizeSymbol]);\r\n\r\n\r\n    let {ds, colKeys, relas}=getParts(props);\r\n\r\n    return (\r\n        <EnhDlg noFooter\r\n                title=\"甘特图\"\r\n                visible={props.visible}\r\n                size={{w:winW-200}}\r\n                onCancel={props.onCancel}>\r\n\r\n            <GantChart \r\n                key='gant-comp'\r\n                ds={ds}\r\n                colKeys={colKeys} \r\n                arrows={relas}\r\n                winW={winW} \r\n                maxh={winH-250-100}  \r\n                layoutArrows={layoutArrows}/>    \r\n        </EnhDlg>\r\n    );\r\n    \r\n}\r\n\r\nconst getParts=createSelector(\r\n    props=>props.gantObj,\r\n    gantObj=>{\r\n        if(!gantObj){\r\n            return {\r\n                ds:         [],\r\n                colKeys:    [],\r\n                relas:      [],\r\n            };\r\n        }\r\n        return {\r\n            ds:         gantObj.data? gantObj.data: [],\r\n            colKeys:    gantObj.colKeys? gantObj.colKeys: [],\r\n            relas:      gantObj.relas? gantObj.relas:[],\r\n        };\r\n    }\r\n);\r\n\r\n\r\n\r\nexport default React.memo(GantDlg);","D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\Toolbar.js",["297","298"],"/** @jsxImportSource @emotion/react */\r\nimport React from 'react';\r\nimport { Layout,   Button, Divider } from 'antd';\r\nimport { PlusOutlined, FolderOpenOutlined, EditOutlined,LinkOutlined, FolderOutlined,ExportOutlined,CodeOutlined,CompressOutlined,ExpandOutlined,ControlOutlined,ReloadOutlined } from '@ant-design/icons';\r\nimport {createSelector} from 'reselect';\r\nimport newMindmapSvc from '../../../service/newMindmapSvc';\r\nimport {connect,dispatcher} from '../../../common/gflow';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst { Header, Content } = Layout;\r\n\r\n/**\r\n * 工具栏\r\n * @param {*} props \r\n */\r\nconst Toolbar=(props)=>{\r\n    const {activeKey,panes}=useSelector((state)=>({\r\n        activeKey:  state.tabs.activeKey,\r\n        panes:      state.tabs.panes,\r\n    }));\r\n    const tmp={activeKey,panes};\r\n    let showExpandAll=ifShowExpandAll(tmp);\r\n    let showRestore=isShowRestore(tmp);\r\n\r\n    return (\r\n        <Header css={headerStyle}>\r\n            <Button shape='circle' icon={<PlusOutlined />} className='toolbtnFirst' type='default' size='large' onClick={props.onShowNewMapDlg} title='新建' />\r\n            <Button shape='circle' icon={<FolderOpenOutlined />} className='toolbtn' type='default' size='large' onClick={props.onShowSelMapDlg} title='打开' />\r\n\r\n            <Divider type=\"vertical\" className='divider'/>\r\n            <Button shape='circle' icon={<FolderOutlined />} className='toolbtn' type='default' size='large' onClick={props.onShowDir}  title='打开目录' />                                   \r\n            <Button shape='circle' icon={<CodeOutlined />} className='toolbtn' type='default' size='large' onClick={props.onShowCmd}  title='打开控制台' />\r\n            <Button shape='circle' icon={<ControlOutlined />} className='toolbtn' type='default' size='large' onClick={props.onShowDevTool}  title='开发者工具' />\r\n            <Button shape='circle' icon={<ReloadOutlined />} className='toolbtn' type='default' size='large' onClick={props.onReloadApp}  title='重新载入应用' />\r\n\r\n            <Divider type=\"vertical\" className='divider'/>\r\n            <Button shape='circle' icon={<EditOutlined />} className='toolbtn' type='default' size='large' onClick={props.onShowEditMapDlg} title='编辑' />\r\n            <Button shape='circle' icon={<LinkOutlined />} className='toolbtn' type='default' size='large' onClick={props.onCopyMapLink} title='复制导图链接' />\r\n            \r\n            \r\n\r\n            {/* {\r\n                props.showRestore &&      \r\n                    <Button shape='circle' icon={<CompressOutlined />} className='toolbtn' type='primary' size='large' onClick={props.onRestore} title='恢复默认节点状态' />\r\n            }\r\n            {\r\n                props.showExpandAll &&      \r\n                    <Button shape='circle' icon={<ExpandOutlined />} className='toolbtn' type='primary' size='large' onClick={props.onExpandAll} title='展开全部节点' />\r\n            } */}\r\n            \r\n\r\n                \r\n            <Button shape='circle' icon={<CompressOutlined />} disabled={!showRestore} className='toolbtn' type='primary' size='large' onClick={dispatcher.tabs.restoreAll} title='恢复节点默认状态' />\r\n            <Button shape='circle' icon={<ExpandOutlined />} disabled={!showExpandAll} className='toolbtn' type='primary' size='large' onClick={dispatcher.tabs.expandAll} title='展开全部节点' />\r\n            <Button shape='circle' icon={<ExportOutlined />} className='toolbtn' type='default' size='large' onClick={props.onExpImage} title='导出图片' />\r\n            \r\n            \r\n\r\n            \r\n        </Header>\r\n    );\r\n    \r\n}\r\n\r\n\r\nconst ifShowExpandAll = createSelector(\r\n    props => props.activeKey,\r\n    props => props.panes,\r\n    (key, panes) => {\r\n        let currPane = ifHasValidTab(key, panes);\r\n        if (false === currPane) {\r\n            return false;\r\n        }\r\n\r\n        //计算当前选项卡是否全部展开，若不是则显示【展开全部】按钮\r\n        let allExpand = newMindmapSvc.isAllNodeExpand(currPane.ds);\r\n        return !allExpand;\r\n    }\r\n);\r\n\r\nconst isShowRestore = createSelector(\r\n    props => props.activeKey,\r\n    props => props.panes,\r\n    (key, panes) => {\r\n        let currPane = ifHasValidTab(key, panes);\r\n        if (false === currPane) {\r\n            return false;\r\n        }\r\n\r\n        //计算当前选项卡是否有展开状态变化的节点\r\n        let anyChanged = newMindmapSvc.isAnyNdExpStChanged(currPane.ds);\r\n        return anyChanged;\r\n    }\r\n);\r\n\r\nconst ifHasValidTab = (key, panes) => {\r\n    //不存选项卡或不存在活动选项卡，认为不显示按钮\r\n    if (null == panes || 0 === panes.length) {\r\n        return false;\r\n    }\r\n    let currPane = panes.filter(pane => pane.key === key);\r\n    if (null == currPane || 0 === currPane.length) {\r\n        return false;\r\n    }\r\n    currPane = currPane[0];\r\n\r\n    //当前选项卡内容解析失败\r\n    if (currPane.ds && false === currPane.ds.succ) {\r\n        return false;\r\n    }\r\n    return currPane;\r\n}\r\n\r\n//#f0f2f5\r\nconst headerStyle = {\r\n    backgroundColor:    '#f0f2f5',\r\n    paddingLeft:        0,\r\n    '& .toolbtn':       {\r\n        marginLeft:     10\r\n    },\r\n    '& .toolbtnFirst':       {\r\n        marginLeft:     15\r\n    },\r\n    '& .divider':{\r\n        backgroundColor:'#CCC',\r\n        height:'50%',\r\n        width:2, \r\n        padding:0,\r\n        marginLeft:10,\r\n        marginRight:0\r\n    }\r\n};\r\n\r\nexport default React.memo(Toolbar);","D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\ProgsViewer.js",["299","300"],"/** @jsxImportSource @emotion/react */\r\nimport React from 'react';\r\nimport { Modal, Timeline, Table,Progress,Tooltip } from 'antd';\r\nimport {createSelector} from 'reselect';\r\nimport {withEnh} from '../../common/specialDlg';\r\nimport {connect} from '../../../common/gflow';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst EnhDlg=withEnh(Modal);\r\n\r\n/**\r\n * 进度对话框\r\n */\r\nconst ProgsViewer=(props)=>{\r\n    const {winW,winH}=useSelector((state)=>({\r\n        winW:state.common.winW,\r\n        winH:state.common.winH,\r\n    }));\r\n\r\n    let dlgW = (winW < 820 ? winW - 20 : 800);\r\n\r\n    return (\r\n        <EnhDlg noFooter\r\n                title=\"查看事项完成进度\"\r\n                size={{w:dlgW}}                  \r\n                visible={props.visible}\r\n                maskClosable={true}\r\n                onCancel={props.onCancel}>\r\n            \r\n            <Table pagination={false} \r\n                bordered={true}\r\n                dataSource={parseDataSource(props)} \r\n                columns={columns} \r\n                size='small' \r\n                scroll={{ y: winH-300 }} />\r\n        </EnhDlg>\r\n    );\r\n}\r\n\r\nconst parseDataSource=createSelector(\r\n    props=>props.progsObj,\r\n    progs=>{\r\n        if(!progs){\r\n            return [];\r\n        }\r\n        return progs.map((each,ind)=>({\r\n            key: ind,\r\n            thing: each.txt,\r\n            prog: each.num,\r\n            msg:each.msg,\r\n            err: each.err,\r\n        }));\r\n    }\r\n);\r\n\r\nconst columns = [\r\n    {\r\n        title: '事项',\r\n        dataIndex: 'thing',\r\n        key: 'thing',\r\n        render:(txt,line)=>{\r\n            console.log(typeof(txt),txt.length,txt);\r\n            return <>{txt.map((line,ind)=><>{0<ind && <br/>}{line}</>)}</>;\r\n        }\r\n    },\r\n    {\r\n        title: '完成进度',\r\n        dataIndex: 'prog',\r\n        key: 'prog',\r\n        width:'260px',\r\n        render: (prog, line) => (\r\n            <Tooltip title={line.msg}>\r\n                <Progress  percent={prog} size='default' status={line.err?\"exception\":(prog<100?\"active\":\"success\")}/>\r\n            </Tooltip>\r\n        )\r\n    },\r\n];\r\n\r\nexport default React.memo(ProgsViewer);","D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\TimelineViewer.js",["301"],"/** @jsxImportSource @emotion/react */\r\nimport React from 'react';\r\nimport {  Modal, Timeline } from 'antd';\r\nimport { ClockCircleOutlined } from '@ant-design/icons';\r\nimport {withEnh} from '../../common/specialDlg';\r\nimport {connect} from '../../../common/gflow';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst EnhDlg=withEnh(Modal);\r\n\r\n/**\r\n * 时间线对话框\r\n */\r\nconst TimelineViewer=(props)=>{\r\n    const {winW,winH}=useSelector((state)=>({\r\n        winW:state.common.winW,\r\n        winH:state.common.winH,\r\n    }));\r\n\r\n    let dlgW= (winW<820?winW-20:800);\r\n\r\n    return (\r\n        <EnhDlg noFooter\r\n                title=\"查看时间线\"\r\n                size={{w:dlgW, h:winH-300}}\r\n                visible={props.visible}\r\n                maskClosable={true}              \r\n                onCancel={props.onCancel}>\r\n                    \r\n            <Timeline mode='left' css={{marginTop:20}}>\r\n                {\r\n                    props.timelineObj.map((item,ind)=>\r\n                        <Timeline.Item key={ind}  \r\n                                {...(item.near?{dot:<ClockCircleOutlined css={{ fontSize: '16px',color:item.color,marginBottom:4 }} />}:{})}   \r\n                                label={\"（\"+item.msg+\"）\"+item.fullDate} color={item.color}>\r\n                            <>{item.txt.map((line,ind)=><>{0<ind && <br/>}{line}</>)}</>\r\n                        </Timeline.Item>\r\n                    )\r\n                }\r\n            </Timeline>\r\n        </EnhDlg>\r\n    );\r\n    \r\n}\r\n\r\nexport default React.memo(TimelineViewer);","D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\EditGraphDlg.js",["302","303","304","305","306","307","308","309","310"],"/** @jsxImportSource @emotion/react */\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { Layout, Input, Tabs, Modal, Form, message, Button, Divider, Popover } from 'antd';\r\nimport { PictureOutlined, FolderOpenOutlined, QuestionCircleOutlined,CalendarOutlined,FileOutlined } from '@ant-design/icons';\r\nimport {useSelector} from 'react-redux';\r\n\r\nimport {withEnh} from '../../common/specialDlg';\r\n\r\nimport HelpDlg from './edit/HelpDlg';\r\nimport InsertImgDlg from './edit/InsertImgDlg';\r\nimport DateDlg from './edit/DateDlg';\r\nimport AdvColorPickerDlg from './edit/AdvColorPickerDlg';\r\nimport ColorPickerDlg from './edit/ColorPickerDlg';\r\nimport Editor from './edit/Editor';\r\n\r\n\r\n\r\nconst EnhDlg=withEnh(Modal);\r\n\r\n\r\n/**\r\n * 编辑图表对话框\r\n */\r\nconst EditGraphDlg=(props)=>{\r\n    const {winW,winH,activeKey}= useSelector((state)=>({\r\n        winW:       state.common.winW,\r\n        winH:       state.common.winH,\r\n        activeKey:  state.tabs.activeKey,\r\n    }));\r\n\r\n    const [editorForceRefresh, setEditorForceRefresh]= useState(Symbol());\r\n    const [editorAction, setEditorAction]= useState(null);\r\n    const [colorPickerVisible, setColorPickerVisible]=useState(false);\r\n    const [advColorPickerVisible, setAdvColorPickerVisible]=useState(false);\r\n    const [insertPicDlgVisible, setInsertPicDlgVisible]=useState(false);\r\n    const [helpDlgVisible, setHelpDlgVisible]=useState(false);\r\n    const [dateDlgVisible, setDateDlgVisible]=useState(false);\r\n    const [isImg, setIsImg]=useState(true);\r\n\r\n    \r\n\r\n    const hideAllDlg =useCallback(() => {\r\n        setColorPickerVisible(false);\r\n        setAdvColorPickerVisible(false);\r\n        setInsertPicDlgVisible(false);\r\n        setHelpDlgVisible(false);\r\n        setDateDlgVisible(false);\r\n    },[setColorPickerVisible, setAdvColorPickerVisible, setInsertPicDlgVisible, setHelpDlgVisible, setDateDlgVisible]);\r\n\r\n    const showHelpPicDlg = useCallback(() => {\r\n        setHelpDlgVisible(true);\r\n    },[setHelpDlgVisible]);\r\n\r\n\r\n\r\n    //-------------------颜色选择相关-----------------------------------\r\n    const onAddColor =useCallback((color = null, delayFocus = false) => {\r\n        setEditorAction({\r\n            type: 'addColor',\r\n            color,\r\n            delayFocus\r\n        });\r\n    },[setEditorAction]);\r\n\r\n    const onClearColor =useCallback(() => {\r\n        onAddColor(null);\r\n    },[onAddColor]);\r\n\r\n    const handleColorPickerColorChange =useCallback((color) => {\r\n        hideAllDlg();\r\n        onAddColor(color.hex, true);\r\n    },[hideAllDlg, onAddColor]);\r\n\r\n    const showColorPicker =useCallback(() => {\r\n        setColorPickerVisible(true);\r\n    },[setColorPickerVisible]);\r\n\r\n    const showAdvColorPicker =useCallback(() => {\r\n        setAdvColorPickerVisible(true);\r\n    },[setAdvColorPickerVisible]);\r\n\r\n\r\n\r\n    //-------------------增加图片或附件相关-----------------------------------\r\n    const onAddPic =useCallback((picRelaPath,pname) => {\r\n        setEditorAction({\r\n            type:       'addPic',\r\n            relaPath:   picRelaPath,\r\n            name:       pname,\r\n        });\r\n    },[setEditorAction]);\r\n\r\n    const onAddAtt =useCallback((picRelaPath,pname) => {\r\n        setEditorAction({\r\n            type:       'addAtt',\r\n            relaPath:   picRelaPath, \r\n            name:       pname,\r\n        });\r\n    },[setEditorAction]);\r\n\r\n    const showInsertPicDlg =useCallback(() => {\r\n        setIsImg(true);\r\n        setInsertPicDlgVisible(true);\r\n    },[setIsImg, setInsertPicDlgVisible]);\r\n\r\n    const showInsertAttDlg=useCallback(()=>{\r\n        setIsImg(false);\r\n        setInsertPicDlgVisible(true);\r\n    },[setIsImg, setInsertPicDlgVisible]);\r\n\r\n\r\n\r\n\r\n    //-------------------插入日期相关-----------------------------------    \r\n    const showDateDlg=useCallback(()=>{\r\n        setDateDlgVisible(true);\r\n    },[setDateDlgVisible]);\r\n\r\n    const onInsertDate=useCallback((dateStr)=>{\r\n        if(null===dateStr || ''===dateStr.trim()){\r\n            message.warn(\"请选择日期\");\r\n            return;\r\n        }\r\n\r\n        hideAllDlg();\r\n        setEditorAction({\r\n            type: 'addDate',\r\n            date: dateStr.trim(),\r\n        });        \r\n    },[hideAllDlg, setEditorAction]);\r\n\r\n    \r\n\r\n    /**\r\n     * 每次显示后强制子编辑器组件重新渲染\r\n     */\r\n    useEffect(()=>{\r\n        if(props.visible){\r\n            setEditorForceRefresh(Symbol());\r\n        }\r\n    },[props.visible]);\r\n\r\n\r\n    return (\r\n        <>\r\n            <EnhDlg\r\n                    title={\"编辑图表 - \" + props.currMapName}\r\n                    size={{w:winW-200}}\r\n                    maskClosable={false}\r\n                    visible={props.visible}\r\n                    footer={[\r\n                        <Button key=\"btncancel\" onClick={props.onCancel}>取消</Button>,\r\n                        <Button key=\"btnneutral\" type=\"primary\" onClick={props.onOnlySave}>保存</Button>,\r\n                        <Button key=\"btnok\" type=\"primary\" onClick={props.onOk}>保存并关闭</Button>,\r\n                    ]}\r\n                    onCancel={props.onCancel}>              \r\n                <div>\r\n                    <div css={{ 'marginBottom': \"10px\" }}>\r\n                        {/* 颜色选择器 */}\r\n                        {\r\n                            commonColors.map((eachcolor, colorInd) => (\r\n                                <div key={colorInd} title={eachcolor} css={getEditDlgColorBoxStyle(eachcolor)} onClick={onAddColor.bind(this, eachcolor)}></div>\r\n                            ))\r\n                        }\r\n                        <div css={selColorStyle} title='选择颜色' onClick={showColorPicker}></div>\r\n                        <div css={selColorStyleAdv} title='选择颜色（高级）' onClick={showAdvColorPicker}></div>\r\n                        <div css={clearColorStyle} title='清除颜色' onClick={onClearColor}></div>\r\n\r\n                        {/* 插入日期、图片、附件、帮助 */}\r\n                        <CalendarOutlined title='插入日期（ Ctrl + T ）' css={insertImgStyle} onClick={showDateDlg} />\r\n                        <PictureOutlined title='插入图片（ Ctrl + P ）' css={insertImgStyle} onClick={showInsertPicDlg} />\r\n                        <FileOutlined title='插入附件（ Ctrl + I ）' css={insertImgStyle} onClick={showInsertAttDlg} />\r\n                        <QuestionCircleOutlined title='帮助（ Ctrl + H ）' css={helpStyle} onClick={showHelpPicDlg} />\r\n                    </div>\r\n                    <Editor\r\n                        value={props.editTmpTxt}\r\n                        forceRefresh={editorForceRefresh}\r\n                        action={editorAction}\r\n                        onChange={props.onChangeEditTmpTxt}\r\n                        onOnlySave={props.onOnlySave}\r\n                        onOk={props.onOk}\r\n                        onShowInsertPicDlg={showInsertPicDlg}\r\n                        onShowInsertAttDlg={showInsertAttDlg}\r\n                        onShowHelpDlg={showHelpPicDlg}\r\n                        onShowDateDlg={showDateDlg}\r\n                    />\r\n                </div>\r\n            </EnhDlg>\r\n\r\n            {/*插入图片对话框*/}\r\n            <InsertImgDlg                    \r\n                visible={insertPicDlgVisible}\r\n                isImg={isImg}\r\n                activeKey={activeKey}\r\n                onAddPic ={onAddPic}\r\n                onAddAtt={onAddAtt}\r\n                onCancel={hideAllDlg}\r\n            />\r\n\r\n            {/* 颜色选择对话框 */}\r\n            <ColorPickerDlg\r\n                t={colorDlgY}\r\n                offsetX={colorDlgAdjustX}\r\n                parW={winW-200}\r\n                visible={colorPickerVisible}\r\n                onCancel={hideAllDlg}\r\n                onOk={handleColorPickerColorChange}\r\n            />\r\n            <AdvColorPickerDlg\r\n                t={colorDlgY}\r\n                offsetX={advColorDlgAdjustX}\r\n                parW={winW-200}\r\n                visible={advColorPickerVisible}\r\n                onCancel={hideAllDlg}\r\n                onOk={handleColorPickerColorChange}\r\n            />\r\n            \r\n            {/* 帮助对话框 */}\r\n            <HelpDlg\r\n                maxBodyH={winH-400+80}\r\n                visible={helpDlgVisible}\r\n                onCancel={hideAllDlg}/>\r\n\r\n            {/* 插入日期对话框 */}\r\n            <DateDlg\r\n                visible={dateDlgVisible}\r\n                onCancel={hideAllDlg}\r\n                onOk={onInsertDate}\r\n                />\r\n        </>\r\n    );\r\n    \r\n}\r\n\r\n//颜色选择对话框位置\r\nconst colorDlgAdjustX = 258;\r\nconst advColorDlgAdjustX = 284;\r\nconst colorDlgY = 204;\r\n\r\n\r\nconst commonColors=[\r\n    '#cf1322', '#389e0d', '#0050b3', '#fa8c16', \r\n    '#13c2c2', '#ad6800', '#1890ff', '#722ed1', '#c41d7f'\r\n];\r\n\r\n\r\nconst getCodeEditorStyle = (height) => ({\r\n    '& .CodeMirror': {\r\n        border: '1px solid lightgrey',\r\n        fontSize: 16,\r\n        height: height,\r\n        maxHeight: height,\r\n        minHeight: height,\r\n    }\r\n});\r\n\r\n\r\n\r\nconst baseHoverStyle = {\r\n    cursor: 'pointer',\r\n    transition: 'all 0.2s 0.1s',\r\n    '&:hover': {\r\n        borderRadius: 4,\r\n        opacity: 0.6,\r\n        // transform:'skew(-15deg)'\r\n    }\r\n}\r\n\r\nconst insertImgStyle = {\r\n    fontSize: 19,\r\n    marginLeft: 10,\r\n    color: 'grey',\r\n    ...baseHoverStyle,\r\n    '&:hover': {\r\n        opacity: 0.6,\r\n        transform: 'skew(-15deg)'\r\n    }\r\n}\r\n\r\nconst helpStyle = {\r\n    fontSize: 19,\r\n    marginLeft: 10,\r\n    color: '#1890ff',\r\n    ...baseHoverStyle,\r\n    '&:hover': {\r\n        opacity: 0.6,\r\n        transform: 'rotate(45deg)'\r\n    }\r\n}\r\n\r\nconst colorBoxhoverStyle = {\r\n    width: 16,\r\n    height: 16,\r\n    display: 'inline-block',\r\n    marginRight: 10,\r\n    ...baseHoverStyle\r\n}\r\n\r\nconst selColorStyle = {\r\n    backgroundImage: 'linear-gradient(135deg,orange 20%,green 100%)',\r\n    ...colorBoxhoverStyle\r\n};\r\n\r\nconst selColorStyleAdv = {\r\n    backgroundImage: 'linear-gradient(135deg,orange 20%,pink 40%,green 100%)',\r\n    ...colorBoxhoverStyle\r\n};\r\n\r\nconst clearColorStyle = {\r\n    backgroundColor: 'white',\r\n    border: '1px solid gray',\r\n    ...colorBoxhoverStyle\r\n};\r\n\r\nconst getEditDlgColorBoxStyle = (color) => ({\r\n    backgroundColor: color,\r\n    ...colorBoxhoverStyle\r\n});\r\n\r\n\r\n\r\nexport default React.memo(EditGraphDlg);","D:\\ws_front\\gmap-ui\\src\\service\\screenShot.js",[],"D:\\ws_front\\gmap-ui\\src\\common\\uiUtil.js",[],"D:\\ws_front\\gmap-ui\\src\\ui\\common\\specialDlg.js",[],"D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\edit\\HelpDlg.js",["311","312","313","314","315","316"],"D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\edit\\DateDlg.js",["317","318","319","320","321","322","323","324","325","326","327","328"],"/** @jsxImportSource @emotion/react */\r\nimport {Global } from '@emotion/react';\r\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { Layout, Input, Tabs, Modal, Form, message, Button, Divider, Popover,DatePicker, Calendar  } from 'antd';\r\nimport { DoubleLeftOutlined,LeftOutlined,RightOutlined,DoubleRightOutlined } from '@ant-design/icons';\r\nimport moment  from 'moment';\r\nimport {withEnh} from '../../../common/specialDlg';\r\n\r\n\r\nconst EnhDlg=withEnh(Modal);\r\n\r\n/**\r\n * 日期选择对话框\r\n * @param {*} props \r\n */\r\nconst DateDlg=(props)=>{\r\n    const [datePickPopoverClassname]=useState(()=>'edigdlg-datepopup-container-'+new Date().getTime());\r\n    const [date, setDate]=useState(moment());\r\n\r\n    //每次显示都重置为当前日期\r\n    useEffect(()=>{\r\n        if(props.visible){\r\n            setDate(moment());\r\n        }\r\n    },[props.visible]);\r\n\r\n    //设置特殊日期\r\n    const onSelCommonDays=useCallback((offset)=>{\r\n        let time=moment();\r\n        if(offset>0){\r\n            time=time.add(offset, 'days');\r\n        }\r\n        if(offset<0){\r\n            time=time.subtract(0-offset, 'days');\r\n        }\r\n        setDate(time);\r\n    },[setDate]);\r\n\r\n    //确定按钮事件\r\n    const onOk=useCallback(()=>{\r\n        props.onOk(date.format(\"YYYY-MM-DD\"));\r\n    },[props.onOk, date]);\r\n\r\n\r\n\r\n    const headerRender=useCallback(({ value, type, onChange, onTypeChange }) => {\r\n        const changeYear=(delta)=>{\r\n            const y=parseInt(date.format(\"YYYY\"),10)+delta;\r\n            const result = value.clone().year(y);\r\n            onChange(result);\r\n        };\r\n        const changeMonth=(delta)=>{\r\n            const m=parseInt(date.format(\"MM\"),10)-1;//月份值以0开始\r\n            const y=parseInt(date.format(\"YYYY\"),10);\r\n\r\n            if(11===m && delta>0){\r\n                const result = value.clone().year(y+1).month(0);\r\n                onChange(result);\r\n                return;\r\n            }\r\n            if(0===m && delta<0){\r\n                const result = value.clone().year(y-1).month(11);\r\n                onChange(result);\r\n                return;\r\n            }\r\n            const result = value.clone().month(m+delta);\r\n            onChange(result);\r\n        };\r\n        \r\n        return <div css={calendarHeaderStyle}>\r\n            <Button size='small' type='text' title=\"前一年\" icon={<DoubleLeftOutlined className='icon'/>} onClick={changeYear.bind(this,-1)}></Button>\r\n            <Button size='small' type='text' title=\"上月\" icon={<LeftOutlined className='icon'/>} onClick={changeMonth.bind(this,-1)}></Button>\r\n            <span>{date.format(\"YYYY-MM-DD\")}</span>\r\n            <Button size='small' type='text' title=\"下月\" icon={<RightOutlined className='icon'/>} onClick={changeMonth.bind(this,1)}></Button>\r\n            <Button size='small' type='text' title=\"后一年\" icon={<DoubleRightOutlined className='icon'/>} onClick={changeYear.bind(this,1)}></Button>\r\n        </div>\r\n    },[date]);\r\n\r\n    return (\r\n        <EnhDlg  title=\"选择日期\"\r\n                closable={true}\r\n                maskClosable={true}\r\n                visible={props.visible}\r\n                onCancel={props.onCancel}\r\n                onOk={onOk}\r\n                size={{...dlgScale, fixh:true}}\r\n                bodyStyle={{paddingTop:5}}>\r\n            <Calendar\r\n                fullscreen={false}\r\n                value={date}\r\n                onChange={setDate}\r\n                headerRender={headerRender}/>\r\n            <Divider css={{margin:0,padding:0,paddingBottom:5,}}/>\r\n            <div css={commonDaysStyle}>\r\n                <Button type='link' className='day' onClick={onSelCommonDays.bind(this,-3)}><span css={getSpecialDateStyle(date,-3)}>大前天</span></Button>\r\n                <Button type='link' className='day' onClick={onSelCommonDays.bind(this,-2)}><span css={getSpecialDateStyle(date,-2)}>前天</span></Button>\r\n                <Button type='link' className='day' onClick={onSelCommonDays.bind(this,-1)}><span css={getSpecialDateStyle(date,-1)}>昨天</span></Button>\r\n                <Button type='link' className='day' onClick={onSelCommonDays.bind(this,0)}><span css={getSpecialDateStyle(date,0)}>今天</span></Button>\r\n                <Button type='link' className='day' onClick={onSelCommonDays.bind(this,1)}><span css={getSpecialDateStyle(date,1)}>明天</span></Button>\r\n                <Button type='link' className='day' onClick={onSelCommonDays.bind(this,2)}><span css={getSpecialDateStyle(date,2)}>后天</span></Button>\r\n                <Button type='link' className='day' onClick={onSelCommonDays.bind(this,3)}><span css={getSpecialDateStyle(date,3)}>大后天</span></Button>\r\n            </div>\r\n        </EnhDlg>\r\n    );\r\n    \r\n}\r\n\r\n\r\nconst getSpecialDateStyle=(date, deltaDays)=>{\r\n    const d1=date.format(\"YYYY-MM-DD\");\r\n    const d2=moment().add(deltaDays, 'days').format(\"YYYY-MM-DD\");\r\n    if(d1===d2){\r\n        return {\r\n            textDecoration:'underline',\r\n            color:'green',\r\n        };\r\n    }\r\n    return {};\r\n};\r\n\r\n\r\nconst calendarHeaderStyle={\r\n    textAlign:\"center\",\r\n    marginTop:10,\r\n    marginBottom:10,\r\n    marginLeft:'auto',\r\n    marginRight:'auto',\r\n    width:'96%',\r\n    display:'grid',\r\n    gridTemplateColumns: '25px 25px auto 25px 25px',\r\n\r\n    '& .icon':{\r\n        color:'#BBB',\r\n    },\r\n};\r\n\r\nconst dlgScale={\r\n    w:360,\r\n    h:360,\r\n};\r\n\r\nconst getDatePickerPopoverStyle=(parCls)=>{\r\n    let result={};\r\n    let key=`.${parCls} .ant-picker-panel-container`;\r\n    result[key]={\r\n        boxShadow:'0px 0px 0px gray',\r\n        border:'1px solid #DDD',//#DDD\r\n    }\r\n    return result;\r\n}\r\n\r\nconst commonDaysStyle={\r\n    marginTop:0,\r\n    marginBottom:0,\r\n    display:'flex',\r\n\r\n    '& .day':{\r\n        flex:1,\r\n        padding:0,\r\n    },\r\n};\r\n\r\nexport default React.memo(DateDlg);","D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\edit\\ColorPickerDlg.js",["329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347"],"/** @jsxImportSource @emotion/react */\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { Layout, Input, Tabs, Modal, Form, message, Button, Divider, Popover } from 'antd';\r\nimport { PictureOutlined, FolderOpenOutlined, QuestionCircleOutlined,CalendarOutlined,FileOutlined } from '@ant-design/icons';\r\nimport moment  from 'moment';\r\nimport { CirclePicker,PhotoshopPicker } from 'react-color';\r\nimport {withEnh} from '../../../common/specialDlg';\r\n\r\nconst EnhDlg=withEnh(Modal);\r\n\r\n\r\n/**\r\n * 颜色选择器对话框\r\n * @param {*} props \r\n */\r\nconst ColorPickerDlg=(props)=>{\r\n    return <EnhDlg noTitle noFooter closable={false}\r\n            size={{w: dlgW}}\r\n            css={{left: props.offsetX - (props.parW - dlgW) / 2, top: props.t}}\r\n            visible={props.visible}\r\n            onCancel={props.onCancel}>\r\n\r\n        <CirclePicker\r\n            width ='504px'\r\n            colors={colors}\r\n            onChange={props.onOk} />\r\n    </EnhDlg>;\r\n};\r\n\r\nconst dlgW =540;// 290;\r\nconst colors=[\r\n    '#4D4D4D', '#999999', '#EEEEEE',/*'#FFFFFF',*/ '#F44E3B', '#FE9200', '#FCDC00', '#DBDF00', '#A4DD00', '#68CCCA', '#73D8FF', '#AEA1FF', '#FDA1FF', \r\n    '#333333', '#808080', '#cccccc', '#D33115', '#E27300', '#FCC400', '#B0BC00', '#68BC00', '#16A5A5', '#009CE0', '#7B64FF', '#FA28FF', \r\n    '#000000', '#666666', '#B3B3B3', '#9F0500', '#C45100', '#FB9E00', '#808900', '#194D33', '#0C797D', '#0062B1', '#653294', '#AB149E'\r\n];\r\n\r\nexport default React.memo(ColorPickerDlg);","D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\edit\\AdvColorPickerDlg.js",["348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365"],"/** @jsxImportSource @emotion/react */\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { Layout, Input, Tabs, Modal, Form, message, Button, Divider, Popover } from 'antd';\r\nimport { PictureOutlined, FolderOpenOutlined, QuestionCircleOutlined,CalendarOutlined,FileOutlined } from '@ant-design/icons';\r\nimport moment  from 'moment';\r\nimport { CirclePicker,PhotoshopPicker } from 'react-color';\r\nimport {withEnh} from '../../../common/specialDlg';\r\n\r\nconst EnhDlg=withEnh(Modal);\r\n\r\n/**\r\n * 高级颜色选择对话框\r\n * @param {*} props \r\n */\r\nconst AdvColorPickerDlg=(props)=>{\r\n    const [color, setColor]= useState({hex: \"#194D33\",});\r\n\r\n    const onOk=useCallback(()=>{\r\n        props.onOk(color);\r\n    },[props.onOk, color]);\r\n\r\n    return <EnhDlg noTitle noFooter closable={false}\r\n            size={{w: dlgW}}\r\n            css={{left: props.offsetX - (props.parW - dlgW) / 2, top: props.t}}\r\n            visible={props.visible}\r\n            onCancel={props.onCancel}\r\n            bodyStyle={{padding:0,}}>\r\n        <PhotoshopPicker css={{height:310,}} header='高级颜色选择' color={color.hex} onChange={setColor} onAccept ={onOk} onCancel={props.onCancel}/>\r\n    </EnhDlg>;\r\n};\r\n\r\n\r\n\r\nconst dlgW = 513;\r\n\r\nexport default React.memo(AdvColorPickerDlg);","D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\edit\\InsertImgDlg.js",["366","367","368","369","370","371","372","373"],"/** @jsxImportSource @emotion/react */\r\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\r\nimport { Layout, Input, Tabs, Modal, Form, message, Button, Divider, Popover } from 'antd';\r\nimport { PictureOutlined, FolderOpenOutlined, QuestionCircleOutlined } from '@ant-design/icons';\r\nimport {withEnh} from '../../../common/specialDlg';\r\nimport api from '../../../../service/api';\r\nimport * as uiUtil from '../../../../common/uiUtil';\r\nimport {useSelector} from 'react-redux';\r\n\r\nconst EnhDlg=withEnh(Modal);\r\n\r\n/**\r\n * 插入图片或文件对话框\r\n * @param {*} props \r\n */\r\nconst InsertImgDlg=(props)=>{\r\n    const {winW}= useSelector((state)=>({\r\n        winW:       state.common.winW,\r\n    }));\r\n\r\n    const insertPicDlgW = (winW < 820 ? winW - 20 : 800);\r\n\r\n    const [picPath, setPicPath]=useState('');\r\n    const [picName, setPicName]=useState('');\r\n\r\n    let elePicPath=useRef();\r\n    let elePicName=useRef();\r\n\r\n    //显示时清空输入框并选中第一个输入框 \r\n    useEffect(()=>{\r\n       if(props.visible) {\r\n            setPicPath('');\r\n            setPicName('');\r\n            setTimeout(() => {\r\n                onFocusEle(elePicPath);\r\n            }, 300);\r\n       }\r\n    },[props.visible]);\r\n\r\n    /**\r\n     * 修改事件\r\n     * @param {*} fun \r\n     * @param {*} e \r\n     */\r\n    const onChange=useCallback((fun,e)=>{\r\n        let val=(e && e.target ? e.target.value : e);\r\n        val=('undefined'===typeof(val) ? '' : val);\r\n        fun(val);\r\n    },[]);\r\n\r\n    /**\r\n     * 使组件获得焦点\r\n     * @param {*} nextRef \r\n     * @param {*} e \r\n     */\r\n    const onFocusEle=useCallback((nextRef,e)=>{\r\n        if(e){\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n        }\r\n        if(nextRef && nextRef.current){\r\n            nextRef.current.focus();\r\n        }\r\n    },[]);\r\n\r\n    /**\r\n     * 选择图片或附件文件，选择后更新输入框，并使第二个输入框获得焦点\r\n     */\r\n    const onSelPicFile = () => {\r\n        let selFilePaths = (props.isImg ? api.selPicFile() : api.selAttFile());\r\n        if (selFilePaths && selFilePaths[0]) {\r\n            let fullpath = selFilePaths[0];\r\n            let fn = fullpath.substring(Math.max(fullpath.lastIndexOf(\"\\\\\"), fullpath.lastIndexOf(\"/\")) + 1);\r\n            \r\n            setPicPath(fullpath);\r\n            setPicName((oldName)=>(''===oldName.trim() ? fn : oldName.trim()));\r\n            onFocusEle(elePicName);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 确定按钮点击事件\r\n     * @param {*} e \r\n     */\r\n    const onOk=(e)=>{\r\n        if(e){\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n        }\r\n        const fun=(props.isImg ? onValidateAddPic : onValidateAddAtt);\r\n        fun({\r\n            insertPicPath: picPath, \r\n            insertPicName: picName\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 插入图片时的校验\r\n     * @param {*} param0 \r\n     */\r\n    const onValidateAddPic = ({insertPicPath, insertPicName}) => {\r\n        const pathAndName={insertPicPath, insertPicName};\r\n\r\n        if (null != insertPicPath && \r\n                \"\" !== insertPicPath.trim() && \r\n                !api.existsFullpath(insertPicPath) &&\r\n                !api.isUrlFormat(insertPicPath)) {\r\n            message.warn(\"图片路径或url格式有误\");\r\n            return;\r\n        }\r\n        if (null == insertPicName || \"\" ===insertPicName.trim()) {\r\n            message.warn(\"图片显示名称不能为空\");\r\n            return;\r\n        }\r\n        if (insertPicName.includes(\"/\") || insertPicName.includes(\"\\\\\")) {\r\n            message.warn('图片显示名称格式有误，不能包含 \"/\" 或 \"\\\\\" ');\r\n            return;\r\n        }\r\n        if (true === api.existsPic(insertPicName)) {\r\n            Modal.confirm({\r\n                title: '是否覆盖',\r\n                content: <>\r\n                    <div css={{ marginBottom: 10 }}>图片显示名称已存在，是否要覆盖 ？</div>\r\n                    <Button type=\"link\" title='查看已有同名图片' css={{ margin: 0, padding: 0 }} onClick={api.openPicByName.bind(this,insertPicName)}>查看已有同名图片</Button>\r\n                </>,\r\n                icon: <QuestionCircleOutlined />,\r\n                onOk: copyPicAndAddTxt.bind(this,pathAndName),\r\n                okText:'确定',\r\n                cancelText:'取消',\r\n            });\r\n            return;\r\n        }\r\n\r\n        copyPicAndAddTxt(pathAndName);\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * 插入附件时的校验\r\n     * @param {*} param0 \r\n     */\r\n    const onValidateAddAtt = ({insertPicPath, insertPicName}) => {\r\n        const pathAndName={insertPicPath, insertPicName};\r\n\r\n        if (null == insertPicPath && \r\n                \"\" === insertPicPath.trim()) {\r\n            message.warn(\"附件路径或url不能为空\");\r\n            return;\r\n        }\r\n        if (null != insertPicPath && \r\n                \"\" !== insertPicPath.trim() && \r\n                !api.existsFullpath(insertPicPath) &&\r\n                !api.isUrlFormat(insertPicPath)) {\r\n            message.warn(\"附件路径或url格式有误\");\r\n            return;\r\n        }\r\n        if (null == insertPicName || \"\" === insertPicName.trim()) {\r\n            message.warn(\"附件显示名称不能为空\");\r\n            return;\r\n        }\r\n        if (insertPicName.includes(\"/\") || insertPicName.includes(\"\\\\\")) {\r\n            message.warn('附件显示名称格式有误，不能包含 \"/\" 或 \"\\\\\" ');\r\n            return;\r\n        }\r\n        if (true === api.existsAtt(insertPicName)) {\r\n            Modal.confirm({\r\n                title: '是否覆盖',\r\n                content: <>\r\n                    <div css={{ marginBottom: 10 }}>附件显示名称已存在，是否要覆盖 ？</div>\r\n                    <Button type=\"link\" title='查看已有同名附件' css={{ margin: 0, padding: 0 }} onClick={api.openAttByName.bind(this,insertPicName)}>查看已有同名附件</Button>\r\n                </>,\r\n                icon: <QuestionCircleOutlined />,\r\n                onOk: copyAttAndAddTxt.bind(this,pathAndName),\r\n                okText:'确定',\r\n                cancelText:'取消',\r\n            });\r\n            return;\r\n        }\r\n\r\n        copyAttAndAddTxt(pathAndName);\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * 插入图片的校验\r\n     * @param {*} param0 \r\n     */\r\n    const copyPicAndAddTxt = ({insertPicPath, insertPicName}) => {\r\n        //如果路径为空，则从剪切板找图片；否则从指定路径加载图片\r\n        let prom =null;\r\n        if(''===insertPicPath.trim()){//路径为空，从剪切板取图片\r\n            prom=api.copyClipboardPicToImgsDir(insertPicName, props.activeKey);\r\n        }else{//路径不为空，从文件取图片\r\n            prom=api.copyPicToImgsDir(insertPicPath,insertPicName, props.activeKey);\r\n        }\r\n        prom.then(rs=>{\r\n            props.onCancel();\r\n            props.onAddPic(rs,insertPicName);\r\n        }).catch(e=>{\r\n            message.warn(e.msg);\r\n        });\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * 插入附件的校验\r\n     * @param {*} param0 \r\n     */\r\n    const copyAttAndAddTxt = ({insertPicPath, insertPicName}) => {\r\n        //从指定路径加载附件\r\n        let prom = api.copyAttToAttsDir(insertPicPath,insertPicName, props.activeKey);          \r\n        prom.then(rs=>{\r\n            props.onCancel();\r\n            props.onAddAtt(rs,insertPicName);\r\n        }).catch(e=>{\r\n            message.warn(e.msg);\r\n        });\r\n        return;\r\n    }\r\n\r\n\r\n    \r\n    return (\r\n        <EnhDlg\r\n                title={props.isImg?\"插入图片\":\"插入附件\"}\r\n                closable={true}\r\n                size={{w: insertPicDlgW}}\r\n                visible={props.visible}\r\n                onCancel={props.onCancel}\r\n                onOk={onOk}>\r\n                    \r\n            <div css={insertImgFormStyle}>\r\n                <div className='row'>\r\n                    <div className='cell lab'>{props.isImg?'图片位置：':'附件位置：'}</div>\r\n                    <div className='cell'>\r\n                        <Input \r\n                            value={picPath}\r\n                            onPressEnter={onFocusEle.bind(this,elePicName)}\r\n                            ref={elePicPath}\r\n                            onChange={onChange.bind(this,setPicPath)} \r\n                            addonAfter={<FolderOpenOutlined onClick={onSelPicFile} css={{ cursor: 'pointer' }} />} \r\n                            placeholder={props.isImg?'请输入图片路径、url、留空（以从剪切版读取）':'请输入附件路径或url'} />\r\n                    </div>\r\n                </div>\r\n                <div className='row'>\r\n                    <div className='cell lab'>显示名称：</div>\r\n                    <div className='cell'>\r\n                        <Input \r\n                            value={picName} \r\n                            onPressEnter={onOk}\r\n                            ref={elePicName}\r\n                            onChange={onChange.bind(this,setPicName)} \r\n                            placeholder={props.isImg?'请输入图片显示名称':'请输入附件显示名称'} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </EnhDlg>\r\n    );\r\n    \r\n}\r\n\r\nconst insertImgFormStyle = {\r\n    width: '100%',\r\n    display: 'table',\r\n    '& .row': {\r\n        display: 'table-row'\r\n    },\r\n    '& .cell': {\r\n        display: 'table-cell',\r\n        verticalAlign: 'center',\r\n        paddingTop: 5,\r\n        paddingBottom: 5,\r\n    },\r\n    '& .cell.lab': {\r\n        width: 80,\r\n    },\r\n};\r\n\r\nexport default React.memo(InsertImgDlg);","D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\edit\\Editor.js",["374","375","376","377","378","379","380","381","382","383","384","385","386","387","388"],"/** @jsxImportSource @emotion/react */\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { Layout, Input, Tabs, Modal, Form, message, Button, Divider, Popover } from 'antd';\r\nimport { PictureOutlined, FolderOpenOutlined, QuestionCircleOutlined,CalendarOutlined,FileOutlined } from '@ant-design/icons';\r\nimport {useSelector} from 'react-redux';\r\n\r\nimport { Controlled as CodeMirror } from 'react-codemirror2';\r\n\r\nimport 'codemirror/lib/codemirror.css';\r\nimport 'codemirror/addon/dialog/dialog.css';\r\nimport 'codemirror/addon/search/matchesonscrollbar.css';\r\n\r\nimport 'codemirror/mode/markdown/markdown';\r\nimport 'codemirror/keymap/sublime';\r\nimport 'codemirror/addon/selection/active-line';\r\nimport 'codemirror/addon/dialog/dialog';\r\nimport 'codemirror/addon/search/searchcursor';\r\nimport 'codemirror/addon/search/search';\r\nimport 'codemirror/addon/scroll/annotatescrollbar';\r\nimport 'codemirror/addon/search/matchesonscrollbar';\r\nimport 'codemirror/addon/search/jump-to-line';\r\n\r\nimport editorSvc from '../../../../service/editorSvc';\r\nimport { createSelector } from 'reselect';\r\n\r\n\r\n\r\n/**\r\n * 编辑器\r\n * @param {*} props \r\n */\r\nconst Editor=(props)=>{\r\n\r\n    const {winH}= useSelector((state)=>({\r\n        winH:       state.common.winH,\r\n    }));\r\n\r\n    const codeMirrorInstRef=useRef(null);\r\n    const bindCodeMirrorInstRef=useCallback((ele)=>{\r\n        codeMirrorInstRef.current=ele;\r\n    },[]);\r\n\r\n    /**\r\n     * 防止默认事件触发的处理\r\n     */\r\n    const onPreventKey =useCallback(() => {\r\n        if(window.event){\r\n            window.event.stopPropagation();\r\n            window.event.preventDefault();\r\n        }\r\n    },[]);\r\n\r\n\r\n    /**\r\n     * 替换内容并获得焦点\r\n     * @param {*} originCursor   替换前光标位置\r\n     * @param {*} originLineLen  替换前光标所在行的长度\r\n     * @param {*} newCursor      替换后光标位置\r\n     * @param {*} newLine        替换后整行的内容\r\n     * @param {*} delayFocus     是否延迟获得焦点\r\n     */\r\n    const replaceLine =useCallback((originCursor, originLineLen, newCursor, newLine, delayFocus = false) => {\r\n        if(!codeMirrorInstRef.current){\r\n            return;\r\n        }\r\n        const codeMirrorInst=codeMirrorInstRef.current;\r\n        codeMirrorInst.setCursor(originCursor);\r\n        codeMirrorInst.setSelection(originCursor, { line: originCursor.line, ch: originLineLen });\r\n        codeMirrorInst.replaceSelection(newLine);\r\n        codeMirrorInst.setCursor(newCursor);\r\n        codeMirrorInst.setSelection(newCursor);\r\n        codeMirrorInst.focus();\r\n\r\n        //对话框刚关闭时，不能马上获得焦点，因此这种情况需要延迟一下\r\n        if (delayFocus) {\r\n            setTimeout(() => {\r\n                codeMirrorInst.setCursor(newCursor);\r\n                codeMirrorInst.setSelection(newCursor);\r\n                codeMirrorInst.focus();\r\n            }, 500);\r\n        }\r\n    },[]);\r\n\r\n    const onAddColor =useCallback((color = null, delayFocus = false) => {\r\n        if(!codeMirrorInstRef.current){\r\n            return;\r\n        }\r\n        const codeMirrorInst=codeMirrorInstRef.current;\r\n\r\n        //获得当前光标位置与光标所在行\r\n        let cursor = codeMirrorInst.getCursor();\r\n        let { line } = cursor;\r\n        let lineTxt = codeMirrorInst.getLine(line);\r\n\r\n        //替换行\r\n        let newLine = editorSvc.setColor(lineTxt, color);\r\n        replaceLine({ line, ch: 0 }, lineTxt.length, { line, ch: newLine.length }, newLine, delayFocus);\r\n    },[replaceLine]);\r\n\r\n    const onAddPic = useCallback((picRelaPath,pname) => {\r\n        if(!codeMirrorInstRef.current){\r\n            return;\r\n        }\r\n        const codeMirrorInst=codeMirrorInstRef.current;\r\n\r\n        //获得当前光标位置与光标所在行     \r\n        let cursor = codeMirrorInst.getCursor();\r\n        let { line, ch } = cursor;\r\n        let lineTxt = codeMirrorInst.getLine(line);\r\n\r\n        //替换行\r\n        let { newLinetxt, cusorPos } = editorSvc.addPic(lineTxt, ch, picRelaPath,pname);\r\n        replaceLine({ line, ch: 0 }, lineTxt.length, { line, ch: cusorPos }, newLinetxt, true);\r\n    },[replaceLine]);\r\n\r\n    const onAddAtt = useCallback((picRelaPath,pname) => {\r\n        if(!codeMirrorInstRef.current){\r\n            return;\r\n        }\r\n        const codeMirrorInst=codeMirrorInstRef.current;\r\n\r\n        //获得当前光标位置与光标所在行     \r\n        let cursor = codeMirrorInst.getCursor();\r\n        let { line, ch } = cursor;\r\n        let lineTxt = codeMirrorInst.getLine(line);\r\n\r\n        //替换行\r\n        let { newLinetxt, cusorPos } = editorSvc.addAtt(lineTxt, ch, picRelaPath,pname);\r\n        replaceLine({ line, ch: 0 }, lineTxt.length, { line, ch: cusorPos }, newLinetxt, true);\r\n    },[replaceLine]);\r\n\r\n    const onAddDate=useCallback((dateStr)=>{\r\n        //获得当前光标位置与光标所在行\r\n        if(!codeMirrorInstRef.current){\r\n            return;\r\n        }\r\n        const codeMirrorInst=codeMirrorInstRef.current; \r\n        let cursor = codeMirrorInst.getCursor();\r\n        let { line, ch } = cursor;\r\n        let lineTxt = codeMirrorInst.getLine(line);\r\n\r\n        //替换行\r\n        let targetDateStr=dateStr.substring(2).replace(/[-]/g,'.');//去掉两位年\r\n        let { newLinetxt, cusorPos } = editorSvc.addDate(lineTxt, ch, targetDateStr);\r\n        replaceLine({ line, ch: 0 }, lineTxt.length, { line, ch: cusorPos }, newLinetxt, true);\r\n    },[replaceLine]);\r\n\r\n\r\n\r\n    /**\r\n     * 显示后获取焦点并刷新\r\n     */\r\n    useEffect(()=>{\r\n        if(props.forceRefresh) {\r\n             const focusFun=()=>{\r\n                if(codeMirrorInstRef.current){\r\n                    codeMirrorInstRef.current.focus();\r\n                    codeMirrorInstRef.current.refresh();\r\n                    return true;\r\n                }\r\n                return false;\r\n             }\r\n             setTimeout(focusFun, 0);\r\n        }\r\n    },[props.forceRefresh]);\r\n\r\n    useEffect(()=>{\r\n        if(!props.action){\r\n            return;\r\n        }\r\n        if('addColor'===props.action.type){\r\n            onAddColor(props.action.color, props.action.delayFocus);\r\n            return;\r\n        }\r\n        if('addPic'===props.action.type){\r\n            onAddPic(props.action.relaPath, props.action.name);\r\n            return;\r\n        }\r\n        if('addAtt'===props.action.type){\r\n            onAddAtt(props.action.relaPath, props.action.name);\r\n            return;\r\n        }\r\n        if('addDate'===props.action.type){\r\n            onAddDate(props.action.date);\r\n        }\r\n    },[props.action, onAddColor, onAddPic, onAddAtt, onAddDate]);\r\n\r\n    \r\n    return <CodeMirror\r\n        css={getCodeEditorStyle(winH-400)}\r\n        editorDidMount={bindCodeMirrorInstRef}\r\n        value={props.value}\r\n        options={{\r\n            lineNumbers: true,\r\n            theme: 'default',\r\n            mode: 'markdown',\r\n            styleActiveLine: true,\r\n            indentWithTabs: true,\r\n            indentUnit: 4,\r\n            keyMap: \"sublime\",\r\n            extraKeys: {\r\n                \"Ctrl-F\": \"findPersistent\",\r\n                \"Ctrl-G\": \"jumpToLine\",\r\n                \"Ctrl-S\": props.onOnlySave,\r\n                \"Shift-Ctrl-S\": props.onOk,                                  \r\n                \"Ctrl-P\": props.onShowInsertPicDlg,\r\n                \"Ctrl-I\": props.onShowInsertAttDlg,\r\n                \"Ctrl-H\": props.onShowHelpDlg,\r\n                \"Ctrl-T\": props.onShowDateDlg,\r\n                \r\n                \"Shift-Ctrl-G\": onPreventKey,\r\n                \"Shift-Ctrl-F\": onPreventKey,\r\n                \"Shift-Ctrl-R\": onPreventKey,\r\n                \"Esc\":          onPreventKey,\r\n                \"Alt-G\":        onPreventKey,\r\n            }\r\n        }}\r\n        onBeforeChange={props.onChange} />;\r\n};\r\n\r\nconst getCodeEditorStyle = createSelector(\r\n    height=>height,\r\n    (height) => ({\r\n        '& .CodeMirror': {\r\n            border: '1px solid lightgrey',\r\n            fontSize: 16,\r\n            height: height,\r\n            maxHeight: height,\r\n            minHeight: height,\r\n        }\r\n    })\r\n);\r\n\r\n\r\nexport default React.memo(Editor);\r\n","D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\NewMindmap.js",["389","390","391"],"/** @jsxImportSource @emotion/react */\r\nimport React, { useCallback, useEffect, useReducer, useRef, useState } from 'react';\r\nimport {Spin,Alert,Row, Col} from 'antd';\r\nimport {createSelector} from 'reselect';\r\nimport newMindmapSvc from '../../../service/newMindmapSvc';\r\n\r\n/**\r\n * 导图组件\r\n * @param {*} props \r\n */\r\nconst NewMindmap=(props)=>{\r\n    let beginTime=new Date().getTime();\r\n\r\n    const [{ndStyles, lineStyles, expBtnStyles, wrapperStyle},setAllStyles]=useState({\r\n        ndStyles:{}, \r\n        lineStyles:{}, \r\n        expBtnStyles:{}, \r\n        wrapperStyle:{}\r\n    });\r\n\r\n    const arrangeNdPositions=useCallback(()=>{\r\n        if(!props.ds){return;}\r\n        newMindmapSvc.loadStyles(props.ds);\r\n        setAllStyles({\r\n            ndStyles:       props.ds.ndStyles, \r\n            lineStyles:     props.ds.lineStyles, \r\n            expBtnStyles:   props.ds.expBtnStyles,\r\n            wrapperStyle:   props.ds.wrapperStyle,\r\n        });\r\n    },[props.ds]);\r\n\r\n    const defaultContentRenderer=useCallback((nd)=>{\r\n        return \"\"+nd.str;\r\n    },[]);\r\n\r\n    const defaultExpBtnRenderer=useCallback((nd)=>{\r\n        return nd.expand? \"-\":\"+\";\r\n    },[]);\r\n\r\n\r\n    useEffect(()=>{\r\n        if(props.ds && props.ds.tree && props.ds.list && props.ds.map){\r\n            // setTimeout(arrangeNdPositions, 5000);\r\n            arrangeNdPositions();\r\n        }\r\n    },[props.ds, arrangeNdPositions]);\r\n\r\n\r\n    let middleTime=new Date().getTime();\r\n\r\n    \r\n    //校验\r\n    if(!props.ds){\r\n        return (<Row>\r\n            <Col span={8} offset={8}>\r\n                <Alert\r\n                    css={{marginTop:50}}\r\n                    message='状态异常'\r\n                    description='读取图表文件时出现错误'\r\n                    type=\"error\"/>\r\n            </Col>\r\n        </Row>);\r\n    }\r\n    if(false===props.ds.succ){\r\n        return (<Row>\r\n            <Col span={8} offset={8}>\r\n                <Alert\r\n                    css={{marginTop:50}}\r\n                    message={props.ds.msg}\r\n                    description={props.ds.desc}\r\n                    type=\"error\"/>\r\n            </Col>\r\n        </Row>);\r\n    }\r\n    if(!props.ds.list){\r\n        return null;\r\n    }\r\n\r\n\r\n    //如果提供了节点渲染器或扩展按钮渲染器，则使用，否则使用默认的\r\n    let actNdRenderer=defaultContentRenderer;\r\n    let actExpBtnRenderer=defaultExpBtnRenderer;\r\n    if(props.ndContentRenderer){\r\n        actNdRenderer=props.ndContentRenderer;\r\n    }\r\n    if(props.ndExpBtnRenderer){\r\n        actExpBtnRenderer=props.ndExpBtnRenderer;\r\n    }\r\n\r\n\r\n    \r\n\r\n\r\n\r\n    const result= (\r\n        <div css={{...defaultWrapperStyle, ...wrapperStyle}}  id={`graphwrapper_${props.ind}`}>\r\n            {\r\n                props.ds.list.map((nd,ind)=>(<React.Fragment key={'nd-'+ind}>\r\n                    {/* 节点内容  css={nd.parid?{borderBottom:'1px solid lightgray'}:{}}*/}\r\n                    <div className='item'  id={nd.id} style={getNdStyle({ndStyles, nd})}>\r\n                        {actNdRenderer(nd)}\r\n                    </div>\r\n\r\n                    {/* 节点到父节点的连接线 */}\r\n                    {\r\n                        (nd.parid) && (<>\r\n                            <div className='linewrapper' id={`line_${nd.id}`} style={getLineStyle({lineStyles, nd, type:'line'})}>\r\n                                <div className='lineExp' id={`lineExp_${nd.id}`} style={getLineStyle({lineStyles, nd, type:'lineExp'})}></div>\r\n                                <div className='linefrom' id={`linefrom_${nd.id}`} style={getLineStyle({lineStyles, nd, type:'lineFrom'})}></div>\r\n                                <div className='lineto' id={`lineto_${nd.id}`} style={getLineStyle({lineStyles, nd, type:'lineTo'})}></div>\r\n                            </div>\r\n                        </>)\r\n                    }\r\n\r\n                    {/* 节点的展开按钮 */}\r\n                    {\r\n                        (nd.childs && 0<nd.childs.length) && \r\n                            <div id={`expbtn_${nd.id}`} className='expBtn' style={getExpBtnStyle({expBtnStyles, nd})}>\r\n                                {actExpBtnRenderer(nd)}\r\n                            </div>\r\n                    }\r\n                </React.Fragment>))\r\n            }\r\n        </div>\r\n    );\r\n\r\n\r\n    let endTime=new Date().getTime();\r\n    console.log(`导图渲染时间：${(endTime-beginTime)} ms，其中渲染前执行闭包的时间： ${(middleTime-beginTime)} ms`);\r\n    return result;\r\n    \r\n}\r\n\r\nconst getExpBtnStyle=createSelector(\r\n    json=>json.expBtnStyles,\r\n    json=>json.nd,\r\n    (expBtnStyles,nd)=>(\r\n        (nd && expBtnStyles && expBtnStyles[nd.id]) ? expBtnStyles[nd.id] : {}\r\n    )\r\n);\r\n\r\nconst getLineStyle=createSelector(\r\n    json=>json.lineStyles,\r\n    json=>json.nd,\r\n    json=>json.type,\r\n    (lineStyles,nd,type)=>(\r\n        (nd && lineStyles && lineStyles[nd.id] && lineStyles[nd.id][type]) ? \r\n            lineStyles[nd.id][type] \r\n                : \r\n            {}\r\n    )\r\n);\r\n\r\nconst getNdBorderStyle=(nd)=>{\r\n    if(!nd){\r\n        return {};\r\n    }\r\n\r\n    //根节点不设置边框，其样式由render props自己设置\r\n    if(0===nd.lev){\r\n        return {};\r\n    }\r\n    //二级节点使用四周的边框\r\n    if(1===nd.lev){\r\n        return {\r\n            borderRadius: 5,\r\n            border:`1px solid ${nd.color}`\r\n        };\r\n    }\r\n    //其他节点使用下边框\r\n    return {borderBottom:`1px solid ${nd.color}`};\r\n}\r\n\r\nconst getNdStyle=createSelector(\r\n    json=>json.ndStyles,\r\n    json=>json.nd,\r\n    (ndStyles,nd)=>{\r\n        let borderStyle=getNdBorderStyle(nd);\r\n        let positionStyle=((nd && ndStyles && ndStyles[nd.id]) ? ndStyles[nd.id]: {});\r\n        return {...borderStyle, ...positionStyle};\r\n    }\r\n);\r\n\r\n\r\n\r\nconst outOfViewStyle={\r\n    left:'-800px',\r\n    top:'-800px',\r\n};\r\n\r\nconst baseFloatBlockStyle={\r\n    position: 'absolute',\r\n    backgroundColor: 'transparent',\r\n    overflow: 'hidden',\r\n    boxSizing: 'border-box',\r\n}\r\n\r\n\r\nconst defaultWrapperStyle={\r\n    overflow:'hidden',\r\n    border:'0px solid red',\r\n    position:'relative',    //容器本身使用相对定位，其中内容使用绝对定位相对它来布局\r\n    marginLeft:'auto',\r\n    marginRight:'auto',\r\n\r\n    '& .item':{\r\n        whiteSpace:'nowrap',\r\n        position:'absolute',\r\n        display:'inline-block',\r\n        border:'0px solid green',\r\n        paddingBottom:0,\r\n        // paddingTop:10,\r\n        paddingTop:0,\r\n        // paddingLeft:20,\r\n        // paddingRight:20,\r\n        verticalAlign: 'bottom',\r\n        // backgroundColor: 'lightblue',\r\n        ...outOfViewStyle,\r\n    },\r\n\r\n    '& .expBtn':{\r\n        ...baseFloatBlockStyle,\r\n        ...outOfViewStyle,\r\n        zIndex:1,   //折叠按钮显示在连接线的上层\r\n    },\r\n\r\n    '& .linewrapper': {\r\n        ...baseFloatBlockStyle,\r\n        ...outOfViewStyle,\r\n    },\r\n  \r\n    '& .linewrapper .lineExp': {\r\n        ...baseFloatBlockStyle,\r\n    },\r\n\r\n    '& .linewrapper .linefrom': {\r\n        ...baseFloatBlockStyle,\r\n    },\r\n\r\n    '& .linewrapper .lineto': {\r\n        ...baseFloatBlockStyle,\r\n    }\r\n};\r\n\r\nexport default React.memo(NewMindmap);","D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\MindNode.js",[],"D:\\ws_front\\gmap-ui\\src\\common\\keyDetector.js",[],"D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\ConnectedPathSelect.js",["392"],"/** @jsxImportSource @emotion/react */\r\nimport React from 'react';\r\nimport PathSelect from './PathSelect';\r\nimport {connect,dispatcher} from '../../../common/gflow';\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\n/**\r\n * 路径选择组件的包装\r\n */\r\nconst ConnectedPathSelect=(props)=>{\r\n    const {filelist, dirs}= useSelector((state)=>{\r\n        return {\r\n            filelist:   state.filesel.filelist,\r\n            dirs:       state.filesel.dirs,\r\n        }\r\n    });\r\n\r\n    const extProps={...props, filelist, dirs};\r\n\r\n    return <PathSelect {...extProps} \r\n        onloadDir={dispatcher.filesel.load}\r\n        onloadCurrDir={dispatcher.filesel.loadCurrDir}\r\n    />;\r\n}\r\n\r\n\r\n\r\nexport default React.memo(ConnectedPathSelect);","D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\PathSelect.js",["393"],"/** @jsxImportSource @emotion/react */\r\nimport React, { useCallback, useState } from 'react';\r\nimport { Breadcrumb,Button,Row, Col,List, Avatar,Divider,BackTop   } from 'antd';\r\nimport { FileMarkdownOutlined,ReloadOutlined,HomeOutlined,FolderOutlined } from '@ant-design/icons';\r\n\r\nimport {createSelector} from 'reselect';\r\n\r\n/**\r\n * 路径选择\r\n */\r\nconst PathSelect=(props)=>{\r\n    const [listWrapperId]=useState(()=>'fileselectlist'+new Date().getTime());\r\n\r\n    const getScrollTarget=useCallback(()=>{\r\n        return document.getElementById(listWrapperId);\r\n    },[]);\r\n\r\n    const onSelectMapItem=(item)=>{\r\n        if (!item.isfile) {\r\n            props.onloadDir(item.fullpath);\r\n            return;\r\n        }\r\n        props.onSelectMapItem(item);\r\n    }\r\n\r\n    \r\n    //列表样式，如果指定的forceMaxH，则保持高度和最大高度一致\r\n    let listWrapperStyle=getListWrapperStyle(props);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Row>\r\n                <Col span={22}>\r\n                    <Breadcrumb> \r\n                        {\r\n                            props.dirs.map((dir,ind)=>(\r\n                                <Breadcrumb.Item key={ind}  {...(dir.iscurr?{}:{'href':'#'})}  onClick={props.onloadDir.bind(this,dir.fullpath)}>\r\n                                    {dir.ishome ? <HomeOutlined /> : dir.showname}\r\n                                </Breadcrumb.Item>\r\n                            ))\r\n                        }    \r\n                    </Breadcrumb>\r\n                </Col>\r\n                <Col span={2} css={{textAlign:'right'}}>\r\n                    <Button title='刷新' size='small' type=\"default\" shape=\"circle\" icon={<ReloadOutlined />} onClick={props.onloadCurrDir} />\r\n                </Col>\r\n            </Row>                          \r\n            <Divider css={{marginTop:'10px',marginBottom:'0px'}}/>\r\n            \r\n            <div css={listWrapperStyle} id={listWrapperId}>                   \r\n                <List\r\n                    itemLayout=\"horizontal\"\r\n                    dataSource={props.filelist}\r\n                    renderItem={item => (\r\n                        <List.Item className='listitem' onClick={onSelectMapItem.bind(this,item)} {...getListItemExtra(item)}>\r\n                            <List.Item.Meta \r\n                                avatar={\r\n                                    <Avatar icon={item.isfile ? <FileMarkdownOutlined /> : <FolderOutlined />} \r\n                                        css={{ \"backgroundColor\": (item.isfile?'#40a9ff':'orange') }} />\r\n                                }\r\n                                title={item.showname}\r\n                                description={item.size}/>\r\n                        </List.Item>\r\n                    )}\r\n                />\r\n            </div>\r\n            \r\n            {\r\n                (props.backtopLoc && 2===props.backtopLoc.length) && (\r\n                    <BackTop target={getScrollTarget} css={{right:props.backtopLoc[0],bottom:props.backtopLoc[1]}}/>\r\n                )\r\n            }\r\n        </React.Fragment>\r\n    );\r\n    \r\n}\r\n\r\n\r\nconst getListItemExtra=(item)=>{\r\n    if(item.pic){\r\n        return {\r\n            extra: <div css={{marginRight:16,width:48,height:48,\r\n                    backgroundImage:`url('${item.pic}')`,\r\n                    backgroundRepeat:'no-repeat',\r\n                    backgroundSize:'cover',\r\n                    backgroundPosition:'center center'}}></div>\r\n        };\r\n    }\r\n\r\n    return {};\r\n}\r\n\r\nconst getListWrapperStyle=createSelector(\r\n    props=>props.maxH,\r\n    props=>props.forceMaxH,\r\n    (maxH,forceMaxH)=>{\r\n        let style={\r\n            'maxHeight':maxH,\r\n            'overflowY':'auto',\r\n            'overflowX':'hidden',\r\n\r\n            '& .listitem:hover':{\r\n                backgroundColor:'#EEE',\r\n                borderRadius:10,\r\n            },\r\n            '& .listitem':{\r\n                cursor:'pointer',\r\n                transition: 'all 0.3s 0s',\r\n                transitionTimingFunction: 'ease',\r\n            }\r\n\r\n        };\r\n        if(forceMaxH){\r\n            style={'height':maxH,'minHeight':maxH, ...style};\r\n        }\r\n        return style;\r\n    }\r\n);\r\n\r\nexport default PathSelect;","D:\\ws_front\\gmap-ui\\src\\common\\markedHighlightUtil.js",[],"D:\\ws_front\\gmap-ui\\src\\ui\\home\\views\\gantt\\GantChart.js",["394","395","396","397"],"/** @jsxImportSource @emotion/react */\r\nimport React, { Fragment, useCallback, useEffect, useRef, useState } from 'react';\r\nimport { Progress, Table,Popover } from 'antd';\r\nimport { RightOutlined } from '@ant-design/icons';\r\n\r\nimport {createSelector} from 'reselect';\r\nimport userEvent from '@testing-library/user-event';\r\n\r\n/**\r\n * 甘特图组件\r\n * @param {*} props \r\n */\r\nconst GantChart=(props)=>{\r\n    const [arrows, setArrows]=useState([]);\r\n    const [gantEleId]=useState(()=>'ganttTable-'+new Date().getTime());\r\n    const lastScrollTimeRef=useRef(0);\r\n    const scrollTimerRef=useRef(null);\r\n  \r\n\r\n\r\n    \r\n\r\n\r\n    /**\r\n     * 摆放箭头位置\r\n     */\r\n    const putArrows=useCallback(()=>{\r\n        let arrows=[];\r\n\r\n        //边界范围定义\r\n        let eleFirstCell=document.querySelector(`#${gantEleId} table tr:nth-child(1) th:nth-child(1)`);\r\n        let eleLastCell=document.querySelector(`#${gantEleId} .ant-table-body`);\r\n        if(!eleFirstCell || !eleLastCell){\r\n            return;\r\n        }\r\n        \r\n        let firstRect=eleFirstCell.getBoundingClientRect();\r\n        let lastRect=eleLastCell.getBoundingClientRect();\r\n        \r\n        let arrowBounds={\r\n            l: firstRect.right,\r\n            t: firstRect.bottom,\r\n            r: lastRect.right,\r\n            b: lastRect.bottom,\r\n        }\r\n\r\n\r\n        //根据连接关系计算每组连接线的位置（css样式）\r\n        props.arrows.forEach((rela)=>{\r\n            //起始单元格与结束单元格位置\r\n            let shouldHidden=false;//用于判断当连接线超出边界范围时不显示\r\n            let eleFrom=document.querySelector(`#${gantEleId} table tr:nth-child(${rela.from[0]+2}) td:nth-child(${rela.from[1]+1})`);\r\n            let eleTo=document.querySelector(`#${gantEleId} table tr:nth-child(${rela.to[0]+2}) td:nth-child(${rela.to[1]+1})`);\r\n            if(!eleFrom || !eleTo){\r\n                return;\r\n            }\r\n\r\n            let tdFrom=eleFrom.getBoundingClientRect();\r\n            let tdTo=eleTo.getBoundingClientRect();\r\n            \r\n\r\n            \r\n            //连接线起点端：从起始单元格右侧开始\r\n            let from={\r\n                left:tdFrom.right,\r\n                top:tdFrom.top+parseInt(tdFrom.height/2),\r\n                width:20,\r\n                height:parseInt(tdFrom.height/2),\r\n                borderRight:`1px solid ${colors.joinLine}`,\r\n                borderTop:`1px solid ${colors.joinLine}`,\r\n                // borderTopRightRadius:'6px',\r\n            };\r\n            \r\n            //连接线结束点端：到结束单元格左侧结束\r\n            let to={\r\n                left:tdTo.left-20-1,\r\n                top:tdTo.top,\r\n                width:20,\r\n                height:parseInt(tdTo.height/2),\r\n                borderLeft:`1px solid ${colors.joinLine}`,\r\n                borderBottom:`1px solid ${colors.joinLine}`,\r\n            };\r\n\r\n            //结束点处的箭头\r\n            let posArrow={\r\n                left:to.left+to.width-8,\r\n                top:to.top+to.height-7,\r\n                color:`${colors.joinLine}`,\r\n            };\r\n\r\n            //之间的连接线\r\n            let fromx=from.left+from.width;\r\n            let fromy=from.top+from.height;\r\n            let tox=to.left;\r\n            let toy=to.top;\r\n\r\n            let join1={\r\n                left:parseInt(Math.min(fromx,tox)),\r\n                top:from.top+from.height,\r\n                width:1,\r\n                height:parseInt(Math.abs(fromy-toy)),\r\n                backgroundColor:colors.joinLine,\r\n            }\r\n\r\n            let join2={\r\n                height:1,\r\n                width:parseInt(Math.abs(fromx-tox)),\r\n                left: parseInt(Math.min(fromx,tox)),\r\n                backgroundColor:colors.joinLine,\r\n            }\r\n\r\n            // let coner1={};\r\n            // let coner2={};\r\n\r\n            //连接线位置校准\r\n            if(fromx<=tox){\r\n                join2.top=join1.top+join1.height;\r\n                --join1.left;\r\n                --join2.left;\r\n                join2.width+=2;\r\n\r\n                join1.height+=to.height;\r\n                join2.top+=to.height-1;\r\n                to.borderLeft='0px';\r\n            }else{\r\n                join2.top=from.top+from.height;\r\n                // to.borderBottomLeftRadius='6px';\r\n\r\n                // coner2={\r\n                //     left:parseInt(Math.min(fromx,tox)),\r\n                //     top:join2.top,\r\n                //     borderTopLeftRadius:'6px',\r\n                //     borderLeft:`1px solid ${colors.joinLine}`,\r\n                //     borderTop:`1px solid ${colors.joinLine}`,\r\n                //     width:'6px',\r\n                //     height:'6px',\r\n                // };\r\n                // join1.top+=6;\r\n                // //join1.height-=6;\r\n                // join2.left+=6;\r\n                // join2.width-=6;\r\n\r\n                // to.top+=6;\r\n                // to.height-=6;\r\n\r\n                // from.borderBottomRightRadius='6px';\r\n                // from.borderBottom=`1px solid ${colors.joinLine}`;\r\n                // from.height+=1;\r\n                // join2.width-=6;\r\n                \r\n            }\r\n\r\n            \r\n                       \r\n            //上下左右四个边框超出则不显示连接线\r\n            if(tdFrom.right<arrowBounds.l || tdTo.left<arrowBounds.l){\r\n                shouldHidden=true;\r\n            }\r\n            if(from.top<arrowBounds.t){\r\n                shouldHidden=true;\r\n            }\r\n            if(Math.max(from.left+from.width, to.left+to.width)>arrowBounds.r){\r\n                shouldHidden=true;\r\n            }\r\n            if(Math.max(from.top+from.height, to.top+to.height)>arrowBounds.b){\r\n                shouldHidden=true;\r\n            }\r\n            if(shouldHidden){\r\n                from.display=\"none\";\r\n                to.display=\"none\";\r\n                join1.display=\"none\";\r\n                join2.display=\"none\";\r\n                posArrow.display=\"none\";\r\n                // coner1.display=\"none\";\r\n                // coner2.display=\"none\";\r\n            }\r\n\r\n            arrows.push({\r\n                st:from,\r\n                end:to,\r\n                join1:join1,\r\n                join2:join2,\r\n                head:posArrow,\r\n                // coner1:coner1,\r\n                // coner2:coner2,\r\n            });\r\n        });\r\n\r\n        setArrows(arrows);\r\n    },[props.arrows, setArrows]);\r\n\r\n\r\n    /**\r\n     * 延时执行设置箭头位置\r\n     * @param {*} delayMore 如果指定为true，则延迟更长的时间（3s）再执行操作，否则按默认的时间间隔\r\n     */\r\n    const debouncePutArrows=useCallback((delayMore=undefined)=>{\r\n        //与上次计算时间间隔太小，取消上次的任务\r\n        let time=new Date().getTime();\r\n        if(time-lastScrollTimeRef.current<debounceInterval){\r\n            if(null!==scrollTimerRef.current){\r\n                clearTimeout(scrollTimerRef.current);\r\n            }\r\n        }\r\n\r\n        //延时执行\r\n        lastScrollTimeRef.current=time;\r\n        scrollTimerRef.current=setTimeout(putArrows,true===delayMore?3000: debounceInterval);\r\n    },[putArrows]);\r\n\r\n\r\n\r\n    useEffect(()=>{\r\n        //注册有滚动事件以计算箭头位置，并且现在触发一次计算\r\n        setTimeout(() => {\r\n            let ele=document.querySelector(`#${gantEleId} .ant-table-body`);\r\n            if(ele){\r\n                ele.addEventListener(\"scroll\",debouncePutArrows);\r\n            }\r\n            debouncePutArrows();\r\n        }, 200);\r\n\r\n        return ()=>{\r\n            let ele=document.querySelector(`#${gantEleId} .ant-table-body`);\r\n            if(ele){\r\n                ele.removeEventListener(\"scroll\",debouncePutArrows);\r\n            }\r\n        }\r\n    },[debouncePutArrows]);\r\n\r\n    useEffect(()=>{\r\n        debouncePutArrows();\r\n    },[props.layoutArrows, debouncePutArrows]);\r\n\r\n\r\n    \r\n        \r\n\r\n    if(!props.ds || !props.ds[0] || !props.colKeys || !props.colKeys[0] || !props.arrows){\r\n        return null;\r\n    }\r\n\r\n    //动态计算列配置信息\r\n    let colsConfig=getDynaCols({data:props.ds, colKeys:props.colKeys, winW:props.winW});\r\n    \r\n    //滚动高度：该配置如果省略，即表格不纵向滚动，则表格布局会发生变化，一些dom元素取不到，不能完成箭头定位\r\n    let graphH={y:400};\r\n    if(props.maxh){\r\n        graphH={y:props.maxh};\r\n    }\r\n    \r\n    // console.log(\"ds\",props.ds);\r\n\r\n    return (<React.Fragment key='gantconatiner'>\r\n        {/* 表格部分 */}\r\n        <Table id={gantEleId} tableLayout='fixed' size=\"small\" bordered={true} pagination={false} \r\n                scroll={{x:'max-content', ...graphH}} \r\n                dataSource={props.ds} \r\n                columns={colsConfig} />\r\n\r\n        {/* 连接线部分 */}\r\n        {\r\n            arrows.map((each,ind)=>(\r\n                <React.Fragment key={'arrow-'+ind}>\r\n                    <div key={'arrow-st-'+ind} css={{...joinLineStyle, ...each.st}}></div>\r\n                    <div key={'arrow-end-'+ind} css={{...joinLineStyle, ...each.end}}></div>\r\n                    <div key={'arrow-join1-'+ind} css={{...joinLineStyle, ...each.join1}}></div>\r\n                    <div key={'arrow-join2-'+ind} css={{...joinLineStyle, ...each.join2}}></div>\r\n                    {/* <div key={'arrow-coner1-'+ind} css={{...joinLineStyle, ...each.coner1}}></div>\r\n                    <div key={'arrow-coner2-'+ind} css={{...joinLineStyle, ...each.coner2}}></div> */}\r\n                    <RightOutlined key={'arrow-head-'+ind} css={{...joinArrowStyle, ...each.head}}/>\r\n                </React.Fragment>\r\n            ))\r\n        } \r\n    </React.Fragment>);\r\n    \r\n}\r\n\r\nconst getDynaCols2=()=>{\r\n    return [\r\n        {\r\n            title:'aaaa',\r\n            key:'task',\r\n            dataIndex:'task',\r\n        },\r\n        {\r\n            title:'aaaa',\r\n            key:'d1',\r\n        }\r\n    ];\r\n}\r\n\r\n/**\r\n * 根据数据和列名，动态生成columns对象\r\n */\r\nconst getDynaCols=createSelector(\r\n    info=>info.data,\r\n    info=>info.colKeys,\r\n    info=>info.winW,\r\n    (data,colKeys,winW)=>{\r\n        const columns = [];\r\n        let firstCol=null;\r\n        let currMonth=null;\r\n\r\n        colKeys.forEach((colKey,ind)=>{\r\n            //第一列任务名称\r\n            if(0===ind){\r\n                columns.push({\r\n                    title: colKey[1],\r\n                    dataIndex: colKey[0],\r\n                    key: colKey[0],\r\n                    align:'center',\r\n                    fixed:'left',\r\n                    width: (winW<=1920? 300 : 400), //400\r\n                    render: (text, row, index) => {\r\n                        // if(1<2){return '1';}\r\n                        const obj = {\r\n                            children:<>{text.map((line,ind)=>(<React.Fragment key={'f0-'+ind}>{(0<ind) && <br key={'br'+ind}/>}<span key={'task-'+ind}>{line}</span></React.Fragment>))}</>,\r\n                            props: {style:{textAlign:'left',}},\r\n                        };\r\n                        return obj;\r\n                    }\r\n                });\r\n                return;\r\n            }\r\n\r\n            //是否是今天、是否是休息日、是否是月首日\r\n            let dataCell=data[0][colKey[0]];\r\n            // let isCurrday=dataCell.isCurrDay;\r\n            // let isHoliday= dataCell.isHoliday;\r\n            // let isFirstDay= dataCell.isFirstDay;\r\n\r\n            \r\n            //添加各日期列的数据\r\n            let secondCol={\r\n                title:<>{colKey[1].map((line,titleind)=>(<React.Fragment key={'f-'+ind+'-'+titleind}>{(0<titleind) && <br key={'br'+ind}/>}<span key={'head-day-'+titleind}>{line}</span></React.Fragment>))}</>,\r\n                dataIndex: colKey[0],\r\n                key: colKey[0],\r\n                width:40,\r\n                align:'center',\r\n                onHeaderCell:()=>{\r\n                    const ret={style:{padding:'0px',}};\r\n                    if(dataCell.headerShouldShowSetCurrdayBg){\r\n                        ret.style.backgroundColor=colors.currday;\r\n                    }\r\n                    if(dataCell.headerShouldShowSetFirstDayBg){\r\n                        ret.style.backgroundColor=colors.firstDay;\r\n                    }\r\n                    if(dataCell.headerShouldShowSetHolidayBg){\r\n                        ret.style.backgroundColor=colors.holiday;\r\n                    }\r\n                    return ret;\r\n                },\r\n                render: (text, row, index) => {\r\n                    // if(1<2){return '1';}\r\n\r\n                    const ret={\r\n                        children:null,\r\n                        props:{\r\n                            colSpan:text.span,\r\n                            style:{padding:'0px',}\r\n                        }\r\n                    };\r\n                    \r\n\r\n                    //不同日期类型对应不同背景色\r\n                    if(text.shouldSetCurrDayBg){\r\n                        // if(text.percentBg){\r\n                        //     ret.props.style.backgroundImage=`linear-gradient(${colors.currday},${colors.currday})`;\r\n                        //     ret.props.style.backgroundPosition=`${text.percentBg[0]}% 0px`;\r\n                        //     ret.props.style.backgroundSize=`${text.percentBg[1]}% 100%`;\r\n                        //     ret.props.style.backgroundRepeat=\"no-repeat\";\r\n                        // }else{\r\n                            ret.props.style.backgroundColor=colors.currday;\r\n                        // }\r\n                    }\r\n\r\n                    if(text.shouldSetHolidayBg){\r\n                        ret.props.style.backgroundColor=colors.holiday;\r\n                    }\r\n\r\n                    if(text.shouldSetFirstDayBg){\r\n                        ret.props.style.backgroundColor=colors.firstDay;\r\n                    }\r\n                    if(text.shouldShowPercentBg){\r\n                        let allBgStyle={\r\n                            im:[],\r\n                            pos:[],\r\n                            size:[],\r\n                            repeat:[],\r\n                        };\r\n                        text.percentBg.forEach(eachbg=>{\r\n                            let color=(eachbg.isHoliday?colors.holiday:(eachbg.isFirstDay?colors.firstDay:colors.currday));\r\n                            allBgStyle.im.push(`linear-gradient(${color},${color})`);\r\n                            allBgStyle.pos.push(`${eachbg.st}% 0px`);\r\n                            allBgStyle.size.push(`${eachbg.wid}% 100%`);\r\n                            allBgStyle.repeat.push(\"no-repeat\");\r\n                        });\r\n\r\n                        ret.props.style.backgroundImage=allBgStyle.im.join(\", \");\r\n                        ret.props.style.backgroundPosition=allBgStyle.pos.join(\", \");\r\n                        ret.props.style.backgroundSize=allBgStyle.size.join(\", \");\r\n                        ret.props.style.backgroundRepeat=allBgStyle.repeat.join(\", \");\r\n                    }\r\n\r\n               \r\n                    //进度图\r\n                    if(text.hasProg){\r\n                        ret.children=(\r\n                            <Popover title={<>\r\n                                {\"success\"===text.progSt && <div css={popoverStyle[text.progSt]}>已完成</div>}\r\n                                {\"exception\"===text.progSt && <div css={popoverStyle[text.progSt]}>已超期，完成 {text.prog}%</div>}\r\n                                {\"active\"===text.progSt && <div css={popoverStyle[text.progSt]}>进行中，完成 {text.prog}%</div>}\r\n                            </>} content={<>\r\n                                {!Array.isArray(text.msg) &&　<div>{text.msg}</div>}\r\n                                {Array.isArray(text.msg) &&　text.msg.map((msgitem,ind)=>(\r\n                                    <span key={'progmsgs-'+ind} css={msgitem.strong ? popoverStyle.highlightTxt : {}}>{msgitem.txt}</span>\r\n                                ))}                               \r\n                            </>}  trigger=\"hover\">\r\n                                <Progress disabled percent={text.prog}  trailColor={colors.progTrail} showInfo={false} status={text.progSt}  />\r\n                            </Popover>\r\n                        );\r\n                    }\r\n                    \r\n                    return ret;\r\n                }\r\n            }\r\n\r\n\r\n            //第一行标题的处理\r\n            //与上条记录同月就追加\r\n            const month=colKey[2][0]+\"-\"+colKey[2][1];\r\n            if(currMonth===month){\r\n                firstCol.children.push(secondCol);\r\n                return;\r\n            }\r\n            //否则说新建\r\n            currMonth=month;\r\n            firstCol={\r\n                title:month,\r\n                align:'center',\r\n                children:[\r\n                    secondCol\r\n                ]\r\n            };\r\n            columns.push(firstCol);\r\n        });\r\n\r\n\r\n        return columns;\r\n    }\r\n);\r\n\r\nconst popoverStyle={\r\n    success: {color:'green',textAlign:'center'},\r\n    exception:{color:'red',textAlign:'center'},\r\n    active:{color:'#1890ff',textAlign:'center'},\r\n\r\n    highlightTxt: {fontWeight:'bolder',display:'inline-block',marginLeft:5, marginRight:5,},\r\n}\r\n\r\nconst joinLineStyle={\r\n    position:'fixed',\r\n    width:'0px',\r\n    height:'0px',\r\n    backgroundColor:'transparent', \r\n    border:'0px solid gray',\r\n    zIndex:1\r\n};\r\n\r\nconst joinArrowStyle={\r\n    position:'fixed',\r\n    backgroundColor:'transparent',\r\n    zIndex:1, \r\n    fontSize:'12px'\r\n};\r\n\r\n//各种颜色：今天的背景色、休息日的背景色、连接线的颜色等\r\nconst colors={\r\n    progTrail:'#DDD',\r\n    firstDay:'#fcffe6',//'green',\r\n    currday:'#ffe7ba',  //'#ffe7ba';\r\n    holiday:'#f9f9f9',\r\n    joinLine:'#fa8c16',//'#fa8c16',//'orange',//'#FCA236',//'grey',//'gray',//\"red\",\r\n};\r\n\r\n\r\nconst debounceInterval=500;\r\n\r\nexport default GantChart;","D:\\ws_front\\gmap-ui\\src\\service\\editorSvc.js",[],{"ruleId":"398","replacedBy":"399"},{"ruleId":"400","replacedBy":"401"},{"ruleId":"402","severity":1,"message":"403","line":4,"column":8,"nodeType":"404","messageId":"405","endLine":4,"endColumn":12},{"ruleId":"402","severity":1,"message":"406","line":31,"column":15,"nodeType":"404","messageId":"405","endLine":31,"endColumn":18},{"ruleId":"407","severity":1,"message":"408","line":420,"column":1,"nodeType":"409","endLine":420,"endColumn":32},{"ruleId":"407","severity":1,"message":"410","line":5,"column":1,"nodeType":"409","endLine":5,"endColumn":27},{"ruleId":"402","severity":1,"message":"411","line":73,"column":5,"nodeType":"404","messageId":"405","endLine":73,"endColumn":10},{"ruleId":"402","severity":1,"message":"412","line":74,"column":5,"nodeType":"404","messageId":"405","endLine":74,"endColumn":12},{"ruleId":"402","severity":1,"message":"413","line":75,"column":5,"nodeType":"404","messageId":"405","endLine":75,"endColumn":14},{"ruleId":"414","severity":1,"message":"415","line":83,"column":16,"nodeType":"416","messageId":"417","endLine":83,"endColumn":49},{"ruleId":"402","severity":1,"message":"418","line":88,"column":5,"nodeType":"404","messageId":"405","endLine":88,"endColumn":22},{"ruleId":"402","severity":1,"message":"419","line":30,"column":7,"nodeType":"404","messageId":"405","endLine":30,"endColumn":21},{"ruleId":"402","severity":1,"message":"420","line":4,"column":12,"nodeType":"404","messageId":"405","endLine":4,"endColumn":33},{"ruleId":"402","severity":1,"message":"421","line":695,"column":19,"nodeType":"404","messageId":"405","endLine":695,"endColumn":27},{"ruleId":"402","severity":1,"message":"422","line":698,"column":15,"nodeType":"404","messageId":"405","endLine":698,"endColumn":23},{"ruleId":"407","severity":1,"message":"408","line":1331,"column":1,"nodeType":"409","endLine":1346,"endColumn":3},{"ruleId":"423","severity":1,"message":"424","line":144,"column":21,"nodeType":"425","messageId":"426","endLine":144,"endColumn":77},{"ruleId":"423","severity":1,"message":"424","line":147,"column":21,"nodeType":"425","messageId":"426","endLine":147,"endColumn":63},{"ruleId":"423","severity":1,"message":"424","line":165,"column":21,"nodeType":"425","messageId":"426","endLine":165,"endColumn":44},{"ruleId":"423","severity":1,"message":"424","line":180,"column":17,"nodeType":"425","messageId":"426","endLine":180,"endColumn":59},{"ruleId":"407","severity":1,"message":"408","line":477,"column":1,"nodeType":"409","endLine":480,"endColumn":3},{"ruleId":"407","severity":1,"message":"408","line":59,"column":1,"nodeType":"409","endLine":59,"endColumn":114},{"ruleId":"402","severity":1,"message":"427","line":17,"column":13,"nodeType":"404","messageId":"405","endLine":17,"endColumn":19},{"ruleId":"402","severity":1,"message":"428","line":18,"column":9,"nodeType":"404","messageId":"405","endLine":18,"endColumn":16},{"ruleId":"429","severity":1,"message":"430","line":167,"column":7,"nodeType":"431","endLine":167,"endColumn":40,"suggestions":"432"},{"ruleId":"429","severity":1,"message":"430","line":182,"column":7,"nodeType":"431","endLine":182,"endColumn":36,"suggestions":"433"},{"ruleId":"429","severity":1,"message":"430","line":198,"column":7,"nodeType":"431","endLine":198,"endColumn":48,"suggestions":"434"},{"ruleId":"429","severity":1,"message":"430","line":209,"column":7,"nodeType":"431","endLine":209,"endColumn":40,"suggestions":"435"},{"ruleId":"402","severity":1,"message":"436","line":3,"column":10,"nodeType":"404","messageId":"405","endLine":3,"endColumn":16},{"ruleId":"402","severity":1,"message":"437","line":3,"column":20,"nodeType":"404","messageId":"405","endLine":3,"endColumn":24},{"ruleId":"402","severity":1,"message":"438","line":3,"column":33,"nodeType":"404","messageId":"405","endLine":3,"endColumn":38},{"ruleId":"402","severity":1,"message":"439","line":3,"column":40,"nodeType":"404","messageId":"405","endLine":3,"endColumn":47},{"ruleId":"402","severity":1,"message":"440","line":3,"column":49,"nodeType":"404","messageId":"405","endLine":3,"endColumn":55},{"ruleId":"402","severity":1,"message":"441","line":3,"column":57,"nodeType":"404","messageId":"405","endLine":3,"endColumn":64},{"ruleId":"402","severity":1,"message":"442","line":4,"column":8,"nodeType":"404","messageId":"405","endLine":4,"endColumn":18},{"ruleId":"402","severity":1,"message":"428","line":6,"column":9,"nodeType":"404","messageId":"405","endLine":6,"endColumn":16},{"ruleId":"402","severity":1,"message":"443","line":3,"column":24,"nodeType":"404","messageId":"405","endLine":3,"endColumn":36},{"ruleId":"402","severity":1,"message":"427","line":4,"column":13,"nodeType":"404","messageId":"405","endLine":4,"endColumn":19},{"ruleId":"402","severity":1,"message":"444","line":5,"column":10,"nodeType":"404","messageId":"405","endLine":5,"endColumn":30},{"ruleId":"402","severity":1,"message":"445","line":5,"column":46,"nodeType":"404","messageId":"405","endLine":5,"endColumn":58},{"ruleId":"402","severity":1,"message":"446","line":5,"column":59,"nodeType":"404","messageId":"405","endLine":5,"endColumn":73},{"ruleId":"402","severity":1,"message":"447","line":6,"column":8,"nodeType":"404","messageId":"405","endLine":6,"endColumn":11},{"ruleId":"402","severity":1,"message":"428","line":7,"column":9,"nodeType":"404","messageId":"405","endLine":7,"endColumn":16},{"ruleId":"429","severity":1,"message":"430","line":38,"column":7,"nodeType":"431","endLine":38,"endColumn":19,"suggestions":"448"},{"ruleId":"402","severity":1,"message":"436","line":3,"column":10,"nodeType":"404","messageId":"405","endLine":3,"endColumn":16},{"ruleId":"402","severity":1,"message":"437","line":3,"column":20,"nodeType":"404","messageId":"405","endLine":3,"endColumn":24},{"ruleId":"402","severity":1,"message":"438","line":3,"column":33,"nodeType":"404","messageId":"405","endLine":3,"endColumn":38},{"ruleId":"402","severity":1,"message":"439","line":3,"column":40,"nodeType":"404","messageId":"405","endLine":3,"endColumn":47},{"ruleId":"402","severity":1,"message":"440","line":3,"column":49,"nodeType":"404","messageId":"405","endLine":3,"endColumn":55},{"ruleId":"402","severity":1,"message":"441","line":3,"column":57,"nodeType":"404","messageId":"405","endLine":3,"endColumn":64},{"ruleId":"402","severity":1,"message":"449","line":3,"column":65,"nodeType":"404","messageId":"405","endLine":3,"endColumn":72},{"ruleId":"402","severity":1,"message":"450","line":3,"column":81,"nodeType":"404","messageId":"405","endLine":3,"endColumn":87},{"ruleId":"402","severity":1,"message":"428","line":5,"column":9,"nodeType":"404","messageId":"405","endLine":5,"endColumn":16},{"ruleId":"402","severity":1,"message":"451","line":2,"column":41,"nodeType":"404","messageId":"405","endLine":2,"endColumn":47},{"ruleId":"402","severity":1,"message":"452","line":2,"column":49,"nodeType":"404","messageId":"405","endLine":2,"endColumn":57},{"ruleId":"402","severity":1,"message":"436","line":3,"column":10,"nodeType":"404","messageId":"405","endLine":3,"endColumn":16},{"ruleId":"402","severity":1,"message":"453","line":3,"column":26,"nodeType":"404","messageId":"405","endLine":3,"endColumn":31},{"ruleId":"402","severity":1,"message":"438","line":3,"column":33,"nodeType":"404","messageId":"405","endLine":3,"endColumn":38},{"ruleId":"402","severity":1,"message":"439","line":3,"column":40,"nodeType":"404","messageId":"405","endLine":3,"endColumn":47},{"ruleId":"402","severity":1,"message":"441","line":3,"column":57,"nodeType":"404","messageId":"405","endLine":3,"endColumn":64},{"ruleId":"402","severity":1,"message":"454","line":3,"column":65,"nodeType":"404","messageId":"405","endLine":3,"endColumn":69},{"ruleId":"402","severity":1,"message":"455","line":4,"column":49,"nodeType":"404","messageId":"405","endLine":4,"endColumn":61},{"ruleId":"402","severity":1,"message":"456","line":4,"column":62,"nodeType":"404","messageId":"405","endLine":4,"endColumn":74},{"ruleId":"402","severity":1,"message":"457","line":4,"column":96,"nodeType":"404","messageId":"405","endLine":4,"endColumn":111},{"ruleId":"402","severity":1,"message":"458","line":4,"column":112,"nodeType":"404","messageId":"405","endLine":4,"endColumn":128},{"ruleId":"402","severity":1,"message":"459","line":4,"column":142,"nodeType":"404","messageId":"405","endLine":4,"endColumn":154},{"ruleId":"402","severity":1,"message":"460","line":4,"column":155,"nodeType":"404","messageId":"405","endLine":4,"endColumn":172},{"ruleId":"402","severity":1,"message":"461","line":4,"column":173,"nodeType":"404","messageId":"405","endLine":4,"endColumn":185},{"ruleId":"402","severity":1,"message":"462","line":4,"column":186,"nodeType":"404","messageId":"405","endLine":4,"endColumn":205},{"ruleId":"402","severity":1,"message":"463","line":4,"column":206,"nodeType":"404","messageId":"405","endLine":4,"endColumn":219},{"ruleId":"402","severity":1,"message":"464","line":4,"column":220,"nodeType":"404","messageId":"405","endLine":4,"endColumn":233},{"ruleId":"402","severity":1,"message":"465","line":5,"column":9,"nodeType":"404","messageId":"405","endLine":5,"endColumn":23},{"ruleId":"402","severity":1,"message":"428","line":9,"column":9,"nodeType":"404","messageId":"405","endLine":9,"endColumn":16},{"ruleId":"402","severity":1,"message":"447","line":11,"column":8,"nodeType":"404","messageId":"405","endLine":11,"endColumn":11},{"ruleId":"402","severity":1,"message":"466","line":24,"column":12,"nodeType":"404","messageId":"405","endLine":24,"endColumn":16},{"ruleId":"402","severity":1,"message":"467","line":2,"column":17,"nodeType":"404","messageId":"405","endLine":2,"endColumn":26},{"ruleId":"402","severity":1,"message":"451","line":2,"column":28,"nodeType":"404","messageId":"405","endLine":2,"endColumn":34},{"ruleId":"402","severity":1,"message":"442","line":6,"column":8,"nodeType":"404","messageId":"405","endLine":6,"endColumn":18},{"ruleId":"402","severity":1,"message":"428","line":10,"column":9,"nodeType":"404","messageId":"405","endLine":10,"endColumn":16},{"ruleId":"402","severity":1,"message":"428","line":7,"column":9,"nodeType":"404","messageId":"405","endLine":7,"endColumn":16},{"ruleId":"429","severity":1,"message":"468","line":47,"column":7,"nodeType":"431","endLine":47,"endColumn":22,"suggestions":"469"},{"ruleId":"429","severity":1,"message":"468","line":55,"column":7,"nodeType":"431","endLine":55,"endColumn":21,"suggestions":"470"},{"ruleId":"402","severity":1,"message":"428","line":7,"column":9,"nodeType":"404","messageId":"405","endLine":7,"endColumn":16},{"ruleId":"402","severity":1,"message":"471","line":10,"column":17,"nodeType":"404","messageId":"405","endLine":10,"endColumn":24},{"ruleId":"402","severity":1,"message":"472","line":3,"column":17,"nodeType":"404","messageId":"405","endLine":3,"endColumn":25},{"ruleId":"402","severity":1,"message":"428","line":6,"column":9,"nodeType":"404","messageId":"405","endLine":6,"endColumn":16},{"ruleId":"402","severity":1,"message":"428","line":6,"column":9,"nodeType":"404","messageId":"405","endLine":6,"endColumn":16},{"ruleId":"402","severity":1,"message":"451","line":2,"column":41,"nodeType":"404","messageId":"405","endLine":2,"endColumn":47},{"ruleId":"402","severity":1,"message":"436","line":3,"column":10,"nodeType":"404","messageId":"405","endLine":3,"endColumn":16},{"ruleId":"402","severity":1,"message":"438","line":3,"column":18,"nodeType":"404","messageId":"405","endLine":3,"endColumn":23},{"ruleId":"402","severity":1,"message":"437","line":3,"column":25,"nodeType":"404","messageId":"405","endLine":3,"endColumn":29},{"ruleId":"402","severity":1,"message":"473","line":3,"column":38,"nodeType":"404","messageId":"405","endLine":3,"endColumn":42},{"ruleId":"402","severity":1,"message":"441","line":3,"column":61,"nodeType":"404","messageId":"405","endLine":3,"endColumn":68},{"ruleId":"402","severity":1,"message":"449","line":3,"column":70,"nodeType":"404","messageId":"405","endLine":3,"endColumn":77},{"ruleId":"402","severity":1,"message":"474","line":4,"column":27,"nodeType":"404","messageId":"405","endLine":4,"endColumn":45},{"ruleId":"402","severity":1,"message":"475","line":247,"column":7,"nodeType":"404","messageId":"405","endLine":247,"endColumn":25},{"ruleId":"402","severity":1,"message":"436","line":3,"column":10,"nodeType":"404","messageId":"405","endLine":3,"endColumn":16},{"ruleId":"402","severity":1,"message":"438","line":3,"column":18,"nodeType":"404","messageId":"405","endLine":3,"endColumn":23},{"ruleId":"402","severity":1,"message":"473","line":3,"column":38,"nodeType":"404","messageId":"405","endLine":3,"endColumn":42},{"ruleId":"402","severity":1,"message":"439","line":3,"column":44,"nodeType":"404","messageId":"405","endLine":3,"endColumn":51},{"ruleId":"402","severity":1,"message":"441","line":3,"column":61,"nodeType":"404","messageId":"405","endLine":3,"endColumn":68},{"ruleId":"402","severity":1,"message":"449","line":3,"column":70,"nodeType":"404","messageId":"405","endLine":3,"endColumn":77},{"ruleId":"402","severity":1,"message":"476","line":2,"column":9,"nodeType":"404","messageId":"405","endLine":2,"endColumn":15},{"ruleId":"402","severity":1,"message":"477","line":3,"column":41,"nodeType":"404","messageId":"405","endLine":3,"endColumn":48},{"ruleId":"402","severity":1,"message":"436","line":4,"column":10,"nodeType":"404","messageId":"405","endLine":4,"endColumn":16},{"ruleId":"402","severity":1,"message":"438","line":4,"column":18,"nodeType":"404","messageId":"405","endLine":4,"endColumn":23},{"ruleId":"402","severity":1,"message":"437","line":4,"column":25,"nodeType":"404","messageId":"405","endLine":4,"endColumn":29},{"ruleId":"402","severity":1,"message":"473","line":4,"column":38,"nodeType":"404","messageId":"405","endLine":4,"endColumn":42},{"ruleId":"402","severity":1,"message":"439","line":4,"column":44,"nodeType":"404","messageId":"405","endLine":4,"endColumn":51},{"ruleId":"402","severity":1,"message":"449","line":4,"column":70,"nodeType":"404","messageId":"405","endLine":4,"endColumn":77},{"ruleId":"402","severity":1,"message":"478","line":4,"column":78,"nodeType":"404","messageId":"405","endLine":4,"endColumn":88},{"ruleId":"402","severity":1,"message":"479","line":17,"column":12,"nodeType":"404","messageId":"405","endLine":17,"endColumn":36},{"ruleId":"429","severity":1,"message":"480","line":42,"column":7,"nodeType":"431","endLine":42,"endColumn":25,"suggestions":"481"},{"ruleId":"402","severity":1,"message":"482","line":142,"column":7,"nodeType":"404","messageId":"405","endLine":142,"endColumn":32},{"ruleId":"402","severity":1,"message":"483","line":2,"column":17,"nodeType":"404","messageId":"405","endLine":2,"endColumn":28},{"ruleId":"402","severity":1,"message":"467","line":2,"column":30,"nodeType":"404","messageId":"405","endLine":2,"endColumn":39},{"ruleId":"402","severity":1,"message":"451","line":2,"column":41,"nodeType":"404","messageId":"405","endLine":2,"endColumn":47},{"ruleId":"402","severity":1,"message":"452","line":2,"column":49,"nodeType":"404","messageId":"405","endLine":2,"endColumn":57},{"ruleId":"402","severity":1,"message":"436","line":3,"column":10,"nodeType":"404","messageId":"405","endLine":3,"endColumn":16},{"ruleId":"402","severity":1,"message":"438","line":3,"column":18,"nodeType":"404","messageId":"405","endLine":3,"endColumn":23},{"ruleId":"402","severity":1,"message":"437","line":3,"column":25,"nodeType":"404","messageId":"405","endLine":3,"endColumn":29},{"ruleId":"402","severity":1,"message":"473","line":3,"column":38,"nodeType":"404","messageId":"405","endLine":3,"endColumn":42},{"ruleId":"402","severity":1,"message":"439","line":3,"column":44,"nodeType":"404","messageId":"405","endLine":3,"endColumn":51},{"ruleId":"402","severity":1,"message":"440","line":3,"column":53,"nodeType":"404","messageId":"405","endLine":3,"endColumn":59},{"ruleId":"402","severity":1,"message":"441","line":3,"column":61,"nodeType":"404","messageId":"405","endLine":3,"endColumn":68},{"ruleId":"402","severity":1,"message":"449","line":3,"column":70,"nodeType":"404","messageId":"405","endLine":3,"endColumn":77},{"ruleId":"402","severity":1,"message":"457","line":4,"column":10,"nodeType":"404","messageId":"405","endLine":4,"endColumn":25},{"ruleId":"402","severity":1,"message":"474","line":4,"column":27,"nodeType":"404","messageId":"405","endLine":4,"endColumn":45},{"ruleId":"402","severity":1,"message":"484","line":4,"column":47,"nodeType":"404","messageId":"405","endLine":4,"endColumn":69},{"ruleId":"402","severity":1,"message":"485","line":4,"column":70,"nodeType":"404","messageId":"405","endLine":4,"endColumn":86},{"ruleId":"402","severity":1,"message":"486","line":4,"column":87,"nodeType":"404","messageId":"405","endLine":4,"endColumn":99},{"ruleId":"402","severity":1,"message":"487","line":5,"column":8,"nodeType":"404","messageId":"405","endLine":5,"endColumn":14},{"ruleId":"402","severity":1,"message":"488","line":6,"column":23,"nodeType":"404","messageId":"405","endLine":6,"endColumn":38},{"ruleId":"402","severity":1,"message":"467","line":2,"column":30,"nodeType":"404","messageId":"405","endLine":2,"endColumn":39},{"ruleId":"402","severity":1,"message":"451","line":2,"column":41,"nodeType":"404","messageId":"405","endLine":2,"endColumn":47},{"ruleId":"402","severity":1,"message":"436","line":3,"column":10,"nodeType":"404","messageId":"405","endLine":3,"endColumn":16},{"ruleId":"402","severity":1,"message":"438","line":3,"column":18,"nodeType":"404","messageId":"405","endLine":3,"endColumn":23},{"ruleId":"402","severity":1,"message":"437","line":3,"column":25,"nodeType":"404","messageId":"405","endLine":3,"endColumn":29},{"ruleId":"402","severity":1,"message":"473","line":3,"column":38,"nodeType":"404","messageId":"405","endLine":3,"endColumn":42},{"ruleId":"402","severity":1,"message":"439","line":3,"column":44,"nodeType":"404","messageId":"405","endLine":3,"endColumn":51},{"ruleId":"402","severity":1,"message":"440","line":3,"column":53,"nodeType":"404","messageId":"405","endLine":3,"endColumn":59},{"ruleId":"402","severity":1,"message":"441","line":3,"column":61,"nodeType":"404","messageId":"405","endLine":3,"endColumn":68},{"ruleId":"402","severity":1,"message":"449","line":3,"column":70,"nodeType":"404","messageId":"405","endLine":3,"endColumn":77},{"ruleId":"402","severity":1,"message":"457","line":4,"column":10,"nodeType":"404","messageId":"405","endLine":4,"endColumn":25},{"ruleId":"402","severity":1,"message":"474","line":4,"column":27,"nodeType":"404","messageId":"405","endLine":4,"endColumn":45},{"ruleId":"402","severity":1,"message":"484","line":4,"column":47,"nodeType":"404","messageId":"405","endLine":4,"endColumn":69},{"ruleId":"402","severity":1,"message":"485","line":4,"column":70,"nodeType":"404","messageId":"405","endLine":4,"endColumn":86},{"ruleId":"402","severity":1,"message":"486","line":4,"column":87,"nodeType":"404","messageId":"405","endLine":4,"endColumn":99},{"ruleId":"402","severity":1,"message":"487","line":5,"column":8,"nodeType":"404","messageId":"405","endLine":5,"endColumn":14},{"ruleId":"402","severity":1,"message":"489","line":6,"column":10,"nodeType":"404","messageId":"405","endLine":6,"endColumn":22},{"ruleId":"429","severity":1,"message":"480","line":20,"column":7,"nodeType":"431","endLine":20,"endColumn":26,"suggestions":"490"},{"ruleId":"402","severity":1,"message":"436","line":3,"column":10,"nodeType":"404","messageId":"405","endLine":3,"endColumn":16},{"ruleId":"402","severity":1,"message":"437","line":3,"column":25,"nodeType":"404","messageId":"405","endLine":3,"endColumn":29},{"ruleId":"402","severity":1,"message":"473","line":3,"column":38,"nodeType":"404","messageId":"405","endLine":3,"endColumn":42},{"ruleId":"402","severity":1,"message":"441","line":3,"column":61,"nodeType":"404","messageId":"405","endLine":3,"endColumn":68},{"ruleId":"402","severity":1,"message":"449","line":3,"column":70,"nodeType":"404","messageId":"405","endLine":3,"endColumn":77},{"ruleId":"402","severity":1,"message":"457","line":4,"column":10,"nodeType":"404","messageId":"405","endLine":4,"endColumn":25},{"ruleId":"402","severity":1,"message":"427","line":7,"column":13,"nodeType":"404","messageId":"405","endLine":7,"endColumn":19},{"ruleId":"429","severity":1,"message":"491","line":38,"column":7,"nodeType":"431","endLine":38,"endColumn":22,"suggestions":"492"},{"ruleId":"402","severity":1,"message":"452","line":2,"column":49,"nodeType":"404","messageId":"405","endLine":2,"endColumn":57},{"ruleId":"402","severity":1,"message":"436","line":3,"column":10,"nodeType":"404","messageId":"405","endLine":3,"endColumn":16},{"ruleId":"402","severity":1,"message":"438","line":3,"column":18,"nodeType":"404","messageId":"405","endLine":3,"endColumn":23},{"ruleId":"402","severity":1,"message":"437","line":3,"column":25,"nodeType":"404","messageId":"405","endLine":3,"endColumn":29},{"ruleId":"402","severity":1,"message":"453","line":3,"column":31,"nodeType":"404","messageId":"405","endLine":3,"endColumn":36},{"ruleId":"402","severity":1,"message":"473","line":3,"column":38,"nodeType":"404","messageId":"405","endLine":3,"endColumn":42},{"ruleId":"402","severity":1,"message":"439","line":3,"column":44,"nodeType":"404","messageId":"405","endLine":3,"endColumn":51},{"ruleId":"402","severity":1,"message":"440","line":3,"column":53,"nodeType":"404","messageId":"405","endLine":3,"endColumn":59},{"ruleId":"402","severity":1,"message":"441","line":3,"column":61,"nodeType":"404","messageId":"405","endLine":3,"endColumn":68},{"ruleId":"402","severity":1,"message":"449","line":3,"column":70,"nodeType":"404","messageId":"405","endLine":3,"endColumn":77},{"ruleId":"402","severity":1,"message":"457","line":4,"column":10,"nodeType":"404","messageId":"405","endLine":4,"endColumn":25},{"ruleId":"402","severity":1,"message":"474","line":4,"column":27,"nodeType":"404","messageId":"405","endLine":4,"endColumn":45},{"ruleId":"402","severity":1,"message":"484","line":4,"column":47,"nodeType":"404","messageId":"405","endLine":4,"endColumn":69},{"ruleId":"402","severity":1,"message":"485","line":4,"column":70,"nodeType":"404","messageId":"405","endLine":4,"endColumn":86},{"ruleId":"402","severity":1,"message":"486","line":4,"column":87,"nodeType":"404","messageId":"405","endLine":4,"endColumn":99},{"ruleId":"402","severity":1,"message":"493","line":2,"column":41,"nodeType":"404","messageId":"405","endLine":2,"endColumn":51},{"ruleId":"402","severity":1,"message":"451","line":2,"column":53,"nodeType":"404","messageId":"405","endLine":2,"endColumn":59},{"ruleId":"402","severity":1,"message":"454","line":3,"column":9,"nodeType":"404","messageId":"405","endLine":3,"endColumn":13},{"ruleId":"402","severity":1,"message":"428","line":4,"column":9,"nodeType":"404","messageId":"405","endLine":4,"endColumn":16},{"ruleId":"429","severity":1,"message":"494","line":16,"column":7,"nodeType":"431","endLine":16,"endColumn":9,"suggestions":"495"},{"ruleId":"402","severity":1,"message":"496","line":7,"column":8,"nodeType":"404","messageId":"405","endLine":7,"endColumn":17},{"ruleId":"429","severity":1,"message":"497","line":190,"column":7,"nodeType":"431","endLine":190,"endColumn":32,"suggestions":"498"},{"ruleId":"429","severity":1,"message":"499","line":229,"column":7,"nodeType":"431","endLine":229,"endColumn":26,"suggestions":"500"},{"ruleId":"402","severity":1,"message":"501","line":279,"column":7,"nodeType":"404","messageId":"405","endLine":279,"endColumn":19},"no-native-reassign",["502"],"no-negated-in-lhs",["503"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'reg' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","Assign array to a variable before exporting as module default","'toStr' is assigned a value but never used.","'fnToStr' is assigned a value but never used.","'isFnRegex' is assigned a value but never used.","no-new-func","The Function constructor is eval.","CallExpression","noFunctionConstructor","'GeneratorFunction' is assigned a value but never used.","'needPromiseReg' is assigned a value but never used.","'getCurrentWebContents' is assigned a value but never used.","'ltreeCnt' is assigned a value but never used.","'rtreeCnt' is assigned a value but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'uiUtil' is defined but never used.","'connect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useCallback has an unnecessary dependency: 'dispatcher'. Either exclude it or remove the dependency array. Outer scope values like 'dispatcher' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["504"],["505"],["506"],["507"],"'Layout' is defined but never used.","'Tabs' is defined but never used.","'Input' is defined but never used.","'message' is defined but never used.","'Button' is defined but never used.","'Divider' is defined but never used.","'PathSelect' is defined but never used.","'AutoComplete' is defined but never used.","'FileMarkdownOutlined' is defined but never used.","'HomeOutlined' is defined but never used.","'FolderOutlined' is defined but never used.","'api' is defined but never used.",["508"],"'Popover' is defined but never used.","'Avatar' is defined but never used.","'useRef' is defined but never used.","'useState' is defined but never used.","'Modal' is defined but never used.","'Spin' is defined but never used.","'FormOutlined' is defined but never used.","'LinkOutlined' is defined but never used.","'PictureOutlined' is defined but never used.","'FileTextOutlined' is defined but never used.","'BookOutlined' is defined but never used.","'FileImageOutlined' is defined but never used.","'ReadOutlined' is defined but never used.","'ClockCircleOutlined' is defined but never used.","'CloseOutlined' is defined but never used.","'CheckOutlined' is defined but never used.","'createSelector' is defined but never used.","'winW' is assigned a value but never used.","'useEffect' is defined but never used.","React Hook useEffect has a missing dependency: 'delayRelayoutArrows'. Either include it or remove the dependency array.",["509"],["510"],"'Content' is assigned a value but never used.","'Timeline' is defined but never used.","'Form' is defined but never used.","'FolderOpenOutlined' is defined but never used.","'getCodeEditorStyle' is assigned a value but never used.","'Global' is defined but never used.","'useMemo' is defined but never used.","'DatePicker' is defined but never used.","'datePickPopoverClassname' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["511"],"'getDatePickerPopoverStyle' is assigned a value but never used.","'useCallback' is defined but never used.","'QuestionCircleOutlined' is defined but never used.","'CalendarOutlined' is defined but never used.","'FileOutlined' is defined but never used.","'moment' is defined but never used.","'PhotoshopPicker' is defined but never used.","'CirclePicker' is defined but never used.",["512"],"React Hook useEffect has a missing dependency: 'onFocusEle'. Either include it or remove the dependency array.",["513"],"'useReducer' is defined but never used.","React Hook useCallback has a missing dependency: 'listWrapperId'. Either include it or remove the dependency array.",["514"],"'userEvent' is defined but never used.","React Hook useCallback has a missing dependency: 'gantEleId'. Either include it or remove the dependency array.",["515"],"React Hook useEffect has a missing dependency: 'gantEleId'. Either include it or remove the dependency array.",["516"],"'getDynaCols2' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"517","fix":"518"},{"desc":"519","fix":"520"},{"desc":"521","fix":"522"},{"desc":"523","fix":"524"},{"desc":"525","fix":"526"},{"desc":"527","fix":"528"},{"desc":"529","fix":"530"},{"desc":"531","fix":"532"},{"desc":"533","fix":"534"},{"desc":"535","fix":"536"},{"desc":"537","fix":"538"},{"desc":"539","fix":"540"},{"desc":"541","fix":"542"},"Update the dependencies array to be: [setNewMapDlgVisible]",{"range":"543","text":"544"},"Update the dependencies array to be: [setEditDlgState]",{"range":"545","text":"546"},"Update the dependencies array to be: [setEditDlgState, editTmpTxt]",{"range":"547","text":"548"},"Update the dependencies array to be: [setSelMapDlgVisible]",{"range":"549","text":"550"},"Update the dependencies array to be: []",{"range":"551","text":"552"},"Update the dependencies array to be: [delayRelayoutArrows, props.visible]",{"range":"553","text":"554"},"Update the dependencies array to be: [delayRelayoutArrows, resizeSymbol]",{"range":"555","text":"556"},"Update the dependencies array to be: [props, date]",{"range":"557","text":"558"},"Update the dependencies array to be: [props, color]",{"range":"559","text":"560"},"Update the dependencies array to be: [onFocusEle, props.visible]",{"range":"561","text":"562"},"Update the dependencies array to be: [listWrapperId]",{"range":"563","text":"564"},"Update the dependencies array to be: [gantEleId, props.arrows]",{"range":"565","text":"566"},"Update the dependencies array to be: [debouncePutArrows, gantEleId]",{"range":"567","text":"568"},[4956,4989],"[setNewMapDlgVisible]",[5499,5528],"[setEditDlgState]",[6092,6133],"[setEditDlgState, editTmpTxt]",[6448,6481],"[setSelMapDlgVisible]",[1185,1197],"[]",[1343,1358],"[delayRelayoutArrows, props.visible]",[1505,1519],"[delayRelayoutArrows, resizeSymbol]",[1261,1279],"[props, date]",[725,744],"[props, color]",[1168,1183],"[onFocusEle, props.visible]",[563,565],"[listWrapperId]",[6135,6160],"[gantEleId, props.arrows]",[7328,7347],"[debouncePutArrows, gantEleId]"]