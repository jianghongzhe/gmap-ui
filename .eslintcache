[{"D:\\ws\\web\\gmap-ui\\src\\index.js":"1","D:\\ws\\web\\gmap-ui\\src\\serviceWorker.js":"2","D:\\ws\\web\\gmap-ui\\src\\App.js":"3","D:\\ws\\web\\gmap-ui\\src\\common\\gflow.js":"4","D:\\ws\\web\\gmap-ui\\src\\models\\index.js":"5","D:\\ws\\web\\gmap-ui\\src\\common\\gflowUtil.js":"6","D:\\ws\\web\\gmap-ui\\src\\common\\SagaPromiseMiddleWare.js":"7","D:\\ws\\web\\gmap-ui\\src\\models\\filesel.js":"8","D:\\ws\\web\\gmap-ui\\src\\models\\common.js":"9","D:\\ws\\web\\gmap-ui\\src\\models\\tabs.js":"10","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\index.js":"11","D:\\ws\\web\\gmap-ui\\src\\service\\generalSvc.js":"12","D:\\ws\\web\\gmap-ui\\src\\service\\api.js":"13","D:\\ws\\web\\gmap-ui\\src\\service\\mindMapValidateSvc.js":"14","D:\\ws\\web\\gmap-ui\\src\\service\\newMindmapSvc.js":"15","D:\\ws\\web\\gmap-ui\\src\\service\\mindmapSvc.js":"16","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\MapsViewer.js":"17","D:\\ws\\web\\gmap-ui\\src\\service\\expSvc.js":"18","D:\\ws\\web\\gmap-ui\\src\\service\\ganttSvc.js":"19","D:\\ws\\web\\gmap-ui\\src\\common\\keyDetector.js":"20","D:\\ws\\web\\gmap-ui\\src\\service\\screenShot.js":"21","D:\\ws\\web\\gmap-ui\\src\\common\\uiUtil.js":"22","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\RefViewer.js":"23","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\TimelineViewer.js":"24","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\ProgsViewer.js":"25","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\gantt\\GantDlg.js":"26","D:\\ws\\web\\gmap-ui\\src\\common\\dateUtil.js":"27","D:\\ws\\web\\gmap-ui\\src\\common\\markedHighlightUtil.js":"28","D:\\ws\\web\\gmap-ui\\src\\ui\\common\\specialDlg.js":"29","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\gantt\\GantChart.js":"30","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\GraphTabs.js":"31","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\RelaChartDlg.js":"32","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\Toolbar.js":"33","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\NewGraphDlg.js":"34","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\EditGraphDlg.js":"35","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\Welcome.js":"36","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\OpenGraphDlg.js":"37","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\ConnectedPathSelect.js":"38","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\PathSelect.js":"39","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\edit\\ColorPickerDlg.js":"40","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\edit\\AdvColorPickerDlg.js":"41","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\edit\\Editor.js":"42","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\edit\\HelpDlg.js":"43","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\edit\\DateDlg.js":"44","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\edit\\InsertImgDlg.js":"45","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\RelaChart.js":"46","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\NewMindmap.js":"47","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\MindNode.js":"48","D:\\ws\\web\\gmap-ui\\src\\service\\editorSvc.js":"49"},{"size":690,"mtime":1614966526243,"results":"50","hashOfConfig":"51"},{"size":5226,"mtime":1583868911397,"results":"52","hashOfConfig":"51"},{"size":739,"mtime":1614967090387,"results":"53","hashOfConfig":"51"},{"size":15261,"mtime":1614966526243,"results":"54","hashOfConfig":"51"},{"size":111,"mtime":1614966526243,"results":"55","hashOfConfig":"51"},{"size":2786,"mtime":1614966526243,"results":"56","hashOfConfig":"51"},{"size":1357,"mtime":1614966526228,"results":"57","hashOfConfig":"51"},{"size":1174,"mtime":1614966526243,"results":"58","hashOfConfig":"51"},{"size":2598,"mtime":1614966526243,"results":"59","hashOfConfig":"51"},{"size":18015,"mtime":1614967090387,"results":"60","hashOfConfig":"51"},{"size":50,"mtime":1614966526259,"results":"61","hashOfConfig":"51"},{"size":562,"mtime":1614966526259,"results":"62","hashOfConfig":"51"},{"size":5065,"mtime":1623315978855,"results":"63","hashOfConfig":"51"},{"size":3458,"mtime":1614966526259,"results":"64","hashOfConfig":"51"},{"size":22263,"mtime":1623244665496,"results":"65","hashOfConfig":"51"},{"size":51555,"mtime":1623244665494,"results":"66","hashOfConfig":"51"},{"size":14432,"mtime":1623244665498,"results":"67","hashOfConfig":"51"},{"size":835,"mtime":1623244665492,"results":"68","hashOfConfig":"51"},{"size":18816,"mtime":1614966526259,"results":"69","hashOfConfig":"51"},{"size":5580,"mtime":1614967090387,"results":"70","hashOfConfig":"51"},{"size":8190,"mtime":1614966526259,"results":"71","hashOfConfig":"51"},{"size":927,"mtime":1614966526243,"results":"72","hashOfConfig":"51"},{"size":5662,"mtime":1623258087354,"results":"73","hashOfConfig":"51"},{"size":1564,"mtime":1614967090408,"results":"74","hashOfConfig":"51"},{"size":2156,"mtime":1614967090408,"results":"75","hashOfConfig":"51"},{"size":2706,"mtime":1614967090423,"results":"76","hashOfConfig":"51"},{"size":1756,"mtime":1614966526243,"results":"77","hashOfConfig":"51"},{"size":7263,"mtime":1623258363867,"results":"78","hashOfConfig":"51"},{"size":2040,"mtime":1614967090387,"results":"79","hashOfConfig":"51"},{"size":17947,"mtime":1614967090423,"results":"80","hashOfConfig":"51"},{"size":6968,"mtime":1623244665501,"results":"81","hashOfConfig":"51"},{"size":946,"mtime":1623244665505,"results":"82","hashOfConfig":"51"},{"size":6339,"mtime":1623244665507,"results":"83","hashOfConfig":"51"},{"size":4323,"mtime":1614967090408,"results":"84","hashOfConfig":"51"},{"size":10495,"mtime":1623244665499,"results":"85","hashOfConfig":"51"},{"size":3512,"mtime":1614967090408,"results":"86","hashOfConfig":"51"},{"size":1856,"mtime":1614967090408,"results":"87","hashOfConfig":"51"},{"size":736,"mtime":1614967090403,"results":"88","hashOfConfig":"51"},{"size":4232,"mtime":1614967090408,"results":"89","hashOfConfig":"51"},{"size":1509,"mtime":1614967090408,"results":"90","hashOfConfig":"51"},{"size":1297,"mtime":1614967090408,"results":"91","hashOfConfig":"51"},{"size":8261,"mtime":1623244665508,"results":"92","hashOfConfig":"51"},{"size":11605,"mtime":1623244665510,"results":"93","hashOfConfig":"51"},{"size":5855,"mtime":1614967090408,"results":"94","hashOfConfig":"51"},{"size":9691,"mtime":1614967090423,"results":"95","hashOfConfig":"51"},{"size":4422,"mtime":1623244665505,"results":"96","hashOfConfig":"51"},{"size":7185,"mtime":1614967090408,"results":"97","hashOfConfig":"51"},{"size":9946,"mtime":1623244665502,"results":"98","hashOfConfig":"51"},{"size":2461,"mtime":1614966526259,"results":"99","hashOfConfig":"51"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"rzi6eh",{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"102"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"102"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"102"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"102"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"102"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"102"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"102"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"102"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"102"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"102"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"102"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"102"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"102"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"102"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"102"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"102"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"102"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"102"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"102"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"102"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"102"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"102"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"102"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"102"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"102"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"102"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"102"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"102"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"102"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"102"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"102"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"102"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"D:\\ws\\web\\gmap-ui\\src\\index.js",[],["232","233"],"D:\\ws\\web\\gmap-ui\\src\\serviceWorker.js",[],"D:\\ws\\web\\gmap-ui\\src\\App.js",["234"],"/** @jsxImportSource @emotion/react */\r\nimport {Global } from '@emotion/react';\r\nimport React from 'react';\r\nimport logo from './logo.svg';\r\nimport { view as MapsViewer } from './ui/home';\r\nimport { ConfigProvider } from 'antd';\r\nimport zhCN from 'antd/es/locale/zh_CN';\r\nimport 'moment/locale/zh-cn';\r\nimport 'antd/dist/antd.css';\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <React.Fragment>\r\n            <Global styles={{\r\n                body: {\r\n                    margin: 0,\r\n                    backgroundColor: '#f0f2f5',\r\n                }\r\n            }}/>\r\n            <ConfigProvider locale={zhCN}>\r\n                <MapsViewer />\r\n            </ConfigProvider>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n","D:\\ws\\web\\gmap-ui\\src\\common\\gflow.js",["235","236"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport * as sagaEffects from 'redux-saga/effects';\r\nimport {Provider,connect as reduxConnect} from 'react-redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport SagaPromiseMiddleWare from './SagaPromiseMiddleWare';\r\nimport gflowUtil from './gflowUtil';\r\n\r\n\r\n/**\r\n * 类似dva的方式，简化redux-saga的开发：\r\n * 1、初始状态、reducer、saga配置在一起\r\n * 2、支持全局事件订阅\r\n */\r\nclass Gflow{\r\n    constructor(){\r\n        this.runTimes=0;            //计数器：用于判断run方法只能执行一次\r\n        this.initState={};          //初始状态\r\n        this.reducerItems={};       //子reducer\r\n        this.actionDispatcher={};   //action dispatvher\r\n        this.actionCreater={};      //action creater\r\n        this.subscriptionFuns=[];   //初始化事件，当根组件mount后才执行\r\n    }\r\n\r\n    /**\r\n     * 合并后的总的reducer\r\n     */\r\n    sumReducer=(state,action)=>{\r\n        //action type没有指定命名空间，不计算\r\n        const reg=/^[^/]+[/][^/]+$/;// eg. user/add\r\n        if(!gflowUtil.isModelActionType(action.type)){\r\n            return state;\r\n        }\r\n\r\n        //未找到对应的子reducer，不计算\r\n        let[ns,type]=action.type.split(\"/\");\r\n        if(!this.reducerItems[ns] || !this.reducerItems[ns][type]){\r\n            return state;\r\n        }\r\n\r\n        //用子reducer计算并把结果合并入总的state里\r\n        let partialState=this.reducerItems[ns][type](state[ns],action.payload);\r\n        let result={...state};\r\n        result[ns]=partialState;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 初始状态合并\r\n     */\r\n    combineState=(initState,model)=>{\r\n        let ns=model.namespace;\r\n        this.initState[ns]={...this.initState[ns], ...model.state};\r\n    }\r\n\r\n    /**\r\n     * 合并各子reducer\r\n     */\r\n    combineReducer=(model)=>{\r\n        let ns=model.namespace;\r\n        this.reducerItems[ns]={...this.reducerItems[ns], ...model.reducers};\r\n    }\r\n\r\n    /**\r\n     * 合并副作用\r\n     */\r\n    combineEffects=(sagaList,model)=>{\r\n        let sagaItems=[];\r\n        let ns=model.namespace;\r\n        const scope=this;\r\n        const baseEffectParam={\r\n            ...sagaEffects,                 //redux-saga自带的副作用\r\n            gcreater:scope.actionCreater,   //全局creater\r\n            creater:scope.actionCreater[ns],//当前模块的creater\r\n            ns: ns,\r\n            sel:defSelectCurrModelState.bind(this,ns),\r\n        };\r\n        \r\n\r\n        \r\n           \r\n\r\n\r\n        //循环每个副作用函数，并加入列表\r\n        model.effects.forEach(item=>{\r\n            //由于saga可以跨模块监听事件，所以如果key中自带命名空间，则直接使用，否则加入model自身的命名空间\r\n            let targetActionType=ns+\"/\"+item.k;\r\n            if(gflowUtil.isModelActionType(item.k)){\r\n                targetActionType=item.k;\r\n            }\r\n\r\n            //创建watcher，不使用takeEvery而使用take的原因是需要在调用worker时传递第二个参数（指定副作用操作符与promise的reolve、reject等）\r\n            let watcher=function*() {\r\n                while(true) {\r\n                    //侦听action事件\r\n                    const action = yield sagaEffects.take(targetActionType);\r\n\r\n                    //封装第二个参数\r\n                    let effectParam=baseEffectParam;\r\n                    if(item.prom){//action需要返回结果，则把resolve、reject加入其中\r\n                        effectParam={\r\n                            ...effectParam, \r\n                            res:        action.extras.res, \r\n                            rej:        action.extras.rej,\r\n                            resolve:    action.extras.res, \r\n                            reject:     action.extras.rej,\r\n                        };\r\n                    }\r\n\r\n                    //执行副作用\r\n                    // yield* model.effects[key](action.payload,effectParam);\r\n                    yield sagaEffects.fork(item.v,action.payload,effectParam);\r\n                }\r\n            };\r\n            //运行侦听器并加入列表\r\n            sagaItems.push(watcher());\r\n        });\r\n\r\n        //手动监控的函数\r\n        for(let key in model.watchers){\r\n            let effectParam=baseEffectParam;\r\n            sagaItems.push(model.watchers[key](effectParam));\r\n        }\r\n\r\n        //把列表中的副作用合并为一个，并加入总体列表中\r\n        sagaList.push(function*() {yield sagaEffects.all(sagaItems);}());\r\n    }\r\n\r\n    /**\r\n     * 提取actionCreater与actionDispatcher\r\n     */\r\n    extractActionCreatersAndActionDispatchers=(model)=>{\r\n        let ns=model.namespace;\r\n        // let reducersAndEffects={...model.reducers, ...model.effects};\r\n        for(let key in model.reducers){\r\n            let[targetNS,targetKey]= gflowUtil.addModelPrefix(key,ns).split(\"/\");//如果key中自带命名空间，则直接使用，否则加入model自身的命名空间\r\n            this.actionCreater[targetNS][targetKey]=defActionCreater.bind(this,targetNS,targetKey,false);\r\n            this.actionDispatcher[targetNS][targetKey]=defActionDispatcher.bind(this,this.store,targetNS,targetKey,false);\r\n        }\r\n        model.effects.forEach(item=>{\r\n            let[targetNS,targetKey]= gflowUtil.addModelPrefix(item.k,ns).split(\"/\");//如果key中自带命名空间，则直接使用，否则加入model自身的命名空间\r\n            this.actionCreater[targetNS][targetKey]=defActionCreater.bind(this,targetNS,targetKey,item.prom);\r\n            this.actionDispatcher[targetNS][targetKey]=defActionDispatcher.bind(this,this.store,targetNS,targetKey,item.prom);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 记录事件，待根组件mount后执行\r\n     */\r\n    regSubscriptionEvents=(model)=>{\r\n        let ns=model.namespace;\r\n        for(let key in model.subscriptions){\r\n            this.subscriptionFuns.push(\r\n                model.subscriptions[key].bind(\r\n                    this,\r\n                    {\r\n                        gdispatcher:this.actionDispatcher, \r\n                        dispatcher: this.actionDispatcher[ns],\r\n                    }\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * 整理effects的格式，把模块配置中不同的方式整理成同一格式，同时标记是否为promise类型\r\n     */\r\n    handleRegularEffects=(model)=>{\r\n        let effectList=[];\r\n        for(let key in model.effects){\r\n            //是生成器\r\n            if(gflowUtil.isGen(model.effects[key])){\r\n                effectList.push({\r\n                    k: key,\r\n                    v: model.effects[key],\r\n                    prom: gflowUtil.isPromiseActionType(key)\r\n                });\r\n                continue;\r\n            }\r\n\r\n            //是promise组\r\n            if(true===model.effects[key].promise){\r\n                for(let subKey in model.effects[key]){\r\n                    if(subKey==='promise'){continue;}\r\n                    if(gflowUtil.isGen(model.effects[key][subKey])){\r\n                        effectList.push({\r\n                            k: subKey,\r\n                            v: model.effects[key][subKey],\r\n                            prom: true\r\n                        });\r\n                    }\r\n                }\r\n                continue;\r\n            }\r\n\r\n            //是非promise组\r\n            if(false===model.effects[key].promise){\r\n                for(let subKey in model.effects[key]){\r\n                    if(subKey==='promise'){continue;}\r\n                    if(gflowUtil.isGen(model.effects[key][subKey])){\r\n                        effectList.push({\r\n                            k: subKey,\r\n                            v: model.effects[key][subKey],\r\n                            prom: false\r\n                        });\r\n                    }\r\n                }\r\n                continue;\r\n            }\r\n        }\r\n        model.effects=effectList;\r\n    }\r\n\r\n    /**\r\n     * 非空处理\r\n     */\r\n    makeNotEmpty=(models, extraMidlewares)=>{\r\n        if(!extraMidlewares){\r\n            extraMidlewares=[];\r\n        }\r\n        if(!models){\r\n            models=[];\r\n        }      \r\n        models.forEach(model => {\r\n            if(!model.namespace){\r\n                model.namespace=DEFAULT_NAMESPACE;//默认命名空间\r\n            }\r\n            if(!model.state){\r\n                model.state={};\r\n            }\r\n            if(!model.reducers){\r\n                model.reducers={};\r\n            }\r\n            if(!model.effects){\r\n                model.effects={};\r\n            }\r\n            if(!model.watchers){\r\n                model.watchers={};\r\n            }\r\n            if(!model.subscriptions){\r\n                model.subscriptions={};\r\n            }\r\n            if(!this.reducerItems[model.namespace]){\r\n                this.reducerItems[model.namespace]={};\r\n            }\r\n            if(!this.actionDispatcher[model.namespace]){\r\n                this.actionDispatcher[model.namespace]={};\r\n            }\r\n            if(!this.actionCreater[model.namespace]){\r\n                this.actionCreater[model.namespace]={};\r\n            }\r\n            if(!this.initState[model.namespace]){\r\n                this.initState[model.namespace]={};\r\n            }\r\n            this.handleRegularEffects(model);\r\n        });\r\n        return [models,extraMidlewares];\r\n    }\r\n\r\n    /**\r\n     * 初始化\r\n     * @param {*} models [\r\n     *      {\r\n     *          namespace: 'def',  //命名空间，可省略，省略后认为是def\r\n     *          state:{}    //初始状态\r\n     *          reducers:{//子reducer\r\n     *              add: (state, payload)=>newState\r\n     *          },\r\n     *          effects:{//副作用，名称以promise（忽略大小写）开头或结尾表示需要返回值（promise）\r\n     *              *add: (payload, {})=>void\r\n     *          },\r\n     *          subscriptions:{//订阅源\r\n     *              setup:({gdispatcher, dispatcher})=>{...}\r\n     *          }\r\n     *      }\r\n     * ]\r\n     * @param {*} extraMidlewares [mw1, mw2, ...] 额外的中间什\r\n     */\r\n    init=(models, extraMidlewares)=>{\r\n        //非空处理\r\n        let modelsAndMds=this.makeNotEmpty(models,extraMidlewares);\r\n        models=modelsAndMds[0];\r\n        extraMidlewares=modelsAndMds[1];\r\n\r\n        //合并state、reducer\r\n        models.forEach(model => {\r\n            this.combineState(this.initState,model);//合并初始state\r\n            this.combineReducer(model);//合并reducer\r\n        });\r\n        \r\n        //初始化中间件并生成store\r\n        const sagaMiddleware = createSagaMiddleware();\r\n        let middlewares=[SagaPromiseMiddleWare, sagaMiddleware, ...extraMidlewares];\r\n        this.store=createStore(\r\n            this.sumReducer,\r\n            this.initState,\r\n            applyMiddleware(...middlewares)\r\n        );\r\n\r\n        //根据model中reducer与effect的名字，提取成对应的action creater与action dispatcher\r\n        models.forEach(model => {\r\n            this.extractActionCreatersAndActionDispatchers(model);\r\n        });\r\n        this.actionDispatcher.dispatch=this.store.dispatch;//在封装的action dispatcher里加入原始的dispatch函数，以备特殊用途\r\n\r\n        //合并副作用处理函数并启动saga\r\n        let sagaList=[];\r\n        models.forEach(model => {\r\n            this.combineEffects(sagaList,model);//合并副作用\r\n        });        \r\n        let rootSaga=function*() {\r\n            yield sagaEffects.all(sagaList)\r\n        };\r\n        sagaMiddleware.run(rootSaga);\r\n\r\n        //记录事件源，待包装组件mount后执行\r\n        models.forEach(model => {\r\n            this.regSubscriptionEvents(model);\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * 开启程序：\r\n     * 1、创建store并设置初始状态\r\n     * 2、设置reducer\r\n     * 3、设置saga\r\n     * @param options {\r\n     *      rootEle:            ReactElement    //根react元素\r\n     *      domSelector:        \"#root\",        //可选：渲染位置的dom选择器，默认为 #root\r\n     *      models:             [m1, m2],       //可靠：所有model的数组\r\n     *      extraMiddlewares:    [mw1, mw2, ...] //可选：其他中间传的数组\r\n     * }\r\n     */\r\n    run=({rootEle, domSelector, models, extraMiddlewares=[],strict=false})=>{\r\n        //校验\r\n        ++this.runTimes;\r\n        if(1<this.runTimes){\r\n            throw new Error(\"只能执行一次run方法\");\r\n        }\r\n        if(!rootEle){\r\n            throw new Error(\"未提供根组件\");\r\n        }\r\n\r\n        //初始化\r\n        this.init(models, extraMiddlewares);\r\n\r\n        //渲染初始页面\r\n        ReactDOM.render( \r\n            <Provider store={this.store}>\r\n                <EventWrapperComponent subscriptionEvents={this.subscriptionFuns}>\r\n                    {\r\n                        true===strict ? <React.StrictMode>{rootEle}</React.StrictMode> : <>{rootEle}</>\r\n                    }\r\n                </EventWrapperComponent>\r\n            </Provider>, \r\n            document.querySelector(domSelector?domSelector:\"#root\")\r\n        );\r\n    }\r\n\r\n    /**\r\n     * 对mapState进行包装，注入dispatcher，让容器组件可调用this.props.dispatcher...\r\n     */\r\n    wrapMapState=(mapState)=>{\r\n        return (state,ownProps)=>{\r\n            let result=mapState(state,ownProps);\r\n            return {...result, dispatcher:this.actionDispatcher};\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 对redux的connect进行包装，把dispatcher传递到组件的props里\r\n     */\r\n    connect=(mapState,mapDispatch=null)=>{\r\n        if(!mapState){\r\n            mapState=()=>({});\r\n        }\r\n        if(!mapDispatch){\r\n            mapDispatch=()=>({});\r\n        }\r\n        let wrapper=this.wrapMapState(mapState);\r\n        return reduxConnect(wrapper,mapDispatch);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * 事件包装器，所有订阅事件在组件的componentDidMount里执行，以防止执行事件时根组件还未初始化\r\n */\r\nclass EventWrapperComponent extends React.Component{\r\n    componentDidMount(){\r\n        if(this.props.subscriptionEvents){\r\n            this.props.subscriptionEvents.forEach(event=>{\r\n                event();\r\n            });\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\n\r\n\r\nconst defActionCreater=(ns,key,isPromise,payload)=>({\r\n    type:       ns+\"/\"+key,\r\n    payload:    payload,\r\n    extras:     {promise:isPromise}\r\n});\r\nconst defActionDispatcher=(store,ns,key,isPromise,payload)=>(store.dispatch(defActionCreater(ns,key,isPromise,payload)));\r\nconst defSelectCurrModelState=(ns)=>sagaEffects.select(state=>state[ns]);\r\n\r\nconst DEFAULT_NAMESPACE=\"def\";\r\n\r\n\r\nconst inst=new Gflow();\r\nexport default {run: inst.run};//程序入口\r\nexport const dispatcher=inst.actionDispatcher;//action dispatcher，一般在容器组件里用\r\nexport const creater=inst.actionCreater;//action creater，一般在saga里用\r\nexport const connect=inst.connect;//对react-redux的connect方法的包装\r\nexport const join=gflowUtil.joinModNameAndActionType;","D:\\ws\\web\\gmap-ui\\src\\models\\index.js",["237"],"import m1 from './common';\r\nimport m2 from './filesel';\r\nimport m3 from './tabs';\r\n\r\nexport default [m1,m2,m3];","D:\\ws\\web\\gmap-ui\\src\\common\\gflowUtil.js",["238","239","240","241","242"],"/**\r\n * gflow相关工具\r\n */\r\n\r\n\r\n\r\n\r\nclass GflowUtil{\r\n    /**\r\n     * action type是否包含模块名\r\n     */\r\n    isModelActionType=(type)=>regWithModel.test(type);\r\n\r\n    /**\r\n     * action type是否不包含模块名\r\n     */\r\n    isNoModelActionType=(type)=>regNoModel.test(type);\r\n\r\n    /**\r\n     * 对action type增加模块前缀，如果已经有了，则不变\r\n     */\r\n    addModelPrefix=(type,currModel)=>{\r\n        if(this.isModelActionType(type)){\r\n            return type;\r\n        }\r\n        return currModel+\"/\"+type;\r\n    };\r\n\r\n    /**\r\n     * 连接模块名和action type\r\n     */\r\n    joinModNameAndActionType=(modName,actionType)=>{\r\n        return modName+\"/\"+actionType;\r\n    }\r\n\r\n    /**\r\n     * action type名称是否指明是promise类型（程序中除该方式外，还有另一方式判断是否是promise类型action）\r\n     */\r\n    isPromiseActionType=(actionType)=>{\r\n        return needPromiseReg.test(actionType.trim());\r\n    }\r\n\r\n    /**\r\n     * 是否是生成器\r\n     */\r\n    isGen=(fn)=>{\r\n        // if (typeof fn !== 'function') {\r\n        //     return false;\r\n        // }\r\n        // if (isFnRegex.test(fnToStr.call(fn))) {\r\n        //     return true;\r\n        // }\r\n        // if (!hasToStringTag) {\r\n        //     var str = toStr.call(fn);\r\n        //     return str === '[object GeneratorFunction]';\r\n        // }\r\n        // return getProto(fn) === GeneratorFunction;\r\n\r\n        if(!fn){\r\n            return false;\r\n        }\r\n        return \"function\"===typeof(fn) && 0<=(\"\"+fn.prototype).toLowerCase().indexOf(\"generator\");\r\n    }\r\n};\r\n\r\n\r\n\r\nconst regWithModel=/^[^/]+[/][^/]+$/;\r\nconst regNoModel=/^[^/]+$/;\r\n\r\n\r\n//判断是否是生成器相关的变量\r\nvar toStr = Object.prototype.toString;\r\nvar fnToStr = Function.prototype.toString;\r\nvar isFnRegex = /^\\s*(?:function)?\\*/;\r\nvar hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';\r\nvar getProto = Object.getPrototypeOf;\r\nvar getGeneratorFunc = function () { // eslint-disable-line consistent-return\r\n    if (!hasToStringTag) {\r\n        return false;\r\n    }\r\n    try {\r\n        return Function('return function*() {}')();\r\n    } catch (e) {\r\n    }\r\n};\r\nvar generatorFunc = getGeneratorFunc();\r\nvar GeneratorFunction = generatorFunc ? getProto(generatorFunc) : {};\r\n\r\n\r\n//根据action.type判断是否需要返回promise的正则\r\n//1、promiseAddUser          不带命名空间，以promise作为前缀\r\n//2、addUserPromise          不带命名空间，以promise作为后缀\r\n//3、user/promiseAddUser     带命名空间，以promise作为前缀\r\n//4、user/addUserPromise     带命名空间，以promise作为后缀\r\nconst needPromiseReg=/^([^/]+[/])?((promise[^/]+)|([^/]+promise))$/i;\r\n\r\n\r\n\r\nexport default new GflowUtil();","D:\\ws\\web\\gmap-ui\\src\\common\\SagaPromiseMiddleWare.js",["243"],"/**\r\n * 用来的对saga中间件进行增强，以支持返回值，该中间件应放在saga中间件之前\r\n * @param {*} param0 \r\n */\r\nconst sagaPromiseMiddleWare= (({ getState, dispatch })=>next=>action=>{\r\n    //如果action.type为包含promise前缀或后缀，则表示执行该action会需要得到结果,以promise包装并在promise内部向下一个中间件传递\r\n    if(action && action.extras && true===action.extras.promise  /*needPromiseReg.test(action.type.trim())*/){\r\n        return new Promise((res,rej)=>{\r\n            if(!action.extras){\r\n                action.extras={};\r\n            }\r\n            action.extras.promise=true;\r\n            action.extras.res=res;\r\n            action.extras.rej=rej;\r\n            return next(action);\r\n        });\r\n    }\r\n\r\n    //否则，直接向下一个中间传递\r\n    let nextLink=next(action);\r\n    return nextLink;\r\n});\r\n\r\n\r\n//根据action.type判断是否需要返回promise\r\n//1、promiseAddUser          不带命名空间，以promise作为前缀\r\n//2、addUserPromise          不带命名空间，以promise作为后缀\r\n//3、user/promiseAddUser     带命名空间，以promise作为前缀\r\n//4、user/addUserPromise     带命名空间，以promise作为后缀\r\nconst needPromiseReg=/^([^/]+[/])?((promise[^/]+)|([^/]+promise))$/i;\r\n\r\n\r\n\r\nexport default sagaPromiseMiddleWare;\r\n\r\n","D:\\ws\\web\\gmap-ui\\src\\models\\filesel.js",[],"D:\\ws\\web\\gmap-ui\\src\\models\\common.js",[],"D:\\ws\\web\\gmap-ui\\src\\models\\tabs.js",[],"D:\\ws\\web\\gmap-ui\\src\\ui\\home\\index.js",[],"D:\\ws\\web\\gmap-ui\\src\\service\\generalSvc.js",[],"D:\\ws\\web\\gmap-ui\\src\\service\\api.js",["244"],"import {message} from 'antd';\r\nimport {dispatcher} from '../common/gflow';\r\n\r\nconst {app,getCurrentWebContents} = window.require('@electron/remote');// window.require('electron').remote;\r\n\r\n\r\nclass Api{\r\n\r\n\r\n    /**\r\n     * 初始化查找对话框，需要在页面加载完之后调用\r\n     */\r\n    initFindInPageDlg=()=>{\r\n        app.initFindInPage(300);\r\n    }\r\n\r\n    showFindInPageDlg=()=>{\r\n        app.showFindInPage(300,140);\r\n    }\r\n\r\n    closeFindInPageDlg=()=>{\r\n        app.hideFindInPage();\r\n    }\r\n\r\n    getInnerModuleVersions=()=>{\r\n        return app.getInnerModuleVersions();\r\n    }\r\n\r\n    openBash=()=>{\r\n        app.openGitBash();\r\n    }\r\n\r\n    openMapsDir=()=>{\r\n        app.openMapsDir();\r\n    }\r\n\r\n    existsFullpath=(fullpath)=>{\r\n        return app.existsFullpath(fullpath);\r\n    }\r\n\r\n    existsPic=(picName)=>{\r\n        return app.existsPic(picName);\r\n    }\r\n\r\n    existsAtt=(picName)=>{\r\n        return app.existsAtt(picName);\r\n    }\r\n\r\n    openPicByName=(name)=>{\r\n        return app.openPicByName(name);\r\n    }\r\n\r\n    openAttByName=(name)=>{\r\n        return app.openAttByName(name);\r\n    }\r\n\r\n    \r\n\r\n\r\n    \r\n    loadAppInfo=()=>{\r\n        return app.loadAppInfo();\r\n    }\r\n\r\n    reloadAppPage=()=>{\r\n        app.reloadAppPage();\r\n    }\r\n\r\n    isUrlFormat=(txt)=>{\r\n        return app.isUrlFormat(txt);\r\n    }\r\n\r\n    loadAppNameAndVersionTxt=()=>{\r\n        let {showname,version}=this.loadAppInfo();\r\n        return showname+\"　V\"+version;\r\n    }\r\n\r\n    existsGraph=(fn)=>{\r\n        return app.existsGraph(fn);\r\n    }\r\n\r\n    copyClipboardPicToImgsDir=(showName,currGraphFullpath)=>{\r\n        return app.copyClipboardPicToImgsDir(showName,currGraphFullpath);\r\n    }\r\n\r\n    copyPicToImgsDir=(picFullpath,showName,currGraphFullpath)=>{\r\n        return app.copyPicToImgsDir(picFullpath,showName,currGraphFullpath);\r\n    }\r\n    copyAttToAttsDir=(picFullpath,showName,currGraphFullpath)=>{\r\n        return app.copyAttToAttsDir(picFullpath,showName,currGraphFullpath);\r\n    }\r\n\r\n    selPicFile=()=>{\r\n        let rs=app.selPicFile();\r\n        // // console.log(\"选择目录结果\",rs);\r\n        return rs;\r\n\r\n        // dialog.showOpenDialog({properties: ['openFile']}, (files)=>{\r\n        //     if (files){\r\n        //         console.log(\"选\",files);\r\n        //         return;\r\n        //     }\r\n        //     console.log(\"未选\");\r\n        // });\r\n    }\r\n\r\n    isDevMode=()=>{\r\n        return app.isDevMode();\r\n    }\r\n\r\n\r\n    hasDevToolExtension=()=>{\r\n        return app.hasDevToolExtension();\r\n    }\r\n\r\n    getDevToolExtensionUrl=()=>{\r\n        return app.getDevToolExtensionUrl();\r\n    }\r\n\r\n    isMaximized=()=>{\r\n        return app.isMaximized();\r\n    }\r\n\r\n    openSaveFileDlg=(ext)=>{\r\n        return app.openSaveFileDlg(ext);\r\n    }\r\n\r\n    selAttFile=()=>{\r\n        let rs=app.selAttFile();\r\n        return rs;\r\n    }\r\n\r\n    calcPicUrl=(graphFileFullpath,picRelaPath)=>{\r\n        return app.calcPicUrl(graphFileFullpath,picRelaPath);\r\n    }\r\n    calcAttUrl=(graphFileFullpath,picRelaPath)=>{\r\n        return app.calcAttUrl(graphFileFullpath,picRelaPath);\r\n    }\r\n\r\n    openUrl=(url)=>{\r\n        if(url.startsWith(\"gmap://\")){\r\n            let fn=url.substring(\"gmap://\".length);\r\n            let flag=app.existsGraph(fn);\r\n            if(true!==flag){\r\n                message.warning(\"链接已经失效，请修改后重试\");\r\n                return;\r\n            }\r\n\r\n            let item=app.getFileItem(fn);\r\n            dispatcher.tabs.onSelItemPromise(item).then();\r\n            // console.log(\"笔记链接跳转：\",url,item);\r\n            return;\r\n        }\r\n\r\n        app.openUrl(url);\r\n    }\r\n\r\n\r\n    getPathItems=(dir=null)=>{\r\n        return app.getPathItems(dir);\r\n    }\r\n\r\n    showDevTool=()=>{\r\n        app.openDevTool();\r\n    }\r\n\r\n    /**\r\n     * 列出所有文件\r\n     */\r\n    list=(basedir=null)=>{\r\n        return app.listFiles(basedir).map(item=>({\r\n            showname: item.name,\r\n            itemsName:item.itemsName,\r\n            fullpath: item.fullpath,\r\n            isfile:   item.isfile,\r\n            size:     item.isfile ? getSizeStr(item.size) :(item.emptyDir?\"<空目录>\":\"<目录>\"),\r\n            pic:      item.pic,\r\n        }));\r\n\r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n                \r\n    }\r\n\r\n    /**\r\n     * 保存文件\r\n     */\r\n    save=(fullpath,content)=>{\r\n        app.saveFile(fullpath,content.replace(/\\r/g,'').trim());//\\r\\n全部换为\\n\r\n    }\r\n\r\n    /**\r\n     * 读取文件内容\r\n     */\r\n    load=(fullpath)=>{\r\n        let ret=app.readFile(fullpath);\r\n        if('string'===typeof(ret)){\r\n            return ret.replace(/\\r/g,'').trim();//\\r\\n全部换为\\n\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    getBasePath=()=>{\r\n        return app.getBasePath();\r\n    }\r\n\r\n    listAllDirs=()=>{\r\n        return app.listAllDirs();\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nconst getSizeStr=(size=0)=>{\r\n    if(0===size){\r\n        return \"<空>\";\r\n    }\r\n    if(size<1024){\r\n        return \"1K\";\r\n    }\r\n    return parseInt(size/1000)+\"K\";\r\n};\r\n\r\nexport default new Api();","D:\\ws\\web\\gmap-ui\\src\\service\\mindMapValidateSvc.js",[],"D:\\ws\\web\\gmap-ui\\src\\service\\newMindmapSvc.js",[],"D:\\ws\\web\\gmap-ui\\src\\service\\mindmapSvc.js",["245","246","247"],"import mindMapValidateSvc from './mindMapValidateSvc';\r\nimport ganttSvc from './ganttSvc';\r\nimport api from './api';\r\n\r\n\r\n\r\n/**\r\n * 根据指定文本格式，解析为table方式显示的思维导数的数据格式\r\n * \r\n * 层级式节点的格式 nd\r\n *  {\r\n        id:     uuid,\r\n        forceRight: true/false  //是否强制所有子树都在右侧，只对根节点有效\r\n        lev:    lev,        //层级\r\n        str:    txt,        //文本\r\n        left:   false,      //方向，true-根节点左侧 false-根节点右侧\r\n        par:    null,       //父节点，如果是根节点则为null\r\n        color:  lineColor,  //节点颜色\r\n        memo:   memo,       //备注信息\r\n        links:  [\r\n            {\r\n                name:'',    //null或文字\r\n                addr:''     //非空，url\r\n            }\r\n        ]\r\n        childs: []          //子节点数组\r\n        leaf:false,         //是否为叶节点\r\n        expand:true,        //是否展开，在为叶节点时，此值无用\r\n        defExp: true/false, //默认是否展开，在为叶节点时，此值无用\r\n        ref: {\r\n            txt:'',\r\n            parsedTxt:''\r\n        },\r\n        visual:false,\r\n        dateItem: dateItem,\r\n        prog: prog,\r\n    }\r\n * \r\n * \r\n * 树节点的格式 cell\r\n * {\r\n *      txt: \"　\",          //文本\r\n        cls:0,              //样式符号（前期），样式对象（最后）\r\n        llineColor:null,    //左右上下边框的颜色\r\n        rlineColor:null,\r\n        tlineColor:null,\r\n        blineColor:null,\r\n        nd: nd              //关联层级式节点\r\n * }\r\n * \r\n */\r\nclass MindmapSvc {\r\n    /**\r\n     * 切换非叶节点展开状态。为了处理此状态，所有与布局相关的操作都要在调用childs之前检查expand状态，如果未展开，则不再继续执行\r\n     */\r\n    toggleExpandNode = (cell,cells) => {\r\n        // //获取根节点\r\n        // let root = cell.nd;\r\n        // while (null != root.par) {\r\n        //     root = root.par;\r\n        // }\r\n\r\n        //修改当前节点的展开状态\r\n        if (!cell.nd.leaf) {\r\n            cell.nd.expand = !cell.nd.expand;\r\n        }\r\n\r\n        //重新解析表格结构\r\n        return this.parseMindMapDataInner(cells.root);\r\n    }\r\n\r\n    /**\r\n     * 展开所有节点\r\n     * @param {*} cells \r\n     */\r\n    expandAllNds=(cells)=>{\r\n        // let root = this.getRootNodeByCells(cells);\r\n        this.expandNode(cells.root);\r\n        //重新解析表格结构\r\n        return this.parseMindMapDataInner(cells.root);\r\n    }\r\n\r\n    /**\r\n     * 恢复节点的默认状态\r\n     */\r\n    restoreAllNdExpSts=(cells)=>{\r\n        this.restoreNode(cells.root);\r\n        return this.parseMindMapDataInner(cells.root);\r\n    }\r\n\r\n    \r\n\r\n\r\n    /**\r\n     * 判断是否所有节点都已展开\r\n     */\r\n    isAllNodeExpand = (cells) => {\r\n        // let root = this.getRootNodeByCells(cells);\r\n        return this.isNodeExpandRecursively(cells.root);\r\n    }\r\n    \r\n    /**\r\n     * 判断所有节点中是否有展开状态变化的\r\n     */\r\n    isAnyNdExpStChanged=(cells)=>{\r\n        return this.isNdExpStChangedRecursively(cells.root);\r\n    }\r\n\r\n    parseMindMapData = (txts, defLineColor, theThemeStyles, bordTypesMap, getBorderStyleCallback,defDateColor, shouldValidate = true) => {\r\n        try{\r\n            let root=this.parseRootNode(txts, defLineColor, theThemeStyles, bordTypesMap, getBorderStyleCallback,defDateColor, shouldValidate = true);\r\n            let cells= this.parseMindMapDataInner(root);\r\n            return cells;\r\n        }catch(e){\r\n            return {\r\n                succ: false,\r\n                msg: '内容解析失败',\r\n                desc: ('string'===typeof(e)? \"\"+e : \"图表内容解析过程中发生错误 ~~~\")\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * 外部调用的主方法：解析为最终显示的数据格式\r\n     * @param {txts} 待解析的文本\r\n     * @param {defLineColor} 连接线的默认颜色\r\n     * @param {mainThemeStyle} 中心主题的样式\r\n     * @param {bordTypesMap} 边框类型的枚举\r\n     * @param {getBorderStyleCallback} 根据边框类型解析为边框样式的回调\r\n     */\r\n    parseRootNode = (txts, defLineColor, theThemeStyles, bordTypesMap, getBorderStyleCallback,defDateColor, shouldValidate = true) => {\r\n        //校验\r\n        if (shouldValidate) {\r\n            if ('' === txts) {\r\n                return {\r\n                    succ: false,\r\n                    msg: '内容解析失败',\r\n                    desc: '图表内容不能为空 ~~~'\r\n                }\r\n            }\r\n            let valiResult = mindMapValidateSvc.validate(txts);\r\n\r\n            if (true !== valiResult) {\r\n                return {\r\n                    succ: false,\r\n                    msg: '内容解析失败',\r\n                    desc: valiResult + \" ~~~\"\r\n                }\r\n            }\r\n        }\r\n\r\n        try {\r\n            //设置共享的变量\r\n            defaultLineColor = defLineColor;\r\n            defaultDateColor=defDateColor;\r\n            bordType = bordTypesMap;\r\n            getBorderStyle = getBorderStyleCallback;\r\n            themeStyles = theThemeStyles;\r\n\r\n            //表格行列相关计算\r\n            let nd = this.load(txts);//根节点\r\n            this.setNodeLineColor(nd, defaultLineColor);\r\n            return nd;\r\n        } catch (e) {\r\n            console.error(e);\r\n            return {\r\n                succ: false,\r\n                msg: '内容解析失败',\r\n                desc: ('string'===typeof(e)? \"\"+e : \"图表内容解析过程中发生错误 ~~~\")\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    //----------------如下为非暴露的方法-------------------------------------------------\r\n    restoreNode=(nd)=>{\r\n        if (nd.leaf) {\r\n            return;\r\n        }\r\n\r\n        nd.expand=nd.defExp;\r\n        nd.childs.forEach(child => {\r\n            this.restoreNode(child);\r\n        });\r\n    }\r\n\r\n    expandNode = (nd) => {\r\n        nd.expand = true;\r\n        if (!nd.leaf) {\r\n            nd.childs.forEach(child => {\r\n                this.expandNode(child);\r\n            });\r\n        }\r\n    }\r\n\r\n    // getRootNodeByCells = (cells) => {\r\n    //     //找到第一个有节点的单元格的节点对象\r\n    //     let root = null;\r\n    //     let isFin = false;\r\n    //     for (let i in cells) {\r\n    //         let line = cells[i];\r\n    //         for (let j in line) {\r\n    //             let tmpCell = line[j];\r\n    //             if (tmpCell.nd) {\r\n    //                 root = tmpCell.nd;\r\n    //                 isFin = true;\r\n    //                 break;\r\n    //             }\r\n    //         }\r\n    //         if (isFin) {\r\n    //             break;\r\n    //         }\r\n    //     }\r\n\r\n    //     //向上找到根节点\r\n    //     while (null != root.par) {\r\n    //         root = root.par;\r\n    //     }\r\n    //     return root;\r\n    // }\r\n\r\n    isNdExpStChangedRecursively=(nd)=>{\r\n        if(!nd){\r\n            return false;\r\n        }\r\n\r\n        //叶节点认为展开状态没有变化\r\n        if (nd.leaf) {\r\n            return false;\r\n        }\r\n\r\n        //如果当前节点的展开状态有变化，则直接返回true\r\n        if (nd.expand !==nd.defExp) {\r\n            return true;\r\n        }\r\n\r\n        //否则递归判断子节点展开状态有无变化，若有，直接返回true\r\n        for (let i in nd.childs) {\r\n            if (this.isNdExpStChangedRecursively(nd.childs[i])) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    isNodeExpandRecursively = (nd) => {\r\n        if(!nd){\r\n            return false;\r\n        }\r\n\r\n        //叶节点认为是展开状态\r\n        if (nd.leaf) {\r\n            return true;\r\n        }\r\n\r\n        //从自己向子节点递归，遇到未展开，就返回false，直到最后返回true\r\n        if (!nd.expand) {\r\n            return false;\r\n        }\r\n        for (let i in nd.childs) {\r\n            if (!this.isNodeExpandRecursively(nd.childs[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    parseMindMapDataInner = (nd) => {\r\n        //计算根节点子树的方向，同时在其中设置虚拟节点（如果需要）\r\n        let leftAndRightLeafCnt = this.setDirection(nd);\r\n\r\n        let rows = Math.max(leftAndRightLeafCnt[0], leftAndRightLeafCnt[1]);//行数\r\n        rows = (0 === rows ? 1 : rows);\r\n        let leftAndRightCols = this.getLeftRightDeeps(nd);//左右子树深度（不包含根节点）\r\n        let cols = leftAndRightCols[0] + 1 + leftAndRightCols[1];//列数\r\n        let rootLoc = [parseInt((rows - 1) / 2), leftAndRightCols[0]];//根节点位置\r\n\r\n\r\n\r\n        //从根节点向下递归设置各节点的颜色\r\n        this.setNodeLineColor(nd, defaultLineColor);\r\n\r\n\r\n        //创建表格结构，其中cls用来存bordtype，在最后会把bordtype解析为实际的样式对象\r\n        let cells = [];\r\n        for (let i = 0; i < rows; ++i) {\r\n            let line = [];\r\n            for (let j = 0; j < cols; ++j) {\r\n                line.push({\r\n                    txt: \"　\",\r\n                    cls: 0,\r\n                    llineColor: null,\r\n                    rlineColor: null,\r\n                    tlineColor: null,\r\n                    blineColor: null,\r\n                    nd: null,\r\n                });\r\n            }\r\n            cells.push(line);\r\n        }\r\n\r\n        //设置根节点的文本的颜色\r\n        let rootCell=cells[rootLoc[0]][rootLoc[1]];\r\n        rootCell.txt = nd.str;\r\n        rootCell.blineColor = nd.color\r\n        rootCell.nd = nd;\r\n        addBord(rootCell, bordType.b);\r\n\r\n\r\n        //设置左右子树的起始行号，为了使左右的高度比较对称，叶节点少的一方应该向下移，而不应从0开始\r\n        let leftCurrPos = 0;\r\n        let rightCurrPos = 0;\r\n        if (leftAndRightLeafCnt[0] < leftAndRightLeafCnt[1]) {//为了使结果树的左右调度比较均匀\r\n            rightCurrPos = 0;\r\n            leftCurrPos = parseInt((leftAndRightLeafCnt[1] - leftAndRightLeafCnt[0]) / 2);\r\n        } else {\r\n            leftCurrPos = 0;\r\n            rightCurrPos = parseInt((leftAndRightLeafCnt[0] - leftAndRightLeafCnt[1]) / 2);\r\n        }\r\n\r\n\r\n        //分别向左右子树递归放置节点\r\n        if (nd.expand) {\r\n            let lcnt = 0;\r\n            let rcnt = 0;\r\n            nd.childs.forEach(child => {\r\n                if (child.left) {\r\n                    ++lcnt;\r\n                }\r\n                if (!child.left) {\r\n                    ++rcnt;\r\n                }\r\n            });\r\n\r\n\r\n            nd.childs.forEach(child => {\r\n                if (child.left) {\r\n                    this.putCell(cells, child, leftCurrPos, rootLoc[1] - 1, true, rootLoc, nd.color, 1 === lcnt ? rootLoc[0] : null);\r\n                    leftCurrPos += this.getLeafCnt(child);\r\n                    return;\r\n                }\r\n                if (!child.left) {\r\n                    this.putCell(cells, child, rightCurrPos, rootLoc[1] + 1, false, rootLoc, nd.color, 1 === rcnt ? rootLoc[0] : null);\r\n                    rightCurrPos += this.getLeafCnt(child);\r\n                    return;\r\n                }\r\n            });\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n        //左边部分圆角设置\r\n        for (let i = 0; i < leftAndRightCols[0]; ++i) {\r\n            for (let j = 0; j < rows; ++j) {\r\n                let item = cells[j][i];\r\n\r\n                //有右下边框，且下面格无右边框，且右边无下边框，则设置右下圆角\r\n                if (\r\n                    hasBord(item, bordType.r) &&\r\n                    hasBord(item, bordType.b) &&\r\n                    (j === rows - 1 || !hasBord(cells[j + 1][i], bordType.r)) &&\r\n                    (i === cols - 1 || !hasBord(cells[j][i + 1], bordType.b))\r\n                ) {\r\n                    addBord(item, bordType.rbRad)\r\n                }\r\n\r\n                //有下边框无右边框，且下面格有右边框，且右边无下边框，则把下格设右上圆角和上边框，同时把当前格下边框去掉，依次向左直到无下边框\r\n                if (\r\n                    !hasBord(item, bordType.r) &&\r\n                    hasBord(item, bordType.b) &&\r\n                    (j < rows - 1 && hasBord(cells[j + 1][i], bordType.r)) &&\r\n                    (i < cols - 1 && !hasBord(cells[j][i + 1], bordType.b))\r\n                ) {\r\n                    //下面格设置右上圆角和上边框\r\n                    addBord(cells[j + 1][i], bordType.rtRad);\r\n                    addBord(cells[j + 1][i], bordType.t);\r\n                    cells[j + 1][i].tlineColor = cells[j][i].blineColor;\r\n\r\n                    //本格到左边所有有下边框的都去掉，同时在下边格加上边框\r\n                    for (let k = i; k >= 0; --k) {\r\n                        if (!hasBord(cells[j][k], bordType.b)) {\r\n                            break;\r\n                        }\r\n\r\n                        //当前行取消下边框\r\n                        removeBord(cells[j][k], bordType.b);\r\n\r\n                        //下一行增加上边框\r\n                        if (k !== i) {\r\n                            addBord(cells[j + 1][k], bordType.t);\r\n                            cells[j + 1][k].tlineColor = cells[j][k].blineColor;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        //右边部分圆角设置\r\n        for (let i = leftAndRightCols[0] + 1; i < cols; ++i) {\r\n            for (let j = 0; j < rows; ++j) {\r\n                let item = cells[j][i];\r\n\r\n                //有左下边框，且下面格无左边框，，且右边无下边框，则设置左下圆角\r\n                if (\r\n                    hasBord(item, bordType.l) &&\r\n                    hasBord(item, bordType.b) &&\r\n                    (j === rows - 1 || !hasBord(cells[j + 1][i], bordType.l)) &&\r\n                    (i === 0 || !hasBord(cells[j][i - 1], bordType.b))\r\n                ) {\r\n                    addBord(item, bordType.lbRad);\r\n                }\r\n\r\n                //有下边框无左边框，且下面格有左边框，且左边无下边框，则把下格设左上圆角和上边框，同时把当前格下边框去掉，依次向右直到无下边框\r\n                if (\r\n                    !hasBord(item, bordType.l) &&\r\n                    hasBord(item, bordType.b) &&\r\n                    (j < rows - 1 && hasBord(cells[j + 1][i], bordType.l)) &&\r\n                    (i > 0 && !hasBord(cells[j][i - 1], bordType.b))\r\n                ) {\r\n                    //下面格设置左上圆角和上边框\r\n                    addBord(cells[j + 1][i], bordType.ltRad);\r\n                    addBord(cells[j + 1][i], bordType.t);\r\n                    cells[j + 1][i].tlineColor = cells[j][i].blineColor;\r\n\r\n                    //本格到右边所有有下边框的都去掉，同时在下边格加上边框\r\n                    for (let k = i; k < cols; ++k) {\r\n                        if (!hasBord(cells[j][k], bordType.b)) {\r\n                            break;\r\n                        }\r\n\r\n                        //当前行取消下边框\r\n                        removeBord(cells[j][k], bordType.b);\r\n\r\n                        //下一行增加上边框\r\n                        if (k !== i) {\r\n                            addBord(cells[j + 1][k], bordType.t);\r\n                            cells[j + 1][k].tlineColor = cells[j][k].blineColor;\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        \r\n        \r\n        \r\n\r\n\r\n        //把边框样式的记号转换为实际的样式对象\r\n        for (let i = 0; i < cols; ++i) {\r\n            for (let j = 0; j < rows; ++j) {\r\n                let item = cells[j][i];\r\n                item.cls = this.parseBordStyle(item);\r\n            }\r\n        }\r\n\r\n        //加入中心主题和其他各层主题的样式\r\n        //当前只支持三种样式，即根主题、二级主题、其他任何层主题\r\n        for (let r = 0; r < rows; ++r) {\r\n            for (let c = 0; c < cols; ++c) {\r\n                if (cells[r][c].nd) {\r\n                    let themeInd = cells[r][c].nd.lev;\r\n                    themeInd = (themeInd > 2 ? 2 : themeInd);\r\n                    cells[r][c].cls.push(themeStyles[themeInd]);\r\n                }\r\n            }\r\n        }\r\n\r\n        // cells[rootLoc[0]][rootLoc[1]].cls.push(centerThemeStyle);\r\n        cells.root=nd;//绑定单元格集合与根节点的对应关系\r\n        return cells;\r\n    }\r\n\r\n    /**\r\n     * 移除节点子节点中的\r\n     */\r\n    removeVisualNds=(nd)=>{\r\n        let len=nd.childs.length;\r\n        for(let i=len-1;i>=0;--i){\r\n            if(nd.childs[i].visual){\r\n                nd.childs.splice(i,1);\r\n                continue;\r\n            }\r\n            this.removeVisualNds(nd.childs[i]);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * 递归设置节点和其子节点颜色\r\n     * @param {nd} 当前节点\r\n     * @param {parColor} 父节点颜色\r\n     */\r\n    setNodeLineColor = (nd, parColor = defaultLineColor) => {\r\n        let currColor = (null == nd.color ? parColor : nd.color);//如果当前节点没有指定颜色，则使用继承的颜色（即父节点的颜色），否则使用自己的颜色\r\n        nd.color = currColor;\r\n\r\n        //如果节点上的日期没有颜色，则继承线的颜色\r\n        if(nd.dateItem && (null==nd.dateItem.color || ''===nd.dateItem.color)){\r\n            nd.dateItem.color=currColor;\r\n        }\r\n\r\n        nd.childs.forEach(child => {\r\n            this.setNodeLineColor(child, currColor);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 样式符号解析为实际的样式对象\r\n     */\r\n    parseBordStyle = (item) => {\r\n        let targetStyle = [];\r\n        for (let type in bordType) {\r\n            if (hasBord(item, bordType[type])) {\r\n                let tmpColor = item.lineColor;\r\n\r\n                //如果是上下左右边框，则使用各自的颜色\r\n                if (bordType.l === bordType[type]) {\r\n                    tmpColor = item.llineColor;\r\n                } else if (bordType.t === bordType[type]) {\r\n                    tmpColor = item.tlineColor;\r\n                } else if (bordType.r === bordType[type]) {\r\n                    tmpColor = item.rlineColor;\r\n                } else if (bordType.b === bordType[type]) {\r\n                    tmpColor = item.blineColor;\r\n                }\r\n\r\n                targetStyle.push(getBorderStyle(bordType[type], tmpColor));\r\n            }\r\n        }\r\n        return targetStyle;\r\n    }\r\n\r\n\r\n    /**\r\n     * 放置单元格\r\n     * @param {cells}   所有单元格的数组\r\n     * @param {nd}  当前节点对象\r\n     * @param {startRow} 起始行\r\n     * @param {col} 列\r\n     * @param {isLeft} 是否是根节点的左子树\r\n     * @param {parLoc} 父节点的位置\r\n     * @param {parColor} 父节点的颜色\r\n     * @param {forceAlignToRoot} 如果不为null，表示强制与根节点纵坐标一致，此值即为纵坐标\r\n     */\r\n    putCell = (cells, nd, startRow, col, isLeft, parLoc, parColor, forceAlignToRoot) => {\r\n        let endRow = startRow + this.getLeafCnt(nd) - 1;//最后一行：由叶子节点数计算得到\r\n        let row = parseInt((startRow + endRow) / 2);//当前节点所在行\r\n        if (null != forceAlignToRoot) {//强制与根节点纵坐标一致\r\n            row = forceAlignToRoot;\r\n        }\r\n        \r\n        cells[row][col].txt = nd.str;//节点文本\r\n        \r\n        cells[row][col].blineColor = nd.color;//节点下边框\r\n        cells[row][col].nd = nd;\r\n        let currLoc = [row, col];//当前节点位置\r\n\r\n\r\n\r\n\r\n\r\n\r\n        //设置节点到父节点的连接线        \r\n        this.setLine(cells, parLoc, currLoc, parColor, nd.color);\r\n\r\n        //递归放置子节点\r\n        let subStartRow = startRow;\r\n        if (nd.expand) {\r\n            nd.childs.forEach(child => {\r\n                this.putCell(cells, child, subStartRow, isLeft ? col - 1 : col + 1, isLeft, currLoc, nd.color, null);\r\n                subStartRow += this.getLeafCnt(child);\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * 设置节点到线\r\n     * @param {cells}  节点数组\r\n     * @param {par}    父节点坐标\r\n     * @param {child}  子节点坐标\r\n     * @param {parColor} 父节点颜色\r\n     * @param {currColor} 子节点颜色\r\n     */\r\n    setLine = (cells, par, child, parColor, currColor) => {\r\n        let childNd=cells[child[0]][child[1]].nd;\r\n\r\n        //虚拟节点不需要设置线条\r\n        if(childNd.visual){\r\n            return;\r\n        }\r\n\r\n        //父子节点都设置下划线和颜色\r\n        addBord(cells[par[0]][par[1]], bordType.b);\r\n        addBord(cells[child[0]][child[1]], bordType.b);\r\n        cells[par[0]][par[1]].blineColor = parColor;\r\n        cells[child[0]][child[1]].blineColor = currColor;\r\n\r\n        //子节点在父节点的左还是右\r\n        let isLeft = child[1] < par[1];\r\n\r\n        //父子节点纵坐标相同，不需要其他设置\r\n        if (child[0] === par[0]) {\r\n            return;\r\n        }\r\n\r\n        //子节点在父节点下面，设置连线到父节点的左或右边框线\r\n        if (child[0] > par[0]) {\r\n            for (let i = child[0]; i > par[0]; --i) {\r\n                addBord(cells[i][child[1]], (isLeft ? bordType.r : bordType.l));\r\n                if (isLeft) {\r\n                    cells[i][child[1]].rlineColor = parColor;\r\n                } else {\r\n                    cells[i][child[1]].llineColor = parColor;\r\n                }\r\n            }\r\n            return;\r\n        }\r\n\r\n        //子节点在父节点上面，设置连线到父节点的左或右边框线\r\n        for (let i = child[0] + 1; i <= par[0]; ++i) {\r\n            addBord(cells[i][child[1]], (isLeft ? bordType.r : bordType.l));\r\n            if (isLeft) {\r\n                cells[i][child[1]].rlineColor = parColor;\r\n            } else {\r\n                cells[i][child[1]].llineColor = parColor;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * 设置根节点各子节点的方向（即左/右）\r\n     * @param {root} 根节点\r\n     * @returns {[lcnt,rcnt]} 左右子树的叶子节点数量\r\n     */\r\n    setDirection = (root) => {\r\n        console.log(\"所有节点都在右\",root.forceRight);\r\n\r\n\r\n        let childCnt = root.childs.length;\r\n        if (0 === childCnt || !root.expand) {\r\n            return [0, 0];\r\n        }\r\n\r\n        //根节点只有一个子节点，则该子节点和其所有子孙节点都在右边\r\n        if (1 === childCnt) {\r\n            let onlyChild = root.childs[0];\r\n            this.setDirectionRecursively(onlyChild, false);\r\n            return [0, this.getLeafCnt(onlyChild)];\r\n        }\r\n\r\n\r\n        //根节点有多个子节点\r\n        //先假设所有子树都在右侧，同时计算总叶节点数\r\n        let rightLeafCnt = 0;\r\n        let leftLeafCnt = 0;\r\n        let dist = 0;\r\n        root.childs.forEach(child => {\r\n            this.setDirectionRecursively(child, false);\r\n            rightLeafCnt += this.getLeafCnt(child);\r\n        });\r\n        dist = rightLeafCnt;\r\n\r\n        \r\n        //如果设置了强制所有节点都在右侧，则直接返回\r\n        if(root.forceRight){\r\n            return [0, rightLeafCnt];\r\n        }\r\n\r\n        //否则，以左右侧叶节点数相差最小为准\r\n        //依次计算如果把某个节点放到左侧，侧左右侧叶节点数差值是否比当前小，如果小，就移到左侧\r\n        let loopFin = false;\r\n        root.childs.forEach(child => {\r\n            if (loopFin) {\r\n                return;\r\n            }\r\n\r\n            let currNodeLeftCnt = this.getLeafCnt(child);\r\n            let assumeDist = parseInt(Math.abs((leftLeafCnt + currNodeLeftCnt) - (rightLeafCnt - currNodeLeftCnt)));\r\n            if (assumeDist < dist) {\r\n                dist = assumeDist;\r\n                leftLeafCnt += currNodeLeftCnt;\r\n                rightLeafCnt -= currNodeLeftCnt;\r\n                this.setDirectionRecursively(child, true);\r\n                return;\r\n            }\r\n            loopFin = true;\r\n        });\r\n\r\n        let ltreeCnt=0;\r\n        let rtreeCnt=0;\r\n        root.childs.forEach(child => {\r\n            if(child.left){\r\n                ++ltreeCnt;\r\n                return;\r\n            }\r\n            ++rtreeCnt;\r\n        });\r\n\r\n\r\n\r\n        return [leftLeafCnt, rightLeafCnt];\r\n    }\r\n\r\n    /**\r\n     * 递归设置节点和所有子孙节点的方向\r\n     */\r\n    setDirectionRecursively = (nd, left) => {\r\n        nd.left = left;\r\n        nd.childs.forEach(child => {\r\n            this.setDirectionRecursively(child, left);\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * 计算根节点左右子树的深度，不包括根节点\r\n     */\r\n    getLeftRightDeeps = (root) => {\r\n        let deepLeft = 0;\r\n        let deepRight = 0;\r\n        if (!root.expand) {\r\n            return [deepLeft, deepRight];\r\n        }\r\n\r\n        root.childs.forEach(child => {\r\n            if (child.left) {\r\n                deepLeft = Math.max(this.getDeep(child), deepLeft);\r\n                return;\r\n            }\r\n            if (!child.left) {\r\n                deepRight = Math.max(this.getDeep(child), deepRight);\r\n                return;\r\n            }\r\n        });\r\n        return [deepLeft, deepRight];\r\n    }\r\n\r\n    /**\r\n     * 获得节点的深度，自己也算一层\r\n     */\r\n    getDeep = (nd) => {\r\n        if (null == nd) {\r\n            return 0;\r\n        }\r\n        let max = 0;\r\n        if (nd.expand) {\r\n            nd.childs.forEach(child => {\r\n                max = Math.max(max, this.getDeep(child));\r\n            });\r\n        }\r\n        return 1 + max;\r\n    }\r\n\r\n    /**\r\n     * 获得节点叶节点的数量\r\n     */\r\n    getLeafCnt = (nd) => {\r\n        if (0 === nd.childs.length || !nd.expand) {\r\n            return 1;\r\n        }\r\n        let cnt = 0;\r\n        nd.childs.forEach(child => {\r\n            cnt += this.getLeafCnt(child);\r\n        });\r\n        return cnt;\r\n    }\r\n\r\n    \r\n    /**\r\n     * 获得节点行中的特殊部分的处理器\r\n     * @returns [\r\n     *      (item, ...)=>[boolean, boolean, value]\r\n     *      //参数：该行文本、其他依赖的对象等 \r\n     *      //返回：是否已处理、是否有有效的结果值、结果值内容\r\n     * ]\r\n     * \r\n     */\r\n    linePartHandlers={\r\n        handleForceRight: (item)=>{\r\n            if ('right:' !== item) {\r\n                return [false,false,null];\r\n            }\r\n\r\n            return [true,true,true];\r\n        },\r\n\r\n        /**\r\n         * 节点默认是折叠状态\r\n         * @param {*} item \r\n         * @returns \r\n         */\r\n        handleZip: (item)=>{\r\n            if ('zip:' !== item) {\r\n                return [false,false,null];\r\n            }\r\n\r\n            return [true,true,false];\r\n        },\r\n\r\n\r\n        handleRef: (item, refs)=>{\r\n            let refPrefixLen = 'ref:'.length;\r\n            if (!item.startsWith(\"ref:\") || item.length <= refPrefixLen) {\r\n                return [false,false,null];\r\n            }\r\n\r\n            if ('undefined' !== typeof (refs[item])) {\r\n                let ref = {\r\n                    name: item,\r\n                    showname: item.substring(refPrefixLen).trim(),\r\n                    txt: refs[item],\r\n                    parsedTxt: null,\r\n                };\r\n                return [true,true,ref];\r\n            }\r\n            return [true,false,null];\r\n        },\r\n\r\n        handleGraph:(item, graphs)=>{\r\n            let graphfPrefixLen = 'graph:'.length;\r\n            if (!item.startsWith(\"graph:\") || item.length <= graphfPrefixLen) {\r\n                return [false,false,null];\r\n            }\r\n\r\n            if ('undefined' !== typeof (graphs[item])) {\r\n                let graph = {\r\n                    name: item,\r\n                    showname: item.substring(graphfPrefixLen).trim(),\r\n                    items: graphs[item],\r\n                }\r\n                return [true,true,graph];\r\n            }\r\n            return [true,false,null];\r\n        },\r\n\r\n        handleLineColor:(item)=>{\r\n            if (!item.startsWith(\"c:\")) {\r\n                return [false,false,null];\r\n            }\r\n\r\n            if(item.length > 20){\r\n                return [true,false,null];\r\n            }\r\n            let lineColor = item.substring(\"c:\".length).trim();//如果出现多次，则以最后一次为准\r\n            return [true,true,lineColor];\r\n        },\r\n        \r\n        handleMemo:(item)=>{\r\n            if (!item.startsWith(\"m:\")) {\r\n                return [false,false,null];\r\n            }\r\n            let memo=item.substring(\"m:\".length).trim();//备注可以出现多个，最终加入数组中\r\n            if(null==memo || ''===memo.trim()){\r\n                return [true,false,null];\r\n            }\r\n            return [true,true,memo];\r\n        },\r\n\r\n        handleCommonLink:(item, isUrlPattern)=>{\r\n            let urlPattern = isUrlPattern(item);\r\n            if (false === urlPattern) {\r\n                return [false,false,null];\r\n            }\r\n\r\n            let link={\r\n                name: null,\r\n                addr: urlPattern\r\n            };\r\n            return [true,true,link];\r\n        },\r\n\r\n        handleMarkdownLink:(item, hasUrlPrefix)=>{\r\n            //是markdown链接 [文字](地址)\r\n            if (!(/^\\[.*?\\]\\(.+?\\)$/.test(item))) {\r\n                return [false,false,null];\r\n            }\r\n\r\n            let txt = item.substring(1, item.lastIndexOf(\"]\")).trim();\r\n            let url = item.substring(item.indexOf(\"(\") + 1, item.length - 1).trim();\r\n            if(null===txt || ''===txt || \"\"===txt.trim()){\r\n                if(url.startsWith(\"cmd://\")){\r\n                    txt='执行命令';\r\n                }else if(url.startsWith(\"cp://\")){\r\n                    txt='复制';\r\n                }else if(url.startsWith(\"dir://\")){\r\n                    txt='打开目录并选择';\r\n                }else{\r\n                    txt='打开';\r\n                }\r\n            }\r\n\r\n            if (hasUrlPrefix(url)) {\r\n                url=url+\"\";\r\n            }else if(url.startsWith(\"./\")){\r\n                url=api.calcAttUrl(\"\",url);\r\n            }else{\r\n                url = \"http://\" + url;\r\n            }\r\n\r\n            let link={\r\n                name: txt,\r\n                addr: url\r\n            };\r\n            return [true,true,link];\r\n        },\r\n\r\n        handleGant:(item)=>{\r\n            let gantItem=ganttSvc.parseGantItem(item);\r\n            if(false===gantItem){\r\n                return [false,false,null];\r\n            }\r\n            return [true,true,gantItem];\r\n        },\r\n\r\n        handleProg:(item, progs)=>{\r\n            let progMatchItems=/^p[:]([-]?)([0-9]{1,3})$/.exec(item);\r\n            if(!(item.startsWith(\"p:\") && progMatchItems)){\r\n                return [false,false,null];\r\n            }\r\n\r\n            let isErr=(progMatchItems[1]?true:false);\r\n            let num=parseInt(progMatchItems[2]);\r\n            num=(num>100?100:num);\r\n            let msg=(isErr?\"完成到 \"+num+\"% 时出现错误\":(100===num?\"已完成\":\"已完成 \"+num+\"%\"));\r\n\r\n            let prog={\r\n                num: num,\r\n                txt: null,//稍后加入\r\n                st: isErr?'exception':(100===num?'success':'normal'),\r\n                allProgs: progs,\r\n                msg: msg,\r\n                err : isErr,\r\n                done: !isErr && 100===num,\r\n                doing: !isErr && 100>num,\r\n            };\r\n            return [true,true,prog];\r\n        },\r\n\r\n        handleDate:(item, timeline, parseDateInfo)=>{\r\n            //匹配规则：[0]整串  [1]日期部分  [2],purple  [3]purple\r\n            let dateMatchItems = /^d[:]([0-9]{2}[-/.][0-9]{1,2}[-/.][0-9]{1,2})(,(.{0,25}))?$/.exec(item);\r\n            if (!(item.startsWith(\"d:\") && dateMatchItems && dateMatchItems[1])) {\r\n                return [false,false,null];\r\n            }\r\n\r\n            let dateItem = {\r\n                fullDate: '', //2020-05-23 五\r\n                msg: '', //昨天、前天、大前天，过期x天，今天、明天、后天、大后天，还差x天\r\n                abbrDate: '', //是当年： 5/23   不是当年 22/3/20,\r\n                timeline: timeline, //时间线对象\r\n                color: null,\r\n                txt: null,//稍后加入\r\n                expired:false,\r\n                near:false,\r\n                future:false,\r\n            };\r\n            dateItem=parseDateInfo(dateItem,dateMatchItems[1],dateMatchItems[3]);\r\n            return [true,true,dateItem];\r\n        },\r\n    };\r\n\r\n\r\n    \r\n\r\n    /**\r\n     * 根据指定文本，加载节点信息（树型结构）\r\n     * @param {arrayOrTxt} 文本数组或由包含换行符的字符串\r\n     * @returns {nd} 包含各层节点信息的根节点\r\n     */\r\n    load = (arrayOrTxt) => {\r\n        let lastNd = null;\r\n        let root = null;\r\n        let timeline = [];//时间线对象，后面会往里放\r\n        let progs=[];\r\n        let gantData={\r\n            gantItems:[],\r\n        };\r\n        let nodeIdCounter=0;\r\n        let nodeIdPrefix=\"nd_\"+new Date().getTime()+\"_\";\r\n\r\n        let { ndLines, refs, graphs} = this.loadParts(arrayOrTxt);\r\n\r\n        ndLines.forEach(str => {           \r\n            //=============数据行开始======================\r\n\r\n            let lev = str.indexOf(\"-\");//减号之前有几个字符即为缩进几层，层数从0开始计\r\n            let txt = str.substring(lev + 1).trim();\r\n            let txts=[txt];\r\n            let lineColor = null;\r\n            let memo = [];\r\n            let links = [];\r\n            let expand = true;\r\n            let ref = null;\r\n            let dateItem = null;\r\n            let prog=null;\r\n            let gant=null;\r\n            let graph=null;//关系图\r\n            let forceRight=false;\r\n\r\n\r\n            //内容是简单类型，把转换的竖线再恢复回来\r\n            let replTxt=escapeVLine(txt);\r\n            if (0 > replTxt.indexOf(\"|\")) {\r\n                txt=unescapeVLine(replTxt);\r\n                txts=[txt];\r\n            }\r\n\r\n            //内容是复合类型，则分别计算每一部分\r\n            if (0 <= replTxt.indexOf(\"|\")) {\r\n                txts=[];\r\n                replTxt.split('|').map(txt=>unescapeVLine(txt)).forEach(tmp => {\r\n                    //=============指定行的项开始======================\r\n                    \r\n                    let item = tmp.trim();\r\n                    if (null == item || \"\" === item) { return; }\r\n\r\n                    //forceRight\r\n                    let [handled,hasVal,val]=this.linePartHandlers.handleForceRight(item);\r\n                    if(handled){\r\n                        if(hasVal){\r\n                            forceRight = val;\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    //节点默认是折叠状态\r\n                    [handled,hasVal,val]=this.linePartHandlers.handleZip(item);\r\n                    if(handled){\r\n                        if(hasVal){\r\n                            expand = val;\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    //是引用\r\n                    [handled,hasVal,val]=this.linePartHandlers.handleRef(item, refs);\r\n                    if(handled){\r\n                        if(hasVal){\r\n                            ref=val;\r\n                        }\r\n                        return;\r\n                    }\r\n                    \r\n                    //是关系图引用\r\n                    [handled,hasVal,val]=this.linePartHandlers.handleGraph(item, graphs);\r\n                    if(handled){\r\n                        if(hasVal){\r\n                            graph=val;\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    //是颜色标记  c:red  c:#fcfcfc \r\n                    [handled,hasVal,val]=this.linePartHandlers.handleLineColor(item);\r\n                    if(handled){\r\n                        if(hasVal){\r\n                            lineColor=val;\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    //是备注标记  m:说明\r\n                    [handled,hasVal,val]=this.linePartHandlers.handleMemo(item);\r\n                    if(handled){\r\n                        if(hasVal){\r\n                            memo.push(val);\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    //是普通链接  http://www.xxx.com\r\n                    [handled,hasVal,val]=this.linePartHandlers.handleCommonLink(item, this.isUrlPattern);\r\n                    if(handled){\r\n                        if(hasVal){\r\n                            links.push(val);\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n\r\n                    //是甘特图标识\r\n                    [handled,hasVal,val]=this.linePartHandlers.handleGant(item);\r\n                    if(handled){\r\n                        if(hasVal){\r\n                            gantData.gantItems.push(val);\r\n                            gant=gantData;\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    //进度   p:10   p:-20   \r\n                    [handled,hasVal,val]=this.linePartHandlers.handleProg(item, progs);\r\n                    if(handled){\r\n                        if(hasVal){\r\n                            prog=val;\r\n                            progs.push(prog);//保持加入的顺序不变，后面不用排序\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    //日期类型 d:20.1.8、d:20.1.8,purple\r\n                    [handled,hasVal,val]=this.linePartHandlers.handleDate(item,timeline,this.parseDateInfo);\r\n                    if(handled){\r\n                        if(hasVal){\r\n                            dateItem=val;\r\n                            timeline.push(dateItem);//保持加入的顺序不变，后面不用排序\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    //是markdown链接 [文字](地址)\r\n                    [handled,hasVal,val]=this.linePartHandlers.handleMarkdownLink(item,this.hasUrlPrefix);\r\n                    if(handled){\r\n                        if(hasVal){\r\n                            links.push(val);\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    //都不是，即为文本内容\r\n                    txts.push(item);//如出现多次，只保留最后一次\r\n\r\n                    //-------------指定行的项结束----------------------\r\n                });\r\n            }\r\n\r\n            //整行加载完之后，设置日期项对应的文本\r\n            if (dateItem) {\r\n                dateItem.txt = txts;\r\n            }\r\n            if(prog){\r\n                prog.txt=txts;\r\n            }\r\n            if(gant){\r\n                gant.gantItems[gant.gantItems.length-1].task=txts;\r\n            }\r\n\r\n\r\n            let nd = {\r\n                id: nodeIdPrefix+(++nodeIdCounter),\r\n                lev: lev,\r\n                str: txts,\r\n                left: false,\r\n                par: null,\r\n                parid:null,\r\n                color: lineColor,\r\n                memo: memo,\r\n                links: links,\r\n                childs: [],\r\n                leaf: false,         //是否为叶节点\r\n                expand: expand,      //展开状态\r\n                defExp: expand,      //默认展开状态\r\n                ref: ref,\r\n                dateItem: dateItem,\r\n                prog: prog,\r\n                gant:gant,\r\n                graph:graph,\r\n                forceRight: (0===lev?forceRight:false), //只有根节点才有可能设置forceRight，其他节点一律为false\r\n            };\r\n\r\n            // console.log(\"关系图2\",nd);\r\n\r\n\r\n            //还没有第一个节点，以第一个节点为根节点\r\n            if (null == root) {\r\n                root = nd;\r\n                lastNd = nd;\r\n                return;\r\n            }\r\n\r\n            //当前节点的父节点为从上一个节点向父层找第一个匹配 lev=当前节点lev-1 的节点\r\n            let targetLev = nd.lev - 1;\r\n            let tmpNd = lastNd;\r\n            while (tmpNd.lev > targetLev) {\r\n                tmpNd = tmpNd.par;\r\n            }\r\n            nd.par = tmpNd;\r\n            nd.parid=tmpNd.id;\r\n            tmpNd.childs.push(nd);\r\n\r\n            //每次处理完一次记录上个节点\r\n            lastNd = nd;\r\n\r\n            //-------------数据行结束----------------------\r\n        });\r\n\r\n        \r\n        //从顶部开始递归设置叶节点标志\r\n        this.setLeaf(root);\r\n\r\n        //所有节点所加载完宾，对时间线排序\r\n        timeline.sort((t1, t2) => {\r\n            if (t1.fullDate === t2.fullDate) {\r\n                return 0;\r\n            }\r\n            return t1.fullDate < t2.fullDate ? -1 : 1;\r\n        });\r\n\r\n\r\n        //甘特图处理\r\n        // console.log(\"甘\",gantData);\r\n\r\n        let {data,colKeys,relas}=ganttSvc.parseGantData(gantData.gantItems)\r\n        gantData.data=data;\r\n        gantData.colKeys=colKeys;\r\n        gantData.relas=relas;\r\n        // console.log(data);\r\n        \r\n        return root;\r\n    }\r\n\r\n\r\n    getVisualND=(par,lev,left=false)=>{\r\n        return {\r\n            lev: lev,\r\n            str: \"　\",\r\n            left: left,\r\n            par: par,\r\n            color: \"transparent\",\r\n            memo: [],\r\n            links: [],\r\n            childs: [],\r\n            leaf: true,         //是否为叶节点\r\n            expand: true,      //默认全部展开\r\n            ref: null,\r\n            dateItem: null,\r\n            prog: null,\r\n            visual:true,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 把只有两棵子树并且每个子树最多只有一个叶节点的节点，在两子树之间增加一个虚拟节点，以使最终图表好年\r\n     */\r\n    convertTwoSub2ThreeSub=(nd)=>{\r\n        if(nd.leaf || !nd.expand){\r\n            return;\r\n        }\r\n    }\r\n\r\n\r\n    parseDateInfo=(dateItem,datePart,colorPart)=>{\r\n        //指定的日期\r\n        let ymd = datePart.replace(/[-/.]/g, '|').split('|').map(eachPart => parseInt(eachPart));\r\n        let assignedDate = new Date(2000 + ymd[0], ymd[1] - 1, ymd[2]);//月份从0开始\r\n\r\n        //当前日期\r\n        let now = new Date();\r\n        now.setHours(0);\r\n        now.setMinutes(0);\r\n        now.setSeconds(0);\r\n        now.setMilliseconds(0);\r\n\r\n        //日期全称\r\n        dateItem.fullDate=\"\"+(2000 + ymd[0])+\"-\"+(ymd[1]<10?\"0\":\"\")+ymd[1]+\"-\"+(ymd[2]<10?\"0\":\"\")+ymd[2]+\" \";\r\n        let dayOfWeek=['日','一','二','三','四','五','六'][assignedDate.getDay()];\r\n        dateItem.fullDate+=dayOfWeek;\r\n\r\n        //日期简称\r\n        dateItem.abbrDate='';\r\n        if(assignedDate.getFullYear()!==now.getFullYear()){\r\n            dateItem.abbrDate+=ymd[0]+\"/\"\r\n        }\r\n        dateItem.abbrDate+=ymd[1]+\"/\"\r\n        dateItem.abbrDate+=ymd[2];\r\n\r\n        //指定日期与当前日期相差的天数\r\n        let dist=Math.abs((now - assignedDate)/86400000);\r\n\r\n        //指定日期小于当前日期，过期，显示为红色\r\n        if (assignedDate < now) {\r\n            dateItem.color = defaultDateColor.expired;\r\n            dateItem.expired=true;\r\n            let dayNames = [undefined, \"昨天\", \"前天\", \"大前天\"];\r\n            dateItem.msg =(dist in dayNames ? dayNames[dist] : \"过期 \" + dist + \" 天\");\r\n        }\r\n        //7天之内为近期任务\r\n        else if (now <= assignedDate && dist <= 7) {\r\n            dateItem.color = defaultDateColor.near;\r\n            dateItem.near=true;\r\n            let dayNames = [\"今天\", \"明天\", \"后天\", \"大后天\"];\r\n\r\n            dateItem.msg =(dist in dayNames ? dayNames[dist]: \"还剩 \" + dist + \" 天\");\r\n        }\r\n        //以后\r\n        else {\r\n            dateItem.color = defaultDateColor.future;\r\n            dateItem.future=true;\r\n            dateItem.msg = dist+\" 天以后\";\r\n        }\r\n\r\n        //手动指定了颜色，则覆盖掉前面的颜色设置。可能是 \"\" 或 \"red\" 的格式，如果是空，则在计算节点颜色时会设置上\r\n        if ('undefined'!==typeof(colorPart)) {\r\n            dateItem.color = colorPart;\r\n        }\r\n        return dateItem;\r\n    }\r\n\r\n    isWrapLine=(line)=>{\r\n        if(line.trim().endsWith(\"\\\\\")){\r\n            return {\r\n                flag: true,\r\n                newLine:  line.substring(0,line.lastIndexOf(\"\\\\\")),\r\n            };\r\n        }\r\n        return {\r\n            flag: false,\r\n            newLine: line,\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 把内容拆分为\r\n     */\r\n    loadParts = (alltxts) => {\r\n        let refs = {};\r\n        let trefs = {};\r\n        let graphs = {};\r\n        let ndLines = [];\r\n        let currRefName = null;\r\n        let alreadyHandleRefs = false;\r\n\r\n        \r\n\r\n        alltxts.trim().replace(/\\r/g, '').split(\"\\n\").forEach(line => {\r\n            if (\"***\" === line.trim() && !alreadyHandleRefs) {\r\n                alreadyHandleRefs = true;\r\n            }\r\n\r\n            //还没到引用部分\r\n            if (!alreadyHandleRefs) {\r\n                if ('' === line.trim()) {\r\n                    return;\r\n                }\r\n                ndLines.push(line);//此处不要trim，因为节点有层级关系，前面有制表符\r\n                return;\r\n            }\r\n\r\n            //已经到引用部分\r\n            //是引用标识符\r\n            let trimLine = line.trim();\r\n            if (    \r\n                    (trimLine.startsWith(\"# ref:\") && trimLine.length > \"# ref:\".length) ||\r\n                    (trimLine.startsWith(\"# tref:\") && trimLine.length > \"# tref:\".length) ||\r\n                    (trimLine.startsWith(\"# graph:\") && trimLine.length > \"# graph:\".length)\r\n            ){\r\n                currRefName = trimLine.substring(\"# \".length);\r\n                return;\r\n            }\r\n\r\n            //还没有当前标识符\r\n            if (null == currRefName) {\r\n                return;\r\n            }\r\n\r\n            //已有当前标识符\r\n            if(currRefName.startsWith(\"ref:\")){\r\n                //是已记录过的引用\r\n                if (\"undefined\" !== typeof (refs[currRefName])) {\r\n                    refs[currRefName] += '\\n' + line;\r\n                    return;\r\n                }\r\n                //是新引用\r\n                refs[currRefName] = line;\r\n                return;\r\n            }else if(currRefName.startsWith(\"tref:\")){\r\n                if(\"\"===trimLine){\r\n                    return;\r\n                }\r\n\r\n                //是已记录过的引用\r\n                if (\"undefined\" !== typeof (trefs[currRefName])) {\r\n                    trefs[currRefName] += trimLine;\r\n                    return;\r\n                }\r\n                //是新引用\r\n                trefs[currRefName] = trimLine;\r\n                return;\r\n            }else if(currRefName.startsWith(\"graph:\")){\r\n                if(\"\"===trimLine){\r\n                    return;\r\n                }\r\n                if(!trimLine.startsWith(\"- \")){\r\n                    return;\r\n                }\r\n                let items=trimLine.substring(\"- \".length)\r\n                    .replaceAll(\"，\",\",\")\r\n                    .replaceAll(\"、\",\",\")\r\n                    .replaceAll(\"|\",\",\")\r\n                    .replaceAll(\"｜\",\",\")                    \r\n                    .replaceAll(\"/\",\",\")\r\n                    .replaceAll(\"／\",\",\")\r\n                    .replaceAll(\"\\\\\",\",\")\r\n                    .replaceAll(\"＼\",\",\")\r\n                    .split(\",\")\r\n                    .filter(each=>null!==each && \"\"!==each.trim())\r\n                    .map(each=>each.trim())\r\n                    .filter((each,ind)=>ind<3);\r\n                if(items.length<3){\r\n                    return;\r\n                }\r\n\r\n                //是已记录过的引用\r\n                if (\"undefined\" !== typeof (graphs[currRefName])) {\r\n                    graphs[currRefName].push(items);\r\n                    return;\r\n                }\r\n                //是新引用\r\n                graphs[currRefName] = [items];\r\n                return;\r\n            }\r\n        });\r\n\r\n\r\n\r\n        // 文字引用直接替换到原文中\r\n        ndLines=ndLines.map(line=>{\r\n            let splitPos=line.indexOf(\"- \")+2;\r\n            let front=line.substring(0,splitPos);\r\n            let end=\"|\"+escapeVLine(line.substring(splitPos).trim())+\"|\";\r\n\r\n            for(let key in trefs){\r\n                end=end.replace(\"|\"+key+\"|\",\"|\"+trefs[key]+\"|\");\r\n            }\r\n            while(end.startsWith(\"|\")){\r\n                end=end.substring(1);\r\n            }\r\n            while(end.endsWith(\"|\")){\r\n                end=end.substring(0,end.length-1);\r\n            }\r\n            return front+unescapeVLineRestore(end.trim());\r\n        });\r\n\r\n        \r\n\r\n        console.log(\"关系图\",graphs);\r\n        return { ndLines, refs, graphs};\r\n    }\r\n\r\n    setLeaf = (nd) => {\r\n        nd.leaf = (0 === nd.childs.length);\r\n        nd.childs.forEach(child => {\r\n            this.setLeaf(child);\r\n        });\r\n    }\r\n\r\n    hasUrlPrefix = (url) => {\r\n        return [\"http://\",\"https://\",\"ftp://\",\"ftps://\",\"file://\",\"dir://\",\"cp://\",\"cmd://\",\"gmap://\",\"//\"].some(prefix=>url.startsWith(prefix));\r\n    }\r\n\r\n    /**\r\n     * 判断是否为url类型\r\n     * @param {*} url \r\n     * @returns 如果是url类型，返回处理过的地址，否则抬false\r\n     */\r\n    isUrlPattern = (url) => {\r\n        if (this.hasUrlPrefix(url)) {\r\n            return url.trim();\r\n        }\r\n        if (url.startsWith(\"www.\") && url.length > \"www.\".length) {\r\n            return \"http://\" + url.trim();\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\n//竖线转义相差工具方法\r\nconst vlineEscapeTxt='___vline___';\r\nconst escapeVLineReg=/[\\\\][|]/g;\r\nconst unescapeVLineReg=new RegExp(vlineEscapeTxt,\"g\");\r\n\r\nconst escapeVLine=(str)=>str.replace(escapeVLineReg,vlineEscapeTxt);\r\nconst unescapeVLine=(str)=>str.replace(unescapeVLineReg,'|');\r\nconst unescapeVLineRestore=(str)=>str.replace(unescapeVLineReg,'\\\\|');\r\n\r\n\r\nconst hasBord = (item, type) => {\r\n    return type === (type & item.cls);\r\n}\r\n\r\nconst addBord = (item, type) => {\r\n    item.cls |= type;\r\n}\r\n\r\nconst removeBord = (item, type) => {\r\n    item.cls &= (~type);\r\n}\r\n\r\n\r\n/*\r\n{\r\n    expired:'', //过期\r\n    near:'',    //近几天\r\n    future:''   //以后\r\n}\r\n*/\r\nlet defaultDateColor = null;\r\nlet defaultLineColor = null;\r\nlet bordType = null;\r\nlet getBorderStyle = null;\r\nlet themeStyles = [null, null, null];\r\n\r\nconst inst=new MindmapSvc();\r\n\r\nexport default {\r\n    hasUrlPrefix:       inst.hasUrlPrefix,\r\n    toggleExpandNode:   inst.toggleExpandNode,\r\n    parseMindMapData:   inst.parseMindMapData,\r\n    parseRootNode:      inst.parseRootNode,\r\n\r\n    isAllNodeExpand:    inst.isAllNodeExpand,\r\n    expandAllNds:       inst.expandAllNds,\r\n    isAnyNdExpStChanged:inst.isAnyNdExpStChanged,\r\n    restoreAllNdExpSts: inst.restoreAllNdExpSts,\r\n\r\n    isNodeExpandRecursively:inst.isNodeExpandRecursively,\r\n    isNdExpStChangedRecursively:inst.isNdExpStChangedRecursively,\r\n    expandNode:inst.expandNode,\r\n    restoreNode:inst.restoreNode,\r\n};","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\MapsViewer.js",["248","249","250","251","252","253"],"/** @jsxImportSource @emotion/react */\r\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { Layout, message,Modal } from 'antd';\r\n\r\nimport Welcome from './views/Welcome';\r\nimport OpenGraphDlg from './views/OpenGraphDlg';\r\nimport NewGraphDlg from './views/NewGraphDlg';\r\nimport EditGraphDlg from './views/EditGraphDlg';\r\nimport RelaChartDlg from './views/RelaChartDlg';\r\nimport Toolbar from './views/Toolbar';\r\nimport GraphTabs from './views/GraphTabs';\r\nimport RefViewer from './views/RefViewer';\r\nimport TimelineViewer from './views/TimelineViewer';\r\nimport ProgsViewer from './views/ProgsViewer';\r\nimport GantDlg from './views/gantt/GantDlg';\r\n\r\n\r\nimport * as uiUtil from '../../common/uiUtil';\r\nimport {connect,dispatcher} from '../../common/gflow';\r\nimport api from '../../service/api';\r\nimport screenShot from '../../service/screenShot';\r\nimport { useSelector } from 'react-redux';\r\nimport keyDetector from '../../common/keyDetector';\r\nimport expSvc from '../../service/expSvc';\r\nimport marked from 'marked';\r\n\r\nconst { Content } = Layout;\r\n\r\n\r\n/**\r\n * panes格式：\r\n * [\r\n *      {\r\n *          title: name,\r\n *          key: fullpath,\r\n *          mapTxts: defMapTxt,\r\n *          mapCells: cells\r\n *      }\r\n * ]\r\n * \r\n * filelist格式：\r\n * [\r\n *      {\r\n *          showname:'数据结构',\r\n *          fullpath:'d:/a/b/c/数据结构.md',\r\n *          size:'108K'\r\n *      }\r\n * ]\r\n */\r\nconst MapsViewer=(props)=>{\r\n    const {hasPane,installPathValid,activeKey,panes}= useSelector((state)=>({\r\n        hasPane:            state.tabs && state.tabs.panes && 0 < state.tabs.panes.length,\r\n        installPathValid:   state.common.installPathValid,\r\n        activeKey:          state.tabs.activeKey,\r\n        panes:              state.tabs.panes,\r\n    }));\r\n\r\n\r\n    const [newMapDlgVisible, setNewMapDlgVisible]=useState(false);\r\n    const [selMapDlgVisible, setSelMapDlgVisible]=useState(false);\r\n\r\n    const [relaChartDlgVisible, setRelaChartDlgVisible]=useState(false);\r\n\r\n    const [graphObj, setGraphObj]=useState([]);\r\n    \r\n\r\n    const [{currMapName,editTmpTxt,editMapDlgVisible}, setEditDlgState]= useState({\r\n        currMapName: '',\r\n        editTmpTxt: '',\r\n        editMapDlgVisible: false,\r\n    });\r\n\r\n    const [{gantdlgVisible, gantObj}, setGantdlgState]=useState({\r\n        gantdlgVisible: false,\r\n        gantObj:null,\r\n    });\r\n\r\n    const [{refViewerDlgVisible, currRefObj}, setRefViewerDlgState]=useState({\r\n        refViewerDlgVisible: false,\r\n        currRefObj:{},\r\n    });\r\n\r\n    const [{timelineDlgVisible, timelineObj}, setTimelineDlgState]=useState({\r\n        timelineDlgVisible: false,\r\n        timelineObj: [],\r\n    });\r\n\r\n    const [{progsDlgVisible, progsObj}, setProgsDlgState]=useState({\r\n        progsDlgVisible: false,\r\n            progsObj: [],\r\n    });\r\n\r\n    useEffect(()=>{\r\n        if(!installPathValid){\r\n            Modal.warning({\r\n                title: '警告',\r\n                content: '请不要安装到中文路径或带空格的路径下，否则可能造成某些功能异常',\r\n            });\r\n            return;\r\n        }\r\n    },[installPathValid]);\r\n\r\n\r\n    \r\n    \r\n\r\n    const closeAllDlg =useCallback(() => {\r\n        setNewMapDlgVisible(false);\r\n        setSelMapDlgVisible(false);\r\n        setEditDlgState((state)=>({...state, editMapDlgVisible:false}));\r\n        setRefViewerDlgState((state)=>({...state, refViewerDlgVisible:false}));\r\n        setTimelineDlgState((state)=>({...state, timelineDlgVisible:false}));\r\n        setProgsDlgState((state)=>({...state, progsDlgVisible:false}));\r\n        setGantdlgState((state)=>({...state, gantdlgVisible:false}));\r\n        setRelaChartDlgVisible(false);\r\n    },[\r\n        setNewMapDlgVisible,\r\n        setSelMapDlgVisible,\r\n        setEditDlgState,\r\n        setRefViewerDlgState,\r\n        setTimelineDlgState,\r\n        setProgsDlgState,\r\n        setGantdlgState,\r\n        setRelaChartDlgVisible\r\n    ]);\r\n\r\n\r\n\r\n    /**\r\n     * 初始化查找快捷键，并在组件销毁时移除\r\n     */\r\n    useEffect(()=>{\r\n        const keyHandle=(e)=>{\r\n            //当编辑窗口或新建窗口打开时，不支持查找功能\r\n            const excludeStates=[editMapDlgVisible, newMapDlgVisible];\r\n            const isExclude=excludeStates.some(each=>true===each);\r\n\r\n            keyDetector.on(e,{\r\n                //ctrl+f 网页内查找\r\n                'ctrl+f':(e)=>{\r\n                    if(isExclude){return;}\r\n                    api.showFindInPageDlg();\r\n                },\r\n\r\n                //esc 关闭网页内查找\r\n                'esc':(e)=>{\r\n                    if(isExclude){return;}\r\n                    api.closeFindInPageDlg();\r\n                },\r\n            });\r\n        }\r\n\r\n        document.addEventListener('keydown', keyHandle);\r\n        return ()=>document.removeEventListener('keydown',keyHandle);\r\n    },[editMapDlgVisible, newMapDlgVisible]);\r\n\r\n    useEffect(()=>{\r\n        api.closeFindInPageDlg();\r\n    },[hasPane]);\r\n\r\n\r\n\r\n    //------------新建图表操作----------------------------------------------------------------------\r\n    const onShowNewMapDlg =useCallback(() => {\r\n        api.closeFindInPageDlg();\r\n        setNewMapDlgVisible(true);\r\n    },[setNewMapDlgVisible]);\r\n\r\n\r\n    const onNewMapDlgOK =useCallback(async ({dir,name}) => {\r\n        try {\r\n            await dispatcher.tabs.onNewMapPromise({dir,name});\r\n            setNewMapDlgVisible(false);\r\n        } catch (error) {\r\n        }\r\n    },[dispatcher, setNewMapDlgVisible]);\r\n\r\n\r\n    //------------修改导图----------------------------------------------------------------------\r\n    const onShowEditMapDlg =useCallback(async () => {\r\n        try {\r\n            api.closeFindInPageDlg();\r\n            let currPane=await dispatcher.tabs.selectCurrPanePromise();\r\n            setEditDlgState({\r\n                editMapDlgVisible: true,\r\n                editTmpTxt: currPane.mapTxts,\r\n                currMapName: currPane.title\r\n            });\r\n        } catch (error) {\r\n        }\r\n    },[dispatcher, setEditDlgState]);\r\n\r\n    const onChangeEditTmpTxt =useCallback((editor, data, value) => {\r\n        setEditDlgState((state)=>({...state, editTmpTxt: value}));\r\n    },[setEditDlgState]);\r\n\r\n    const onEditMapDlgOK =useCallback(async (closeDlg = true) => {\r\n        try {\r\n            let txt = editTmpTxt;\r\n            await dispatcher.tabs.onSaveMapPromise(txt);\r\n            setEditDlgState(state=>({...state, editMapDlgVisible: !closeDlg}));\r\n            if (!closeDlg) {\r\n                message.success(\"图表内容已保存\");\r\n            }\r\n        } catch (error) {\r\n        }\r\n    },[dispatcher, setEditDlgState, editTmpTxt]);\r\n\r\n\r\n\r\n    //------------选择文件功能----------------------------------------------------------------------\r\n    const onSelectMapItem =useCallback(async (item) => {\r\n        try{\r\n            await dispatcher.tabs.onSelItemPromise(item);\r\n            setSelMapDlgVisible(false);\r\n        }catch(e){\r\n        }\r\n    },[dispatcher, setSelMapDlgVisible]);\r\n\r\n\r\n    const showSelMapDlg =useCallback(() => {\r\n        setSelMapDlgVisible(true);\r\n    },[setSelMapDlgVisible]);\r\n\r\n\r\n\r\n    //------------导图的操作----------------------------------------------------------------------\r\n\r\n    const onShowTimeline =useCallback((timelineObj) => {\r\n        setTimelineDlgState({\r\n            timelineDlgVisible: true,\r\n            timelineObj: timelineObj,\r\n        });\r\n    },[setTimelineDlgState]);\r\n\r\n    const onShowProgs =useCallback((progs) => {\r\n        setProgsDlgState({\r\n            progsObj: progs,\r\n            progsDlgVisible: true,\r\n        });\r\n    },[setProgsDlgState]);\r\n\r\n    const onShowGant =useCallback((gantObj) => {\r\n        setGantdlgState({\r\n            gantdlgVisible: true,\r\n            gantObj,\r\n        });\r\n    },[setGantdlgState]);\r\n\r\n    const onShowGraph=(graph)=>{\r\n        console.log(\"显示关系图\",graph);\r\n        setGraphObj(graph);\r\n        setRelaChartDlgVisible(true);\r\n\r\n        \r\n    };\r\n\r\n    const openRef =useCallback((refObj) => {\r\n        setRefViewerDlgState({\r\n            currRefObj: refObj,\r\n            refViewerDlgVisible: true,\r\n        });\r\n    },[setRefViewerDlgState]);\r\n\r\n\r\n\r\n    const onExpHtml=useCallback(()=>{\r\n        panes.filter(item=>activeKey===item.key).forEach((item,ind)=>{\r\n            const fromInd=item.key.lastIndexOf(\"\\\\\")+1;\r\n            const name=item.key.substring(fromInd,item.key.length-3);\r\n            console.log(name);\r\n            expSvc.expHtml(name,marked(item.mapTxts));\r\n        });\r\n    },[activeKey, panes]);\r\n\r\n    \r\n    const onExpMarkdown=useCallback(()=>{\r\n        panes.filter(item=>activeKey===item.key).forEach((item,ind)=>{\r\n            expSvc.expMarkdown(item.mapTxts);\r\n        });\r\n    },[activeKey, panes]);\r\n\r\n\r\n    const onExpImage=useCallback(()=>{\r\n        panes.forEach((item,ind)=>{\r\n            if(activeKey!==item.key){\r\n                return;\r\n            }\r\n            let ele=document.querySelector(`#graphwrapper_${ind}`);\r\n            if(!ele){\r\n                message.warn(\"图表状态异常，无法导出\");\r\n                return;\r\n            }\r\n            let containerEle=ele.parentNode;\r\n            let {x,y}=containerEle.getBoundingClientRect();\r\n\r\n\r\n            if(!api.isMaximized()){\r\n                message.warn(\"请先点击最大化按钮后再导出图片\");\r\n                return;\r\n            }\r\n\r\n\r\n            \r\n            screenShot(\r\n                api.openSaveFileDlg,    //保存文件对话框函数\r\n                api.openUrl,            //执行截屏的函数\r\n                containerEle,           //容器元素\r\n                ele,                    //内容元素\r\n                Math.floor(x),          //开始截取的位置相对于浏览器主体内容区域左边的距离\r\n                Math.floor(y),          //开始截取的位置相对于浏览器主体内容区域上边的距离\r\n                api.isDevMode()         //是否考虑菜单栏的高度：开始模式显示菜单栏，运行模式不显示\r\n            );\r\n        });\r\n    },[activeKey, panes]);\r\n\r\n    /***\r\n     * 是否有已打开的对话框\r\n     */\r\n    const hasOpenDlg=useMemo(()=>(\r\n        newMapDlgVisible ||\r\n        editMapDlgVisible ||\r\n        selMapDlgVisible ||\r\n        refViewerDlgVisible ||\r\n        timelineDlgVisible ||\r\n        progsDlgVisible ||\r\n        gantdlgVisible ||\r\n        relaChartDlgVisible\r\n    ),[\r\n        newMapDlgVisible,\r\n        editMapDlgVisible,\r\n        selMapDlgVisible,\r\n        refViewerDlgVisible,\r\n        timelineDlgVisible,\r\n        progsDlgVisible,\r\n        gantdlgVisible,\r\n        relaChartDlgVisible\r\n    ]);\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <Layout>\r\n                {\r\n                    hasPane ?\r\n                        <>\r\n                            <Toolbar\r\n                                onShowNewMapDlg={onShowNewMapDlg}\r\n                                onShowSelMapDlg={showSelMapDlg}\r\n                                onShowEditMapDlg={onShowEditMapDlg}\r\n                                onShowDir={api.openMapsDir}\r\n                                onShowCmd={api.openBash}\r\n                                onShowDevTool={api.showDevTool}\r\n                                onReloadApp={api.reloadAppPage}\r\n                                onExpImage={onExpImage}\r\n                                onExpMarkdown={onExpMarkdown}\r\n                                onExpHtml={onExpHtml}\r\n                                onCopyMapLink={dispatcher.tabs.copyCurrMapLink}\r\n                            />\r\n                            <GraphTabs\r\n                                hasOpenDlg={hasOpenDlg}\r\n                                onOpenLink={api.openUrl}\r\n                                onOpenRef={openRef}\r\n                                onShowTimeline={onShowTimeline}\r\n                                onShowProgs={onShowProgs}\r\n                                onShowGant={onShowGant}\r\n                                onShowGraph={onShowGraph}\r\n                            />\r\n                        </>\r\n\r\n                        :\r\n\r\n                        <Content>\r\n                            <Welcome \r\n                                onOpenMapsDir={api.openMapsDir}\r\n                                onOpenBash={api.openBash}\r\n                                onShowDevTool={api.showDevTool}\r\n                                onReloadApp={api.reloadAppPage}\r\n                                onAddMap={onShowNewMapDlg}\r\n                                onSelectMapItem={onSelectMapItem}/>\r\n                        </Content>\r\n                }\r\n            </Layout>\r\n\r\n            <NewGraphDlg\r\n                visible={newMapDlgVisible}\r\n                onOk={onNewMapDlgOK}\r\n                onCancel={closeAllDlg}\r\n            />\r\n\r\n            <EditGraphDlg\r\n                visible={editMapDlgVisible}\r\n                currMapName={currMapName}\r\n                editTmpTxt={editTmpTxt}\r\n                onOnlySave={onEditMapDlgOK.bind(this, false)}\r\n                onOk={onEditMapDlgOK.bind(this, true)}\r\n                onCancel={closeAllDlg}\r\n                onChangeEditTmpTxt={onChangeEditTmpTxt}\r\n            />\r\n\r\n            <OpenGraphDlg\r\n                visible={selMapDlgVisible}\r\n                onCancel={closeAllDlg}\r\n                onSelectMapItem={onSelectMapItem}\r\n            />\r\n\r\n            <RefViewer\r\n                currRefObj={currRefObj}\r\n                visible={refViewerDlgVisible}\r\n                onCancel={closeAllDlg}\r\n            />\r\n\r\n            <TimelineViewer\r\n                visible={timelineDlgVisible}\r\n                timelineObj={timelineObj}\r\n                onCancel={closeAllDlg}\r\n            />\r\n\r\n            <ProgsViewer\r\n                visible={progsDlgVisible}\r\n                progsObj={progsObj}\r\n                onCancel={closeAllDlg}\r\n            />\r\n\r\n            <GantDlg\r\n                visible={gantdlgVisible}\r\n                gantObj={gantObj}\r\n                onCancel={closeAllDlg}\r\n            />\r\n\r\n            <RelaChartDlg\r\n                visible={relaChartDlgVisible}\r\n                onCancel={closeAllDlg}\r\n                name={graphObj.showname}\r\n                opts={graphObj.items}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n    \r\n}\r\n\r\n\r\n\r\nexport default React.memo(MapsViewer);\r\n\r\n","D:\\ws\\web\\gmap-ui\\src\\service\\expSvc.js",["254","255","256","257","258","259","260","261","262"],"import api from './api';\r\nimport { Layout,   Tabs, Modal, Input, message, Button, Divider,Popover,BackTop,Avatar } from 'antd';\r\n\r\nclass ExpSvc{\r\n    expHtml=(title='', content='')=>{\r\n        let path=api.openSaveFileDlg(\"html\");\r\n        if(!path){\r\n            return;\r\n        }\r\n        let txt=api.load(`${api.getBasePath()}\\\\tmpl_exp_html.html`).replace('#title#',title).replace('#cont#',content);\r\n        api.save(path, txt);\r\n        message.success(\"导出html完成\");\r\n        console.log(\"导出html完成\");\r\n    };\r\n\r\n    expMarkdown=(content='')=>{\r\n        let path=api.openSaveFileDlg(\"md\");\r\n        if(!path){\r\n            return;\r\n        }\r\n        api.save(path, content);\r\n        message.success(\"导出markdown完成\");\r\n        console.log(\"导出markdown完成\");\r\n    };\r\n}\r\n\r\nexport default new ExpSvc();","D:\\ws\\web\\gmap-ui\\src\\service\\ganttSvc.js",["263","264","265","266","267"],"import dateUtil from '../common/dateUtil';\r\n\r\nclass GanttSvc{\r\n    /**\r\n     * 解析甘特图的一行记录，如果失败返回false，成功返回解析后的对象\r\n     */\r\n    parseGantItem=(str=\"\")=>{\r\n        /*\r\n        配置\r\n        使用两个逗号分隔的四部分：id, 起始日期/上个任务id, 结束日期/天数, 进度（0~100）\r\n        g:task1,20.3.5,20.4.5,40   //id  起始日期 结束日期 进度\r\n        g:taskx,20.3.5,12,0         //id  起始日期 天数 进度\r\n        g:taskm,task1,3,20          //id 从20.4.6开始（引用的任务的结果日期的后一天） 到20.4.8为结束日期，完成 20%\r\n        */\r\n\r\n        let ret=/^g[:]([^,]{1,50})[,]([^,]{1,50})[,]([-/.0-9]{1,8})[,]([0-9]{1,3})$/;\r\n        let mathResult=str.match(ret);\r\n        if(!mathResult){\r\n            return false;\r\n        }\r\n        let id=mathResult[1];\r\n        let startOrLastId=mathResult[2];\r\n        let endOrDays=mathResult[3];\r\n        let prog=parseInt(mathResult[4]);\r\n\r\n        //开始日期或引用id\r\n        let dateReg=/^[0-9]{2}[-/.][0-9]{1,2}[-/.][0-9]{1,2}$/;\r\n        if(dateReg.test(startOrLastId)){\r\n            startOrLastId={\r\n                isDate:true,\r\n                ymd:startOrLastId.replace(/[-/.]/g, '|').split('|').map((eachPart,ind) => parseInt(eachPart)+(0===ind?2000:0)),\r\n            };\r\n        }else{\r\n            startOrLastId={\r\n                isRef:true,\r\n                refId:startOrLastId,\r\n                ymd:null,\r\n            };\r\n        }\r\n\r\n        //结束日期或天数\r\n        if(dateReg.test(endOrDays)){\r\n            endOrDays={\r\n                isDate:true,\r\n                ymd:endOrDays.replace(/[-/.]/g, '|').split('|').map((eachPart,ind) => parseInt(eachPart)+(0===ind?2000:0)),\r\n            };\r\n        }else if(/^[0-9]{1,5}$/.test(endOrDays)){\r\n            endOrDays={\r\n                isDays:true,\r\n                days:parseInt(endOrDays),\r\n                ymd:null,\r\n            };\r\n        }else{\r\n            return false;\r\n        }\r\n\r\n\r\n        return {id,startObj:startOrLastId,endObj:endOrDays,prog};\r\n    }\r\n\r\n\r\n    /**\r\n     * 把甘特图数据解析成最终表格需要的数据\r\n     */\r\n    parseGantData=(gantItems=[])=>{\r\n        // let samples=[\r\n        //     \"g:task1,20.3.5,20.3.10,40\",\r\n        //     \"g:taskx,20.3.9,4,50\",\r\n        //     \"g:taskm,task1,10,100\",\r\n        //     \"g:task4,20.4/6,3,30\",\r\n        //     \"g:task4,20.4/6,3,30\",\r\n        //     \"g:task4,20.4/6,3,30\",\r\n        //     \"g:task4,20.4/6,3,30\",\r\n        //     \"g:task4,20.4/6,3,30\",\r\n        //     \"g:task4,20.4/6,3,30\",\r\n        //     \"g:task4,20.4/6,3,30\",\r\n        //     \"g:task4,20.4/6,10,30\",\r\n        // ];\r\n\r\n        if(!gantItems || 0===gantItems.length){\r\n            return {data:[],colKeys:[],relas:[]};\r\n        }\r\n\r\n        // let gantItems=[];\r\n        let minDay=[2055,12,31];\r\n        let maxDay=[2000,1,1];\r\n        let daysSpan=0;\r\n        \r\n\r\n        //迭代每个对象，计算准确的开始结束日期，任务天数等\r\n        gantItems.forEach((gant,ind)=>{\r\n            //计算起始日期\r\n            //起始日期是引用类型\r\n            if(gant.startObj.isRef){\r\n                let refItem=null;\r\n                let refInd=-1;\r\n\r\n                \r\n                //按引用id查找引用的任务\r\n                for(let i=0;i<ind;++i){\r\n                    let ref=gantItems[i];\r\n                    if(ref.id===gant.startObj.refId){\r\n                        refInd=i;\r\n                        refItem=ref;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                //如果没找到，并且格式为 refid+5、refid-3 的形式，\r\n                let daysAdjust=0;\r\n                let splitReg=/^(.+)([+-])([0-9]{1,3})$/;\r\n                let matchItems=gant.startObj.refId.match(splitReg);\r\n                if(null===refItem && matchItems){\r\n                    let rid=matchItems[1];\r\n                    let op=matchItems[2];\r\n                    let days=parseInt(matchItems[3]);\r\n\r\n                    for(let i=0;i<ind;++i){\r\n                        let ref=gantItems[i];\r\n                        if(ref.id===rid){\r\n                            refInd=i;\r\n                            refItem=ref;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if(refItem){\r\n                        daysAdjust=('+'===op?days:0-days);\r\n                    }\r\n                }\r\n\r\n\r\n                \r\n\r\n                // gantItems.forEach((ref,ind)=>{\r\n                //     if(ref.id===gant.startObj.refId){\r\n                //         refInd=ind;\r\n                //         refItem=ref;\r\n                //         return;\r\n                //     }\r\n                // });\r\n\r\n                if(!refItem){\r\n                    throw \"甘特图中未找到依赖的任务项，请确保被依赖项必须出现在依赖项之前。任务名称：\"+gant.task;\r\n                }\r\n                if(!refItem.end){\r\n                    throw \"甘特图的被依赖项的时间无法计算得到。任务名称：\"+gant.task;\r\n                }\r\n                let tmpDate=dateUtil.addDays(refItem.end,1+daysAdjust);               \r\n                gant.start=tmpDate;\r\n                gant.hasDep=true;\r\n                gant.depInd=refInd;\r\n                console.log(\"gant.depInd\",gant.depInd);\r\n                //引用关系\r\n            }\r\n            //起始日期是固定的日期\r\n            else{\r\n                gant.start=gant.startObj.ymd;\r\n            }\r\n\r\n            //计算结束日期\r\n            //结束日期是天数\r\n            if(gant.endObj.isDays){\r\n                if(!gant.start){\r\n                    throw \"甘特图的起始时间无法计算得到\";\r\n                }\r\n                \r\n                let tmpDate=dateUtil.addDays(gant.start,gant.endObj.days-1);                \r\n                gant.end=tmpDate;\r\n                gant.days=gant.endObj.days;\r\n            }\r\n            //结束日期是固定的日期\r\n            else{\r\n                gant.end=gant.endObj.ymd;\r\n                gant.days=dateUtil.distDays(gant.end,gant.start)+1;\r\n            }\r\n\r\n\r\n            if(dateUtil.dateLargeThan(gant.start,gant.end)){\r\n                throw \"甘特图的初始日期不能在结束日期之后。任务名称：\"+gant.task;\r\n            }\r\n\r\n\r\n\r\n            if(dateUtil.dateSmallThan(gant.start,minDay)){\r\n                minDay=gant.start;\r\n            }\r\n            if(dateUtil.dateLargeThan(gant.end,maxDay)){\r\n                maxDay=gant.end;\r\n            }\r\n\r\n            gant.overlim=false;\r\n            if(dateUtil.dateSmallThan(gant.end,dateUtil.currDayYMD()) && gant.prog<100){\r\n                gant.overlim=true;\r\n            }\r\n\r\n            // console.log(\"计算后\",gant);\r\n        });\r\n\r\n\r\n        \r\n        \r\n        //日期范围边界至少比实际日期范围多 3 天\r\n        minDay=dateUtil.addDays(minDay,-3);\r\n        maxDay=dateUtil.addDays(maxDay,3);\r\n\r\n        //保证日期间隔不小于30天\r\n        daysSpan=dateUtil.distDays(minDay,maxDay);\r\n        if(daysSpan<30){\r\n            let supply=parseInt((30-daysSpan+1)/2);\r\n            minDay=dateUtil.addDays(minDay,0-supply);\r\n            maxDay=dateUtil.addDays(maxDay,supply);\r\n            daysSpan=dateUtil.distDays(minDay,maxDay);\r\n        }\r\n\r\n        \r\n        //  minDay[2]=1;\r\n        \r\n        \r\n        // let eachMonthDays=[-1,31,28,31,30,31,30,31,31,30,31,30,31];\r\n        // if(dateUtil.isLeapYear(maxDay[0])){\r\n        //     eachMonthDays[2]=29;\r\n        // }\r\n        // maxDay[2]=eachMonthDays[maxDay[1]];\r\n        // daysSpan=dateUtil.distDays(minDay,maxDay);\r\n\r\n        // console.log(minDay.join(\"-\")+\" ~ \"+maxDay.join(\"-\"));\r\n\r\n\r\n        // 所有的天生成数组，后面迭代用\r\n        let alldays=[];\r\n        for(let eachDay=minDay; dateUtil.dateSmallThan(eachDay,maxDay,true); eachDay=dateUtil.addDays(eachDay,1)){\r\n            alldays.push(eachDay);\r\n        }\r\n\r\n\r\n        //列名称\r\n        const colKeys=[]; // [ [colid,colname], [colid,colname,ymd], [colid,colname,ymd] ...  ]  从第2项起每项有ymd\r\n        const yearColKeys=[];\r\n        colKeys.push(['task','任务']);\r\n        yearColKeys.push(['task','任务']);\r\n        alldays.forEach((day,ind)=>{\r\n            let prefix=\"\";\r\n            if([1,11,21].includes(day[2])){//遇到每月1、11、21号，则显示月份\r\n                prefix=day[1]+\".\";\r\n            }\r\n            let title=[prefix+day[2],dateUtil.getWeekday(day)];//第一行日期，第二行星期\r\n            colKeys.push([\"d\"+ind,title,day]);\r\n        });\r\n\r\n        \r\n        \r\n        let data=[];\r\n        const relas=[];\r\n        const currYMD=dateUtil.currDayYMD();\r\n\r\n        //循环每行记录\r\n        gantItems.forEach((gantLine,lineInd)=>{\r\n            let item={};\r\n            item.task=gantLine.task;\r\n            item.key=\"gantline-\"+lineInd;\r\n            \r\n            //循环每个日期作为列\r\n            alldays.forEach((day,colind)=>{\r\n                \r\n\r\n                //背景颜色的覆盖关系：当前天 > 月首日 > 休息日\r\n                let obj={\r\n                    isCurrDay: dateUtil.isDayEq(day),\r\n                    isHoliday: dateUtil.isHoliday(day),\r\n                    isFirstDay:1===day[2],\r\n\r\n                    headerShouldShowSetHolidayBg:false,\r\n                    headerShouldShowSetFirstDayBg:false,\r\n                    headerShouldShowSetCurrdayBg:false,\r\n                };\r\n\r\n                //标题列的样式，从优先级低到最高依次覆盖\r\n                if(obj.isHoliday){\r\n                    obj.headerShouldShowSetHolidayBg=true;\r\n                    obj.headerShouldShowSetFirstDayBg=false;\r\n                    obj.headerShouldShowSetCurrdayBg=false;\r\n                }\r\n                if(obj.isFirstDay){\r\n                    obj.headerShouldShowSetFirstDayBg=true;\r\n                    obj.headerShouldShowSetHolidayBg=false;\r\n                    obj.headerShouldShowSetCurrdayBg=false;\r\n                }\r\n                if(obj.isCurrDay){\r\n                    obj.headerShouldShowSetCurrdayBg=true;\r\n                    obj.headerShouldShowSetHolidayBg=false;\r\n                    obj.headerShouldShowSetFirstDayBg=false;\r\n                    \r\n                }\r\n\r\n                //是初始日期\r\n                if(dateUtil.isDayEq(day,gantLine.start)){\r\n                    obj.span=gantLine.days;\r\n                    obj.hasProg=true;\r\n                    obj.prog=gantLine.prog;\r\n                    obj.overlim=gantLine.overlim;\r\n                    obj.progSt=(100===gantLine.prog?\"success\":(obj.overlim?\"exception\":\"active\"));\r\n                    item.progInd=colind;\r\n\r\n                    //有依赖项则记录对应关系，以便后面画箭头用\r\n                    if(gantLine.hasDep){\r\n                        relas.push({\r\n                            from:[gantLine.depInd,  data[gantLine.depInd].progInd+1,],\r\n                            to:[lineInd,  colind+1,]\r\n                        });\r\n                    }\r\n\r\n                    //今天在任务初始结束日期之间，并且跨度大于1天。由于单元格跨列，需使用渐变的样式配合百分比的背景定位来显示背景\r\n                    // if(1<gantLine.days && dateUtil.dateSmallThan(gantLine.start,currYMD,true) && dateUtil.dateSmallThan(currYMD,gantLine.end,true)){\r\n                    //     let startPercent=100*dateUtil.distDays(gantLine.start,currYMD)/(gantLine.days-1);//位置是除去背景大小后剩余部分的百分比\r\n                    //     let widPercent=100/gantLine.days;\r\n                    //     obj.percentBg=[startPercent,widPercent];\r\n                    //     obj.shouldSetCurrDayBg=true;\r\n                    // }\r\n\r\n                    //如果是跨多列的情况，则按每列计算\r\n                    if(1<gantLine.days){\r\n                        let percentBg=[];\r\n                        for(let eachDay=gantLine.start,eachDist=0; dateUtil.dateSmallThan(eachDay,gantLine.end,true); eachDay=dateUtil.addDays(eachDay,1),++eachDist){\r\n                            let dayProps={\r\n                                isCurrDay: dateUtil.isDayEq(eachDay),\r\n                                isHoliday: dateUtil.isHoliday(eachDay),\r\n                                isFirstDay:1===eachDay[2],\r\n                            }\r\n                            let startPercent=100*eachDist/(gantLine.days-1);//位置是除去背景大小后剩余部分的百分比\r\n                            let widPercent=100/gantLine.days;\r\n                            let isSpecialDay=false;\r\n                            let dayConfig=null;\r\n                            if(dayProps.isHoliday){\r\n                                isSpecialDay=true;\r\n                                dayConfig={\r\n                                    st:startPercent,\r\n                                    wid:widPercent,\r\n                                    isHoliday:true,\r\n                                };\r\n                            }\r\n                            if(dayProps.isFirstDay){\r\n                                isSpecialDay=true;\r\n                                dayConfig={\r\n                                    st:startPercent,\r\n                                    wid:widPercent,\r\n                                    isFirstDay:true,\r\n                                };\r\n                            }\r\n                            if(dayProps.isCurrDay){\r\n                                isSpecialDay=true;\r\n                                dayConfig={\r\n                                    st:startPercent,\r\n                                    wid:widPercent,\r\n                                    isCurrDay:true,\r\n                                };\r\n                            }\r\n                            if(isSpecialDay){\r\n                                percentBg.push(dayConfig);\r\n                            }\r\n                        }\r\n                        if(percentBg && 0<percentBg.length){\r\n                            obj.percentBg=percentBg;\r\n                            obj.shouldShowPercentBg=true;\r\n                        }\r\n                        \r\n                    }\r\n\r\n\r\n                    //浮动消息，两种格式：\r\n                    //1、字符串\r\n                    //2、数组 [  {txt:'aa', strong:true/false}, ... ]\r\n                    let leftDays=dateUtil.distDays(gantLine.end,currYMD);\r\n                    let leftStartDays=dateUtil.distDays(gantLine.start,currYMD);\r\n                    //已完成\r\n                    if(100===obj.prog){\r\n                        obj.msg=\"任务已经完成\";\r\n                    }\r\n                    //未完成\r\n                    else{\r\n                        //过期\r\n                        if(obj.overlim){\r\n                            obj.msg=[\r\n                                {txt: \"任务已经过期\",},\r\n                                {txt: \"\"+leftDays, strong:true},\r\n                                {txt:\"天\"},\r\n                            ];\r\n                        }\r\n                        //还未开始\r\n                        else if(dateUtil.dateSmallThan(currYMD,gantLine.start)){\r\n                            obj.msg=[\r\n                                {txt:\"距离任务开始还有\"},\r\n                                {txt:''+leftStartDays, strong:true},\r\n                                {txt:\"天\"}\r\n                            ];\r\n                            if(leftStartDays<4){\r\n                                let tmp=['今天','明天','后天','大后天'][leftStartDays];\r\n                                obj.msg=\"任务将于【\"+tmp+\"】开始\";\r\n                            }\r\n                        }\r\n                        //已开始\r\n                        else {\r\n                            let daysUsed=dateUtil.distDays(currYMD,gantLine.start)+1;\r\n                            obj.msg=[\r\n                                {txt:\"任务已开始\"},\r\n                                {txt:''+daysUsed, strong:true},\r\n                                {txt: '天，'},\r\n                            ];\r\n                            if(leftDays<4){\r\n                                let tmp=['今天','明天','后天','大后天'][leftDays];\r\n                                obj.msg.push({txt:\"预计【\"+tmp+\"】完成\"});\r\n                            }else{\r\n                                obj.msg.push({txt:'离完成还剩'});\r\n                                obj.msg.push({txt:''+leftDays, strong:true});\r\n                                obj.msg.push({txt:'天'});\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                //起始与结束日期之间，不包括初始，包括结束\r\n                else if(dateUtil.dateLargeThan(day,gantLine.start) &&  dateUtil.dateSmallThan(day,gantLine.end,true)){\r\n                    obj.span=0;\r\n                    obj.hasProg=false;\r\n                    obj.prog=0;\r\n                }\r\n                //其他日期\r\n                else{\r\n                    obj.span=1;\r\n                    obj.hasProg=false;\r\n                    obj.prog=0;\r\n                }\r\n\r\n                //特殊日期的背景色标识\r\n                if(1===obj.span && obj.isHoliday){\r\n                    obj.shouldSetHolidayBg=true;\r\n                }\r\n                if(1===obj.span && obj.isCurrDay){\r\n                    obj.shouldSetCurrDayBg=true;\r\n                }\r\n                if(1===obj.span && obj.isFirstDay){\r\n                    // console.log(\"222\");\r\n                    obj.shouldSetFirstDayBg=true;\r\n                }\r\n\r\n                //跨列的背景样式 > 当前天 > 月首日 > 休息日\r\n                //解决不同日期类型背景的优先级问题\r\n                if(obj.shouldShowPercentBg){\r\n                    obj.shouldSetCurrDayBg=false;\r\n                    obj.shouldSetFirstDayBg=false;\r\n                    obj.shouldSetHolidayBg=false;\r\n                }\r\n                else if(obj.shouldSetCurrDayBg){\r\n                    obj.shouldSetFirstDayBg=false;\r\n                    obj.shouldSetHolidayBg=false;\r\n                }else if(obj.shouldSetFirstDayBg){\r\n                    obj.shouldSetHolidayBg=false;\r\n                }\r\n\r\n                item[\"d\"+colind]=obj;\r\n            });\r\n\r\n            data.push(item);\r\n        });\r\n\r\n\r\n\r\n        return {data,colKeys,relas};\r\n    }\r\n\r\n    \r\n\r\n}\r\n\r\nconst inst=new GanttSvc();\r\n\r\n// loadGanttData: inst.loadGanttData,\r\nexport default {\r\n    parseGantData : inst.parseGantData,    \r\n    parseGantItem:inst.parseGantItem,\r\n};","D:\\ws\\web\\gmap-ui\\src\\common\\keyDetector.js",[],"D:\\ws\\web\\gmap-ui\\src\\service\\screenShot.js",[],"D:\\ws\\web\\gmap-ui\\src\\common\\uiUtil.js",[],"D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\RefViewer.js",["268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289"],"/** @jsxImportSource @emotion/react */\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport { Layout,   Tabs, Modal, Input, message, Button, Divider,Popover,BackTop,Avatar } from 'antd';\r\nimport { PlusOutlined, FolderOpenOutlined, EditOutlined,LinkOutlined, FolderOutlined,ExportOutlined,CodeOutlined,CompressOutlined,ExpandOutlined,ControlOutlined,ReloadOutlined,FileImageOutlined,FileMarkdownOutlined,FilePdfOutlined,FileWordOutlined,Html5Outlined } from '@ant-design/icons';\r\nimport {withEnh} from '../../common/specialDlg';\r\nimport {connect} from '../../../common/gflow';\r\nimport MarkedHighlightUtil from '../../../common/markedHighlightUtil';\r\nimport mindmapSvc from '../../../service/mindmapSvc';\r\nimport api from '../../../service/api';\r\nimport {createSelector} from 'reselect';\r\n\r\nimport marked from 'marked';\r\nimport hljs from 'highlight.js';\r\nimport 'highlight.js/styles/atom-one-dark-reasonable.css';\r\nimport 'github-markdown-css/github-markdown.css';\r\nimport { useSelector } from 'react-redux';\r\nimport expSvc from '../../../service/expSvc';\r\nimport mermaid from 'mermaid';\r\n\r\nconst EnhDlg=withEnh(Modal);\r\nconst codeBg = 'rgba(40,44,52,1)'; //40 44 52  #282c34\r\nconst markedHighlightUtil = new MarkedHighlightUtil();\r\n\r\n/**\r\n * 引用查看器\r\n * @param {*} props \r\n */\r\nconst RefViewer=(props)=>{\r\n    const {winW,winH,activeKey}=useSelector((state)=>({\r\n        winW:       state.common.winW,\r\n        winH:       state.common.winH,\r\n        activeKey:  state.tabs.activeKey,\r\n    }));\r\n\r\n    const [wrapperId]=useState(()=>\"refviewercontainer\"+new Date().getTime());\r\n\r\n    useEffect(()=>{\r\n        markedHighlightUtil.init(marked, hljs, {\r\n            codeConfig: {\r\n                bg: codeBg\r\n            },\r\n            linkConfig: {\r\n                disableDefault: true,\r\n                convertUrl: (oldurl) => {\r\n                    let addr = oldurl;\r\n                    if (mindmapSvc.hasUrlPrefix(addr)){\r\n                        return addr;\r\n                    }\r\n                    if(addr.startsWith(\"./\")){\r\n                        return api.calcAttUrl(activeKey, oldurl);\r\n                    }\r\n                    return addr;\r\n                }\r\n            },\r\n            imgConfig: {\r\n                convertUrl: (oldurl) => {\r\n                    if (!(oldurl.startsWith(\"./\") || oldurl.startsWith(\"../\"))) { return oldurl; }//跳过不是本地相对路径的\r\n                    return api.calcPicUrl(activeKey, oldurl);\r\n                }\r\n            }\r\n        });\r\n    },[activeKey]);\r\n\r\n    \r\n    useEffect(()=>{\r\n        if(props.visible){\r\n            setTimeout(() => {\r\n                markedHighlightUtil.bindLinkClickEvent(api.openUrl);\r\n                markedHighlightUtil.bindImgClickEvent(api.openUrl);\r\n                markedHighlightUtil.mermaidInit();\r\n                mermaid.contentLoaded();\r\n                console.log(\"after mermaid.mermaidAPI.reinitialize\");\r\n            }, 100);//迟\r\n        }\r\n    },[props.visible]);\r\n    \r\n\r\n    \r\n\r\n    const getScrollTarget=useCallback(()=>document.getElementById(wrapperId),[wrapperId]);\r\n    let result=dataSelector(props);\r\n    let {refname, refCont, txt}=(result || {refname:'', refCont:'', txt:''});\r\n\r\n    \r\n    const onExpHtml=useCallback(()=>{\r\n        expSvc.expHtml(refname, marked(txt));\r\n    },[refname, txt]);\r\n\r\n    \r\n    const onExpMarkdown=useCallback(()=>{\r\n        expSvc.expMarkdown(txt);\r\n    },[txt]);\r\n    \r\n    \r\n    \r\n    if(null===result){\r\n        return null;\r\n    }\r\n    \r\n    \r\n\r\n    return (\r\n        <EnhDlg noFooter\r\n                title={\r\n                    <div>\r\n                        {\"查看引用 - \" + refname}\r\n                        <Button shape='circle' icon={<FileMarkdownOutlined />} css={{marginLeft:'20px'}} type='default' size='default' onClick={onExpMarkdown} title='导出markdown' />\r\n                        <Button shape='circle' icon={<Html5Outlined />} css={{marginLeft:'6px'}} type='default' size='default' onClick={onExpHtml} title='导出html' />\r\n                    </div>\r\n                }\r\n                size={{w:winW-200, h:winH-300, fixh:true, wrapperId:wrapperId}}                \r\n                visible={props.visible}\r\n                maskClosable={true}               \r\n                onCancel={props.onCancel}>\r\n            <div className='markdown-body' css={{\r\n                margin:'0px auto',\r\n                width:'98%',\r\n                overflowX:'hidden'}}\r\n                dangerouslySetInnerHTML={{__html:refCont}}>\r\n            </div>\r\n            {\r\n                (props.backtopLoc && 2===props.backtopLoc.length) && (   \r\n                    <BackTop  target={getScrollTarget} css={{\r\n                        right:200,\r\n                        bottom:170,\r\n                        ...backtopColorStyle\r\n                    }}/>\r\n                )\r\n            }\r\n        </EnhDlg>\r\n    );\r\n    \r\n}\r\n\r\nconst dataSelector=createSelector(\r\n    props=>props.currRefObj,\r\n    refObj=>{\r\n        if(!refObj || !refObj.txt || !refObj.showname){\r\n            return null;\r\n        }\r\n        if (null == refObj.parsedTxt) {\r\n            refObj.parsedTxt = marked(refObj.txt);\r\n        }\r\n        let refname=refObj.showname;\r\n        let refCont=refObj.parsedTxt;\r\n        return {refname,refCont, txt:refObj.txt};\r\n    }\r\n);\r\n\r\n//24  144 255    #1890ff\r\n//16  136 233    #1088e9\r\nconst backtopColorStyle={\r\n    '& .ant-back-top-content':{\r\n        backgroundColor:'rgba(24,144,255, .80)',\r\n    },\r\n    '&:hover .ant-back-top-content':{\r\n        backgroundColor:'rgba(24,144,255, 1.0)', \r\n    },\r\n}\r\n\r\nexport default React.memo(RefViewer);","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\TimelineViewer.js",["290"],"/** @jsxImportSource @emotion/react */\r\nimport React from 'react';\r\nimport {  Modal, Timeline } from 'antd';\r\nimport { ClockCircleOutlined } from '@ant-design/icons';\r\nimport {withEnh} from '../../common/specialDlg';\r\nimport {connect} from '../../../common/gflow';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst EnhDlg=withEnh(Modal);\r\n\r\n/**\r\n * 时间线对话框\r\n */\r\nconst TimelineViewer=(props)=>{\r\n    const {winW,winH}=useSelector((state)=>({\r\n        winW:state.common.winW,\r\n        winH:state.common.winH,\r\n    }));\r\n\r\n    let dlgW= (winW<820?winW-20:800);\r\n\r\n    return (\r\n        <EnhDlg noFooter\r\n                title=\"查看时间线\"\r\n                size={{w:dlgW, h:winH-300}}\r\n                visible={props.visible}\r\n                maskClosable={true}              \r\n                onCancel={props.onCancel}>\r\n                    \r\n            <Timeline mode='left' css={{marginTop:20}}>\r\n                {\r\n                    props.timelineObj.map((item,ind)=>\r\n                        <Timeline.Item key={ind}  \r\n                                {...(item.near?{dot:<ClockCircleOutlined css={{ fontSize: '16px',color:item.color,marginBottom:4 }} />}:{})}   \r\n                                label={\"（\"+item.msg+\"）\"+item.fullDate} color={item.color}>\r\n                            <>{item.txt.map((line,ind)=><>{0<ind && <br/>}{line}</>)}</>\r\n                        </Timeline.Item>\r\n                    )\r\n                }\r\n            </Timeline>\r\n        </EnhDlg>\r\n    );\r\n    \r\n}\r\n\r\nexport default React.memo(TimelineViewer);","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\ProgsViewer.js",["291","292"],"/** @jsxImportSource @emotion/react */\r\nimport React from 'react';\r\nimport { Modal, Timeline, Table,Progress,Tooltip } from 'antd';\r\nimport {createSelector} from 'reselect';\r\nimport {withEnh} from '../../common/specialDlg';\r\nimport {connect} from '../../../common/gflow';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst EnhDlg=withEnh(Modal);\r\n\r\n/**\r\n * 进度对话框\r\n */\r\nconst ProgsViewer=(props)=>{\r\n    const {winW,winH}=useSelector((state)=>({\r\n        winW:state.common.winW,\r\n        winH:state.common.winH,\r\n    }));\r\n\r\n    let dlgW = (winW < 820 ? winW - 20 : 800);\r\n\r\n    return (\r\n        <EnhDlg noFooter\r\n                title=\"查看事项完成进度\"\r\n                size={{w:dlgW}}                  \r\n                visible={props.visible}\r\n                maskClosable={true}\r\n                onCancel={props.onCancel}>\r\n            \r\n            <Table pagination={false} \r\n                bordered={true}\r\n                dataSource={parseDataSource(props)} \r\n                columns={columns} \r\n                size='small' \r\n                scroll={{ y: winH-300 }} />\r\n        </EnhDlg>\r\n    );\r\n}\r\n\r\nconst parseDataSource=createSelector(\r\n    props=>props.progsObj,\r\n    progs=>{\r\n        if(!progs){\r\n            return [];\r\n        }\r\n        return progs.map((each,ind)=>({\r\n            key: ind,\r\n            thing: each.txt,\r\n            prog: each.num,\r\n            msg:each.msg,\r\n            err: each.err,\r\n        }));\r\n    }\r\n);\r\n\r\nconst columns = [\r\n    {\r\n        title: '事项',\r\n        dataIndex: 'thing',\r\n        key: 'thing',\r\n        render:(txt,line)=>{\r\n            console.log(typeof(txt),txt.length,txt);\r\n            return <>{txt.map((line,ind)=><>{0<ind && <br/>}{line}</>)}</>;\r\n        }\r\n    },\r\n    {\r\n        title: '完成进度',\r\n        dataIndex: 'prog',\r\n        key: 'prog',\r\n        width:'260px',\r\n        render: (prog, line) => (\r\n            <Tooltip title={line.msg}>\r\n                <Progress  percent={prog} size='default' status={line.err?\"exception\":(prog<100?\"active\":\"success\")}/>\r\n            </Tooltip>\r\n        )\r\n    },\r\n];\r\n\r\nexport default React.memo(ProgsViewer);","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\gantt\\GantDlg.js",["293","294","295"],"/** @jsxImportSource @emotion/react */\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { Modal } from 'antd';\r\nimport {  } from '@ant-design/icons';\r\nimport GantChart from './GantChart';\r\nimport {withEnh} from '../../../common/specialDlg';\r\nimport {connect} from '../../../../common/gflow';\r\nimport { createSelector } from 'reselect';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst EnhDlg=withEnh(Modal);\r\n\r\n/**\r\n * 甘特图对话框\r\n * @param {*} props \r\n */\r\nconst GantDlg=(props)=>{\r\n    const {winW,winH,resizeSymbol}= useSelector((state)=>({\r\n        winW:           state.common.winW,\r\n        winH:           state.common.winH,\r\n        resizeSymbol:   state.common.resizeSymbol\r\n    }));\r\n\r\n    const [layoutArrows, setLayoutArrows]=useState(null);\r\n    const showCntRef=useRef(0);\r\n    \r\n    /**\r\n     * 延迟重绘箭头位置\r\n     */\r\n    const delayRelayoutArrows=useCallback(()=>{\r\n        setTimeout(()=>{\r\n            setLayoutArrows(Symbol());\r\n        }, 100);\r\n    },[setLayoutArrows]);\r\n    \r\n    /**\r\n     * 第2次以上渲染，引发重绘\r\n     */\r\n    useEffect(()=>{\r\n        if(props.visible){\r\n            showCntRef.current=showCntRef.current+1;         \r\n            if(1<showCntRef.current){\r\n                console.log(\"gant - 第2次以上渲染，引发重绘\");\r\n                delayRelayoutArrows();\r\n            }\r\n        }\r\n    },[props.visible]);\r\n\r\n    /**\r\n     * 窗口大小调整，引发重绘\r\n     */\r\n    useEffect(()=>{\r\n        console.log(\"gant - 窗口大小调整，引发重绘\");\r\n        delayRelayoutArrows();\r\n    },[resizeSymbol]);\r\n\r\n\r\n    let {ds, colKeys, relas}=getParts(props);\r\n\r\n    return (\r\n        <EnhDlg noFooter\r\n                title=\"甘特图\"\r\n                visible={props.visible}\r\n                size={{w:winW-200}}\r\n                onCancel={props.onCancel}>\r\n\r\n            <GantChart \r\n                key='gant-comp'\r\n                ds={ds}\r\n                colKeys={colKeys} \r\n                arrows={relas}\r\n                winW={winW} \r\n                maxh={winH-250-100}  \r\n                layoutArrows={layoutArrows}/>    \r\n        </EnhDlg>\r\n    );\r\n    \r\n}\r\n\r\nconst getParts=createSelector(\r\n    props=>props.gantObj,\r\n    gantObj=>{\r\n        if(!gantObj){\r\n            return {\r\n                ds:         [],\r\n                colKeys:    [],\r\n                relas:      [],\r\n            };\r\n        }\r\n        return {\r\n            ds:         gantObj.data? gantObj.data: [],\r\n            colKeys:    gantObj.colKeys? gantObj.colKeys: [],\r\n            relas:      gantObj.relas? gantObj.relas:[],\r\n        };\r\n    }\r\n);\r\n\r\n\r\n\r\nexport default React.memo(GantDlg);","D:\\ws\\web\\gmap-ui\\src\\common\\dateUtil.js",["296"],"const addDays=(ymd,days)=>{\r\n    let tmpDate=new Date(ymd[0],ymd[1]-1,ymd[2]);\r\n    tmpDate.setDate(tmpDate.getDate()+days);\r\n    return [\r\n        tmpDate.getFullYear(),\r\n        tmpDate.getMonth()+1,\r\n        tmpDate.getDate(),\r\n    ];\r\n}\r\n\r\nconst distDays=(ymd1,ymd2)=>{\r\n    let d1=new Date(ymd1[0],ymd1[1]-1,ymd1[2]);\r\n    let d2=new Date(ymd2[0],ymd2[1]-1,ymd2[2]);\r\n    return parseInt(Math.abs(d1.getTime()-d2.getTime())/85400000);\r\n}\r\n\r\nconst dateSmallThan=(ymd1,ymd2,containsEq=false)=>{\r\n    let d1=new Date(ymd1[0],ymd1[1]-1,ymd1[2]);\r\n    let d2=new Date(ymd2[0],ymd2[1]-1,ymd2[2]);\r\n    return containsEq ? d1.getTime()<=d2.getTime() : d1.getTime()<d2.getTime();\r\n}\r\n\r\nconst dateLargeThan=(ymd1,ymd2,containsEq=false)=>{\r\n    let d1=new Date(ymd1[0],ymd1[1]-1,ymd1[2]);\r\n    let d2=new Date(ymd2[0],ymd2[1]-1,ymd2[2]);\r\n    return containsEq ? d1.getTime()>=d2.getTime() : d1.getTime()>d2.getTime();\r\n}\r\n\r\nconst currDayYMD=()=>{\r\n    let now=new Date();\r\n    now.setHours(0);\r\n    now.setMinutes(0)\r\n    now.setSeconds(0);\r\n    now.setMilliseconds(0);\r\n    return [now.getFullYear(),now.getMonth()+1,now.getDate()];\r\n}\r\n\r\nconst isLeapYear=(year)=>{\r\n    return (0===year%400 || (0===year%4 && 0!==year%100));\r\n}\r\n\r\nconst isDayEq=(ymd,ymd2=null)=>{\r\n    if(null===ymd2){\r\n        ymd2=currDayYMD();\r\n    }\r\n    \r\n    return (ymd[0]===ymd2[0] && ymd[1]===ymd2[1] && ymd[2]===ymd2[2]);\r\n}\r\n\r\nconst isHoliday=(ymd)=>{\r\n    return ['六','日'].includes(getWeekday(ymd));\r\n}\r\n\r\nconst getWeekday=(ymd)=>{\r\n    let date=new Date(ymd[0],ymd[1]-1,ymd[2]);    \r\n    return [\"日\",\"一\",\"二\",\"三\",\"四\",\"五\",\"六\"][date.getDay()];\r\n}\r\n\r\nexport default {addDays,distDays,dateSmallThan,dateLargeThan,isDayEq,getWeekday,isHoliday,currDayYMD,isLeapYear};","D:\\ws\\web\\gmap-ui\\src\\common\\markedHighlightUtil.js",[],"D:\\ws\\web\\gmap-ui\\src\\ui\\common\\specialDlg.js",[],"D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\gantt\\GantChart.js",["297","298","299","300"],"/** @jsxImportSource @emotion/react */\r\nimport React, { Fragment, useCallback, useEffect, useRef, useState } from 'react';\r\nimport { Progress, Table,Popover } from 'antd';\r\nimport { RightOutlined } from '@ant-design/icons';\r\n\r\nimport {createSelector} from 'reselect';\r\nimport userEvent from '@testing-library/user-event';\r\n\r\n/**\r\n * 甘特图组件\r\n * @param {*} props \r\n */\r\nconst GantChart=(props)=>{\r\n    const [arrows, setArrows]=useState([]);\r\n    const [gantEleId]=useState(()=>'ganttTable-'+new Date().getTime());\r\n    const lastScrollTimeRef=useRef(0);\r\n    const scrollTimerRef=useRef(null);\r\n  \r\n\r\n\r\n    \r\n\r\n\r\n    /**\r\n     * 摆放箭头位置\r\n     */\r\n    const putArrows=useCallback(()=>{\r\n        let arrows=[];\r\n\r\n        //边界范围定义\r\n        let eleFirstCell=document.querySelector(`#${gantEleId} table tr:nth-child(1) th:nth-child(1)`);\r\n        let eleLastCell=document.querySelector(`#${gantEleId} .ant-table-body`);\r\n        if(!eleFirstCell || !eleLastCell){\r\n            return;\r\n        }\r\n        \r\n        let firstRect=eleFirstCell.getBoundingClientRect();\r\n        let lastRect=eleLastCell.getBoundingClientRect();\r\n        \r\n        let arrowBounds={\r\n            l: firstRect.right,\r\n            t: firstRect.bottom,\r\n            r: lastRect.right,\r\n            b: lastRect.bottom,\r\n        }\r\n\r\n\r\n        //根据连接关系计算每组连接线的位置（css样式）\r\n        props.arrows.forEach((rela)=>{\r\n            //起始单元格与结束单元格位置\r\n            let shouldHidden=false;//用于判断当连接线超出边界范围时不显示\r\n            let eleFrom=document.querySelector(`#${gantEleId} table tr:nth-child(${rela.from[0]+2}) td:nth-child(${rela.from[1]+1})`);\r\n            let eleTo=document.querySelector(`#${gantEleId} table tr:nth-child(${rela.to[0]+2}) td:nth-child(${rela.to[1]+1})`);\r\n            if(!eleFrom || !eleTo){\r\n                return;\r\n            }\r\n\r\n            let tdFrom=eleFrom.getBoundingClientRect();\r\n            let tdTo=eleTo.getBoundingClientRect();\r\n            \r\n\r\n            \r\n            //连接线起点端：从起始单元格右侧开始\r\n            let from={\r\n                left:tdFrom.right,\r\n                top:tdFrom.top+parseInt(tdFrom.height/2),\r\n                width:20,\r\n                height:parseInt(tdFrom.height/2),\r\n                borderRight:`1px solid ${colors.joinLine}`,\r\n                borderTop:`1px solid ${colors.joinLine}`,\r\n                // borderTopRightRadius:'6px',\r\n            };\r\n            \r\n            //连接线结束点端：到结束单元格左侧结束\r\n            let to={\r\n                left:tdTo.left-20-1,\r\n                top:tdTo.top,\r\n                width:20,\r\n                height:parseInt(tdTo.height/2),\r\n                borderLeft:`1px solid ${colors.joinLine}`,\r\n                borderBottom:`1px solid ${colors.joinLine}`,\r\n            };\r\n\r\n            //结束点处的箭头\r\n            let posArrow={\r\n                left:to.left+to.width-8,\r\n                top:to.top+to.height-7,\r\n                color:`${colors.joinLine}`,\r\n            };\r\n\r\n            //之间的连接线\r\n            let fromx=from.left+from.width;\r\n            let fromy=from.top+from.height;\r\n            let tox=to.left;\r\n            let toy=to.top;\r\n\r\n            let join1={\r\n                left:parseInt(Math.min(fromx,tox)),\r\n                top:from.top+from.height,\r\n                width:1,\r\n                height:parseInt(Math.abs(fromy-toy)),\r\n                backgroundColor:colors.joinLine,\r\n            }\r\n\r\n            let join2={\r\n                height:1,\r\n                width:parseInt(Math.abs(fromx-tox)),\r\n                left: parseInt(Math.min(fromx,tox)),\r\n                backgroundColor:colors.joinLine,\r\n            }\r\n\r\n            // let coner1={};\r\n            // let coner2={};\r\n\r\n            //连接线位置校准\r\n            if(fromx<=tox){\r\n                join2.top=join1.top+join1.height;\r\n                --join1.left;\r\n                --join2.left;\r\n                join2.width+=2;\r\n\r\n                join1.height+=to.height;\r\n                join2.top+=to.height-1;\r\n                to.borderLeft='0px';\r\n            }else{\r\n                join2.top=from.top+from.height;\r\n                // to.borderBottomLeftRadius='6px';\r\n\r\n                // coner2={\r\n                //     left:parseInt(Math.min(fromx,tox)),\r\n                //     top:join2.top,\r\n                //     borderTopLeftRadius:'6px',\r\n                //     borderLeft:`1px solid ${colors.joinLine}`,\r\n                //     borderTop:`1px solid ${colors.joinLine}`,\r\n                //     width:'6px',\r\n                //     height:'6px',\r\n                // };\r\n                // join1.top+=6;\r\n                // //join1.height-=6;\r\n                // join2.left+=6;\r\n                // join2.width-=6;\r\n\r\n                // to.top+=6;\r\n                // to.height-=6;\r\n\r\n                // from.borderBottomRightRadius='6px';\r\n                // from.borderBottom=`1px solid ${colors.joinLine}`;\r\n                // from.height+=1;\r\n                // join2.width-=6;\r\n                \r\n            }\r\n\r\n            \r\n                       \r\n            //上下左右四个边框超出则不显示连接线\r\n            if(tdFrom.right<arrowBounds.l || tdTo.left<arrowBounds.l){\r\n                shouldHidden=true;\r\n            }\r\n            if(from.top<arrowBounds.t){\r\n                shouldHidden=true;\r\n            }\r\n            if(Math.max(from.left+from.width, to.left+to.width)>arrowBounds.r){\r\n                shouldHidden=true;\r\n            }\r\n            if(Math.max(from.top+from.height, to.top+to.height)>arrowBounds.b){\r\n                shouldHidden=true;\r\n            }\r\n            if(shouldHidden){\r\n                from.display=\"none\";\r\n                to.display=\"none\";\r\n                join1.display=\"none\";\r\n                join2.display=\"none\";\r\n                posArrow.display=\"none\";\r\n                // coner1.display=\"none\";\r\n                // coner2.display=\"none\";\r\n            }\r\n\r\n            arrows.push({\r\n                st:from,\r\n                end:to,\r\n                join1:join1,\r\n                join2:join2,\r\n                head:posArrow,\r\n                // coner1:coner1,\r\n                // coner2:coner2,\r\n            });\r\n        });\r\n\r\n        setArrows(arrows);\r\n    },[props.arrows, setArrows]);\r\n\r\n\r\n    /**\r\n     * 延时执行设置箭头位置\r\n     * @param {*} delayMore 如果指定为true，则延迟更长的时间（3s）再执行操作，否则按默认的时间间隔\r\n     */\r\n    const debouncePutArrows=useCallback((delayMore=undefined)=>{\r\n        //与上次计算时间间隔太小，取消上次的任务\r\n        let time=new Date().getTime();\r\n        if(time-lastScrollTimeRef.current<debounceInterval){\r\n            if(null!==scrollTimerRef.current){\r\n                clearTimeout(scrollTimerRef.current);\r\n            }\r\n        }\r\n\r\n        //延时执行\r\n        lastScrollTimeRef.current=time;\r\n        scrollTimerRef.current=setTimeout(putArrows,true===delayMore?3000: debounceInterval);\r\n    },[putArrows]);\r\n\r\n\r\n\r\n    useEffect(()=>{\r\n        //注册有滚动事件以计算箭头位置，并且现在触发一次计算\r\n        setTimeout(() => {\r\n            let ele=document.querySelector(`#${gantEleId} .ant-table-body`);\r\n            if(ele){\r\n                ele.addEventListener(\"scroll\",debouncePutArrows);\r\n            }\r\n            debouncePutArrows();\r\n        }, 200);\r\n\r\n        return ()=>{\r\n            let ele=document.querySelector(`#${gantEleId} .ant-table-body`);\r\n            if(ele){\r\n                ele.removeEventListener(\"scroll\",debouncePutArrows);\r\n            }\r\n        }\r\n    },[debouncePutArrows]);\r\n\r\n    useEffect(()=>{\r\n        debouncePutArrows();\r\n    },[props.layoutArrows, debouncePutArrows]);\r\n\r\n\r\n    \r\n        \r\n\r\n    if(!props.ds || !props.ds[0] || !props.colKeys || !props.colKeys[0] || !props.arrows){\r\n        return null;\r\n    }\r\n\r\n    //动态计算列配置信息\r\n    let colsConfig=getDynaCols({data:props.ds, colKeys:props.colKeys, winW:props.winW});\r\n    \r\n    //滚动高度：该配置如果省略，即表格不纵向滚动，则表格布局会发生变化，一些dom元素取不到，不能完成箭头定位\r\n    let graphH={y:400};\r\n    if(props.maxh){\r\n        graphH={y:props.maxh};\r\n    }\r\n    \r\n    // console.log(\"ds\",props.ds);\r\n\r\n    return (<React.Fragment key='gantconatiner'>\r\n        {/* 表格部分 */}\r\n        <Table id={gantEleId} tableLayout='fixed' size=\"small\" bordered={true} pagination={false} \r\n                scroll={{x:'max-content', ...graphH}} \r\n                dataSource={props.ds} \r\n                columns={colsConfig} />\r\n\r\n        {/* 连接线部分 */}\r\n        {\r\n            arrows.map((each,ind)=>(\r\n                <React.Fragment key={'arrow-'+ind}>\r\n                    <div key={'arrow-st-'+ind} css={{...joinLineStyle, ...each.st}}></div>\r\n                    <div key={'arrow-end-'+ind} css={{...joinLineStyle, ...each.end}}></div>\r\n                    <div key={'arrow-join1-'+ind} css={{...joinLineStyle, ...each.join1}}></div>\r\n                    <div key={'arrow-join2-'+ind} css={{...joinLineStyle, ...each.join2}}></div>\r\n                    {/* <div key={'arrow-coner1-'+ind} css={{...joinLineStyle, ...each.coner1}}></div>\r\n                    <div key={'arrow-coner2-'+ind} css={{...joinLineStyle, ...each.coner2}}></div> */}\r\n                    <RightOutlined key={'arrow-head-'+ind} css={{...joinArrowStyle, ...each.head}}/>\r\n                </React.Fragment>\r\n            ))\r\n        } \r\n    </React.Fragment>);\r\n    \r\n}\r\n\r\nconst getDynaCols2=()=>{\r\n    return [\r\n        {\r\n            title:'aaaa',\r\n            key:'task',\r\n            dataIndex:'task',\r\n        },\r\n        {\r\n            title:'aaaa',\r\n            key:'d1',\r\n        }\r\n    ];\r\n}\r\n\r\n/**\r\n * 根据数据和列名，动态生成columns对象\r\n */\r\nconst getDynaCols=createSelector(\r\n    info=>info.data,\r\n    info=>info.colKeys,\r\n    info=>info.winW,\r\n    (data,colKeys,winW)=>{\r\n        const columns = [];\r\n        let firstCol=null;\r\n        let currMonth=null;\r\n\r\n        colKeys.forEach((colKey,ind)=>{\r\n            //第一列任务名称\r\n            if(0===ind){\r\n                columns.push({\r\n                    title: colKey[1],\r\n                    dataIndex: colKey[0],\r\n                    key: colKey[0],\r\n                    align:'center',\r\n                    fixed:'left',\r\n                    width: (winW<=1920? 300 : 400), //400\r\n                    render: (text, row, index) => {\r\n                        // if(1<2){return '1';}\r\n                        const obj = {\r\n                            children:<>{text.map((line,ind)=>(<React.Fragment key={'f0-'+ind}>{(0<ind) && <br key={'br'+ind}/>}<span key={'task-'+ind}>{line}</span></React.Fragment>))}</>,\r\n                            props: {style:{textAlign:'left',}},\r\n                        };\r\n                        return obj;\r\n                    }\r\n                });\r\n                return;\r\n            }\r\n\r\n            //是否是今天、是否是休息日、是否是月首日\r\n            let dataCell=data[0][colKey[0]];\r\n            // let isCurrday=dataCell.isCurrDay;\r\n            // let isHoliday= dataCell.isHoliday;\r\n            // let isFirstDay= dataCell.isFirstDay;\r\n\r\n            \r\n            //添加各日期列的数据\r\n            let secondCol={\r\n                title:<>{colKey[1].map((line,titleind)=>(<React.Fragment key={'f-'+ind+'-'+titleind}>{(0<titleind) && <br key={'br'+ind}/>}<span key={'head-day-'+titleind}>{line}</span></React.Fragment>))}</>,\r\n                dataIndex: colKey[0],\r\n                key: colKey[0],\r\n                width:40,\r\n                align:'center',\r\n                onHeaderCell:()=>{\r\n                    const ret={style:{padding:'0px',}};\r\n                    if(dataCell.headerShouldShowSetCurrdayBg){\r\n                        ret.style.backgroundColor=colors.currday;\r\n                    }\r\n                    if(dataCell.headerShouldShowSetFirstDayBg){\r\n                        ret.style.backgroundColor=colors.firstDay;\r\n                    }\r\n                    if(dataCell.headerShouldShowSetHolidayBg){\r\n                        ret.style.backgroundColor=colors.holiday;\r\n                    }\r\n                    return ret;\r\n                },\r\n                render: (text, row, index) => {\r\n                    // if(1<2){return '1';}\r\n\r\n                    const ret={\r\n                        children:null,\r\n                        props:{\r\n                            colSpan:text.span,\r\n                            style:{padding:'0px',}\r\n                        }\r\n                    };\r\n                    \r\n\r\n                    //不同日期类型对应不同背景色\r\n                    if(text.shouldSetCurrDayBg){\r\n                        // if(text.percentBg){\r\n                        //     ret.props.style.backgroundImage=`linear-gradient(${colors.currday},${colors.currday})`;\r\n                        //     ret.props.style.backgroundPosition=`${text.percentBg[0]}% 0px`;\r\n                        //     ret.props.style.backgroundSize=`${text.percentBg[1]}% 100%`;\r\n                        //     ret.props.style.backgroundRepeat=\"no-repeat\";\r\n                        // }else{\r\n                            ret.props.style.backgroundColor=colors.currday;\r\n                        // }\r\n                    }\r\n\r\n                    if(text.shouldSetHolidayBg){\r\n                        ret.props.style.backgroundColor=colors.holiday;\r\n                    }\r\n\r\n                    if(text.shouldSetFirstDayBg){\r\n                        ret.props.style.backgroundColor=colors.firstDay;\r\n                    }\r\n                    if(text.shouldShowPercentBg){\r\n                        let allBgStyle={\r\n                            im:[],\r\n                            pos:[],\r\n                            size:[],\r\n                            repeat:[],\r\n                        };\r\n                        text.percentBg.forEach(eachbg=>{\r\n                            let color=(eachbg.isHoliday?colors.holiday:(eachbg.isFirstDay?colors.firstDay:colors.currday));\r\n                            allBgStyle.im.push(`linear-gradient(${color},${color})`);\r\n                            allBgStyle.pos.push(`${eachbg.st}% 0px`);\r\n                            allBgStyle.size.push(`${eachbg.wid}% 100%`);\r\n                            allBgStyle.repeat.push(\"no-repeat\");\r\n                        });\r\n\r\n                        ret.props.style.backgroundImage=allBgStyle.im.join(\", \");\r\n                        ret.props.style.backgroundPosition=allBgStyle.pos.join(\", \");\r\n                        ret.props.style.backgroundSize=allBgStyle.size.join(\", \");\r\n                        ret.props.style.backgroundRepeat=allBgStyle.repeat.join(\", \");\r\n                    }\r\n\r\n               \r\n                    //进度图\r\n                    if(text.hasProg){\r\n                        ret.children=(\r\n                            <Popover title={<>\r\n                                {\"success\"===text.progSt && <div css={popoverStyle[text.progSt]}>已完成</div>}\r\n                                {\"exception\"===text.progSt && <div css={popoverStyle[text.progSt]}>已超期，完成 {text.prog}%</div>}\r\n                                {\"active\"===text.progSt && <div css={popoverStyle[text.progSt]}>进行中，完成 {text.prog}%</div>}\r\n                            </>} content={<>\r\n                                {!Array.isArray(text.msg) &&　<div>{text.msg}</div>}\r\n                                {Array.isArray(text.msg) &&　text.msg.map((msgitem,ind)=>(\r\n                                    <span key={'progmsgs-'+ind} css={msgitem.strong ? popoverStyle.highlightTxt : {}}>{msgitem.txt}</span>\r\n                                ))}                               \r\n                            </>}  trigger=\"hover\">\r\n                                <Progress disabled percent={text.prog}  trailColor={colors.progTrail} showInfo={false} status={text.progSt}  />\r\n                            </Popover>\r\n                        );\r\n                    }\r\n                    \r\n                    return ret;\r\n                }\r\n            }\r\n\r\n\r\n            //第一行标题的处理\r\n            //与上条记录同月就追加\r\n            const month=colKey[2][0]+\"-\"+colKey[2][1];\r\n            if(currMonth===month){\r\n                firstCol.children.push(secondCol);\r\n                return;\r\n            }\r\n            //否则说新建\r\n            currMonth=month;\r\n            firstCol={\r\n                title:month,\r\n                align:'center',\r\n                children:[\r\n                    secondCol\r\n                ]\r\n            };\r\n            columns.push(firstCol);\r\n        });\r\n\r\n\r\n        return columns;\r\n    }\r\n);\r\n\r\nconst popoverStyle={\r\n    success: {color:'green',textAlign:'center'},\r\n    exception:{color:'red',textAlign:'center'},\r\n    active:{color:'#1890ff',textAlign:'center'},\r\n\r\n    highlightTxt: {fontWeight:'bolder',display:'inline-block',marginLeft:5, marginRight:5,},\r\n}\r\n\r\nconst joinLineStyle={\r\n    position:'fixed',\r\n    width:'0px',\r\n    height:'0px',\r\n    backgroundColor:'transparent', \r\n    border:'0px solid gray',\r\n    zIndex:1\r\n};\r\n\r\nconst joinArrowStyle={\r\n    position:'fixed',\r\n    backgroundColor:'transparent',\r\n    zIndex:1, \r\n    fontSize:'12px'\r\n};\r\n\r\n//各种颜色：今天的背景色、休息日的背景色、连接线的颜色等\r\nconst colors={\r\n    progTrail:'#DDD',\r\n    firstDay:'#fcffe6',//'green',\r\n    currday:'#ffe7ba',  //'#ffe7ba';\r\n    holiday:'#f9f9f9',\r\n    joinLine:'#fa8c16',//'#fa8c16',//'orange',//'#FCA236',//'grey',//'gray',//\"red\",\r\n};\r\n\r\n\r\nconst debounceInterval=500;\r\n\r\nexport default GantChart;","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\GraphTabs.js",["301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322"],"/** @jsxImportSource @emotion/react */\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { Layout,   Tabs, Modal, Input, message, Button, Divider,Spin  } from 'antd';\r\nimport { PlusCircleOutlined,MinusCircleOutlined,FormOutlined,LinkOutlined,FileMarkdownOutlined,PictureOutlined,FileTextOutlined,FileOutlined,BookOutlined,FileImageOutlined,ReadOutlined,ClockCircleOutlined,CloseOutlined,CheckOutlined } from '@ant-design/icons';\r\nimport {createSelector} from 'reselect';\r\n\r\nimport NewMindmap from './NewMindmap';\r\nimport MindNode from './MindNode';\r\nimport {connect,dispatcher} from '../../../common/gflow';\r\n\r\nimport api from '../../../service/api';\r\nimport { useSelector } from 'react-redux';\r\nimport keyDetector from '../../../common/keyDetector';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\n\r\n\r\n/**\r\n * 选项卡组件\r\n * @param {*} props \r\n */\r\nconst GraphTabs=(props)=>{\r\n    const {winW,winH,activeKey,panes}= useSelector((state)=>({\r\n        winW:       state.common.winW,\r\n        winH:       state.common.winH,\r\n        activeKey:  state.tabs.activeKey,\r\n        panes:      state.tabs.panes,\r\n    }));\r\n\r\n\r\n    let beginTime=new Date().getTime();\r\n    \r\n    \r\n    /**\r\n     * 节点内容的render props\r\n     */\r\n    const ndContentRenderer=(nd)=>{\r\n        return <MindNode key={nd.id} nd={nd}\r\n            onOpenLink={props.onOpenLink} \r\n            onOpenRef={props.onOpenRef}\r\n            onShowTimeline={props.onShowTimeline}\r\n            onShowProgs={props.onShowProgs}\r\n            onShowGant={props.onShowGant}\r\n            onShowGraph={props.onShowGraph}/>;\r\n    }\r\n\r\n    /**\r\n     * 折叠按钮的render props\r\n     */\r\n    const ndExpBtnRenderer=(nd)=>{\r\n        return (\r\n            <Button \r\n                type=\"link\" \r\n                size='small' \r\n                title={nd.expand?\"折叠\":\"展开\"} \r\n                css={styles.expbtn}\r\n                icon={\r\n                    nd.expand ?\r\n                        <MinusCircleOutlined className='expbtnicon' css={colors.toggle}/>\r\n                            :\r\n                        <PlusCircleOutlined className='expbtnicon' css={colors.toggle2}/>\r\n                }  \r\n                onClick={dispatcher.tabs.toggleExpand.bind(this,nd)}/>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * 删除tab\r\n     * @param {*} targetKey \r\n     * @param {*} action \r\n     */\r\n    const onEditTab =useCallback((targetKey, action) => {\r\n        if (\"remove\" === action) {\r\n            dispatcher.tabs.removeTab(targetKey);\r\n        }\r\n    },[]);\r\n\r\n\r\n    /**\r\n     * 初始化快捷键，并在组件销毁时移除\r\n     */\r\n    useEffect(()=>{\r\n        const keyHandle=(e)=>{\r\n            //当有对话框窗口打开时，不支持选项卡操作\r\n            const isExclude=props.hasOpenDlg;// excludeStates.some(each=>true===each);\r\n\r\n            keyDetector.on(e,{\r\n                //alt+w 关闭当前选项卡（未使用ctrl+w，因为快捷键已被chrome使用，程序不能捕获到事件）\r\n                'alt+w':(e)=>{\r\n                    if(isExclude){return;}\r\n                    onEditTab(activeKey,\"remove\");\r\n                },\r\n\r\n                //alt+shift+w 关闭全部选项卡\r\n                'alt+shift+w':(e)=>{\r\n                    if(isExclude){return;}\r\n                    dispatcher.tabs.removeAllTabs();\r\n                },\r\n\r\n                //alt+o 关闭其他选项卡\r\n                'alt+o':(e)=>{\r\n                    if(isExclude){return;}\r\n                    dispatcher.tabs.removeOtherTabs();\r\n                },\r\n\r\n                //alt+p 关闭右侧选项卡\r\n                'alt+p':(e)=>{\r\n                    if(isExclude){return;}\r\n                    dispatcher.tabs.removeRightTabs();\r\n                },\r\n\r\n                //alt+i 关闭左侧选项卡\r\n                'alt+i':(e)=>{\r\n                    if(isExclude){return;}\r\n                    dispatcher.tabs.removeLeftTabs();\r\n                },\r\n\r\n                //ctrl+PageUp 前一个选项卡\r\n                'ctrl+pgup':(e)=>{\r\n                    if(isExclude){return;}\r\n                    dispatcher.tabs.togglePreTab();\r\n                },\r\n\r\n                //ctrl+PageDown 后一个选项卡\r\n                'ctrl+pgdn':(e)=>{\r\n                    if(isExclude){return;}\r\n                    dispatcher.tabs.toggleNextTab();\r\n                },\r\n\r\n                //ctrl+Shift+PageUp 选项卡前移\r\n                'ctrl+shift+pgup':(e)=>{\r\n                    if(isExclude){return;}\r\n                    dispatcher.tabs.movePreTab();\r\n                },\r\n\r\n                //ctrl+Shift+PageDown 选项卡后移\r\n                'ctrl+shift+pgdn':(e)=>{\r\n                    if(isExclude){return;}\r\n                    dispatcher.tabs.moveNextTab();\r\n                },\r\n            });\r\n        }\r\n\r\n        document.addEventListener('keydown', keyHandle);\r\n        return ()=>document.removeEventListener('keydown',keyHandle);\r\n    },[props.hasOpenDlg, activeKey, onEditTab]);\r\n\r\n    \r\n    \r\n    const result= <React.Fragment>\r\n        <Tabs\r\n            hideAdd={true}\r\n            type=\"editable-card\"\r\n            activeKey={activeKey}\r\n            css={{ height:winH-64, 'backgroundColor': 'white' }}\r\n            onChange={dispatcher.tabs.changeActiveKey}\r\n            onEdit={onEditTab}>\r\n            {\r\n                panes.map((pane,ind) => (\r\n                    <TabPane tab={\r\n                        <span>\r\n                            {pane.key===activeKey ? <FileMarkdownOutlined /> : <FileOutlined/>}\r\n                            {pane.title}\r\n                        </span>\r\n                    } key={pane.key} closable={true}>\r\n                        <div css={getTabItemContainerStyle(winH- 64 - 55-1)}>\r\n                            <NewMindmap\r\n                                ind={ind}\r\n                                ds={pane.ds}\r\n                                ndContentRenderer={ndContentRenderer}\r\n                                ndExpBtnRenderer={ndExpBtnRenderer}\r\n                            />\r\n                        </div>\r\n                    </TabPane>\r\n                ))\r\n            }\r\n        </Tabs>\r\n    </React.Fragment>;\r\n\r\n    let endTime=new Date().getTime();\r\n    console.log(`tab渲染时间：${(endTime-beginTime)} ms`);\r\n    return result;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst styles={\r\n    expbtn:{\r\n        width:14,\r\n        height:14,\r\n        verticalAlign:'bottom',\r\n        padding:0,\r\n        lineHeight:'14px',\r\n\r\n        '& .expbtnicon':{\r\n            fontSize:14,\r\n            lineHeight:'14px',\r\n            margin:0,\r\n            padding:0,\r\n        }\r\n    },\r\n};\r\n\r\n\r\nconst colors={\r\n    toggle: {color:'#7cb305'},\r\n    toggle2: {color:'#eb2f96'},//#eb2f96 #9254de\r\n};\r\n\r\nconst getTabItemContainerStyle=(h)=>({\r\n    height: h,\r\n    maxHeight: h,\r\n    overflowY: 'auto',\r\n    overflowX: 'auto',\r\n    width:'100%',\r\n    paddingBottom:'30px'\r\n});\r\n\r\n\r\nexport default React.memo(GraphTabs);","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\RelaChartDlg.js",["323","324","325","326"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport {Button,Modal} from 'antd';\r\nimport RelaChart from './RelaChart';\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\n\r\nconst RelaChartDlg=(props)=>{\r\n    const {winW,winH}=useSelector((state)=>({\r\n        winW:state.common.winW,\r\n        winH:state.common.winH,\r\n    }));\r\n\r\n    // const [forceRender, setForceRender]=useState(Symbol());\r\n\r\n    // useEffect(()=>{\r\n    //     if(props.visible){\r\n    //         setForceRender(Symbol());\r\n    //     }\r\n    // },[props.visible]);\r\n\r\n    const w=winW-200;\r\n    const h=winH-300;\r\n\r\n    return (\r\n        <Modal \r\n                title={`关系图 - ${props.name}`} \r\n                visible={props.visible} \r\n                width={w} \r\n                footer={null}\r\n                onCancel={props.onCancel}>\r\n            <RelaChart w={w-50} h={h} opts={props.opts} />\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default RelaChartDlg;","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\Toolbar.js",["327","328","329","330","331"],"/** @jsxImportSource @emotion/react */\r\nimport React from 'react';\r\nimport { Layout,   Button, Divider } from 'antd';\r\nimport { PlusOutlined, FolderOpenOutlined, EditOutlined,LinkOutlined, FolderOutlined,ExportOutlined,CodeOutlined,CompressOutlined,ExpandOutlined,ControlOutlined,ReloadOutlined,FileImageOutlined,FileMarkdownOutlined,FilePdfOutlined,FileWordOutlined,Html5Outlined } from '@ant-design/icons';\r\nimport {createSelector} from 'reselect';\r\nimport newMindmapSvc from '../../../service/newMindmapSvc';\r\nimport {connect,dispatcher} from '../../../common/gflow';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst { Header, Content } = Layout;\r\n\r\n/**\r\n * 工具栏\r\n * @param {*} props \r\n */\r\nconst Toolbar=(props)=>{\r\n    const {activeKey,panes}=useSelector((state)=>({\r\n        activeKey:  state.tabs.activeKey,\r\n        panes:      state.tabs.panes,\r\n    }));\r\n    const tmp={activeKey,panes};\r\n    let showExpandAll=ifShowExpandAll(tmp);\r\n    let showRestore=isShowRestore(tmp);\r\n\r\n    return (\r\n        <Header css={headerStyle}>\r\n            <Button shape='circle' icon={<PlusOutlined />} className='toolbtnFirst' type='default' size='large' onClick={props.onShowNewMapDlg} title='新建' />\r\n            <Button shape='circle' icon={<FolderOpenOutlined />} className='toolbtn' type='default' size='large' onClick={props.onShowSelMapDlg} title='打开' />\r\n\r\n            <Divider type=\"vertical\" className='divider'/>\r\n            <Button shape='circle' icon={<FolderOutlined />} className='toolbtn' type='default' size='large' onClick={props.onShowDir}  title='打开目录' />                                   \r\n            <Button shape='circle' icon={<CodeOutlined />} className='toolbtn' type='default' size='large' onClick={props.onShowCmd}  title='打开控制台' />\r\n            <Button shape='circle' icon={<ControlOutlined />} className='toolbtn' type='default' size='large' onClick={props.onShowDevTool}  title='开发者工具' />\r\n            <Button shape='circle' icon={<ReloadOutlined />} className='toolbtn' type='default' size='large' onClick={props.onReloadApp}  title='重新载入应用' />\r\n\r\n            <Divider type=\"vertical\" className='divider'/>\r\n            <Button shape='circle' icon={<EditOutlined />} className='toolbtn' type='default' size='large' onClick={props.onShowEditMapDlg} title='编辑' />\r\n            <Button shape='circle' icon={<LinkOutlined />} className='toolbtn' type='default' size='large' onClick={props.onCopyMapLink} title='复制导图链接' />\r\n            \r\n            \r\n\r\n            {/* {\r\n                props.showRestore &&      \r\n                    <Button shape='circle' icon={<CompressOutlined />} className='toolbtn' type='primary' size='large' onClick={props.onRestore} title='恢复默认节点状态' />\r\n            }\r\n            {\r\n                props.showExpandAll &&      \r\n                    <Button shape='circle' icon={<ExpandOutlined />} className='toolbtn' type='primary' size='large' onClick={props.onExpandAll} title='展开全部节点' />\r\n            } */}\r\n            \r\n\r\n                \r\n            <Button shape='circle' icon={<CompressOutlined />} disabled={!showRestore} className='toolbtn' type='primary' size='large' onClick={dispatcher.tabs.restoreAll} title='恢复节点默认状态' />\r\n            <Button shape='circle' icon={<ExpandOutlined />} disabled={!showExpandAll} className='toolbtn' type='primary' size='large' onClick={dispatcher.tabs.expandAll} title='展开全部节点' />\r\n            \r\n            \r\n            <Divider type=\"vertical\" className='divider'/>\r\n            <Button shape='circle' icon={<FileImageOutlined />} className='toolbtn' type='default' size='large' onClick={props.onExpImage} title='导出图片' />\r\n            <Button shape='circle' icon={<FileMarkdownOutlined />} className='toolbtn' type='default' size='large' onClick={props.onExpMarkdown} title='导出markdown' />\r\n            {/* <Button shape='circle' icon={<FilePdfOutlined />} className='toolbtn' type='default' size='large' onClick={notSupported} title='导出pdf' />\r\n            <Button shape='circle' icon={<FileWordOutlined />} className='toolbtn' type='default' size='large' onClick={notSupported} title='导出word' /> */}\r\n            <Button shape='circle' icon={<Html5Outlined />} className='toolbtn' type='default' size='large' onClick={props.onExpHtml} title='导出html' />\r\n            \r\n            \r\n\r\n            \r\n        </Header>\r\n    );\r\n    \r\n}\r\n\r\n\r\nconst ifShowExpandAll = createSelector(\r\n    props => props.activeKey,\r\n    props => props.panes,\r\n    (key, panes) => {\r\n        let currPane = ifHasValidTab(key, panes);\r\n        if (false === currPane) {\r\n            return false;\r\n        }\r\n\r\n        //计算当前选项卡是否全部展开，若不是则显示【展开全部】按钮\r\n        let allExpand = newMindmapSvc.isAllNodeExpand(currPane.ds);\r\n        return !allExpand;\r\n    }\r\n);\r\n\r\nconst isShowRestore = createSelector(\r\n    props => props.activeKey,\r\n    props => props.panes,\r\n    (key, panes) => {\r\n        let currPane = ifHasValidTab(key, panes);\r\n        if (false === currPane) {\r\n            return false;\r\n        }\r\n\r\n        //计算当前选项卡是否有展开状态变化的节点\r\n        let anyChanged = newMindmapSvc.isAnyNdExpStChanged(currPane.ds);\r\n        return anyChanged;\r\n    }\r\n);\r\n\r\nconst ifHasValidTab = (key, panes) => {\r\n    //不存选项卡或不存在活动选项卡，认为不显示按钮\r\n    if (null == panes || 0 === panes.length) {\r\n        return false;\r\n    }\r\n    let currPane = panes.filter(pane => pane.key === key);\r\n    if (null == currPane || 0 === currPane.length) {\r\n        return false;\r\n    }\r\n    currPane = currPane[0];\r\n\r\n    //当前选项卡内容解析失败\r\n    if (currPane.ds && false === currPane.ds.succ) {\r\n        return false;\r\n    }\r\n    return currPane;\r\n}\r\n\r\n//#f0f2f5\r\nconst headerStyle = {\r\n    backgroundColor:    '#f0f2f5',\r\n    paddingLeft:        0,\r\n    '& .toolbtn':       {\r\n        marginLeft:     10\r\n    },\r\n    '& .toolbtnFirst':       {\r\n        marginLeft:     15\r\n    },\r\n    '& .divider':{\r\n        backgroundColor:'#CCC',\r\n        height:'50%',\r\n        width:2, \r\n        padding:0,\r\n        marginLeft:10,\r\n        marginRight:0\r\n    }\r\n};\r\n\r\nexport default React.memo(Toolbar);","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\NewGraphDlg.js",["332","333","334","335","336","337","338","339"],"/** @jsxImportSource @emotion/react */\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport {  Modal, Input,AutoComplete,Button,TreeSelect } from 'antd';\r\nimport * as uiUtil from '../../../common/uiUtil';\r\nimport { FileMarkdownOutlined,ReloadOutlined,HomeOutlined,FolderOutlined } from '@ant-design/icons';\r\nimport api from '../../../service/api';\r\nimport {connect,dispatcher} from '../../../common/gflow';\r\nimport {createSelector} from 'reselect';\r\nimport { useSelector } from 'react-redux';\r\n\r\n/**\r\n * 新建图表对话框\r\n */\r\nconst NewGraphDlg=(props)=>{\r\n    const {allDirs}=useSelector((state)=>({\r\n        allDirs: state.common.allDirs,\r\n    }));\r\n\r\n    const [name, setName]=useState('');\r\n    const [dir, setDir]=useState('');\r\n    const nameEle=useRef();\r\n\r\n    //每次显示时把输入框设置焦点\r\n    useEffect(()=>{\r\n        if(props.visible){\r\n            setName('');\r\n            setTimeout(() => {\r\n                if(nameEle.current){\r\n                    nameEle.current.focus();\r\n                }\r\n            }, 300);\r\n        }\r\n    },[props.visible]);\r\n\r\n    //加载所有目录层次\r\n    const reloadAllDirs=useCallback(()=>{\r\n        dispatcher.common.reloadAllDirs();\r\n    },[dispatcher]);\r\n\r\n    /**\r\n     * 修改事件\r\n     * @param {*} fun \r\n     * @param {*} e \r\n     */\r\n    const onChange=useCallback((fun,e)=>{\r\n        let val=(e && e.target ? e.target.value : e);\r\n        val=('undefined'===typeof(val) ? '' : val);\r\n        fun(val);\r\n    },[]);\r\n\r\n    /**\r\n     * 确定事件\r\n     * @param {*} e \r\n     */\r\n    const onOk=(e)=>{\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        props.onOk({dir:dir.trim(), name:name.trim()});\r\n    }\r\n\r\n    \r\n    return (\r\n        <Modal  title={getDlgTitle({dir, name})}\r\n                visible={props.visible}\r\n                onOk={onOk}\r\n                onCancel={props.onCancel}\r\n                width={700}>\r\n            \r\n            <table css={{width:'100%'}}>\r\n                <tbody>\r\n                    <tr>\r\n                        <td css={{paddingTop:'10px',width:'80px'}}>图表目录：</td>\r\n                        <td css={{paddingTop:'10px',}}>\r\n                            <TreeSelect\r\n                                style={{ width: '100%' }}\r\n                                value={dir}\r\n                                dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\r\n                                treeData={allDirs}\r\n                                placeholder=\"请选择图表目录\"\r\n                                treeDefaultExpandAll\r\n                                allowClear\r\n                                onChange={onChange.bind(this,setDir)}\r\n                            />\r\n                        </td>\r\n                        <td css={{paddingTop:'10px',width:'50px'}}>\r\n                            <Button css={{marginLeft:'15px'}} \r\n                                title='刷新目录列表' \r\n                                size='small' \r\n                                type=\"default\" \r\n                                shape=\"circle\" \r\n                                icon={<ReloadOutlined />} \r\n                                onClick={reloadAllDirs} />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td css={{paddingTop:'10px',}}>图表名称：</td>\r\n                        <td css={{paddingTop:'10px',}}>\r\n                            <Input\r\n                                css={{width:'100%'}}\r\n                                placeholder=\"请输入图表名称\"\r\n                                ref={nameEle}\r\n                                value={name} \r\n                                onChange={onChange.bind(this,setName)} \r\n                                onPressEnter={onOk}\r\n                            />\r\n                        </td>\r\n                        <td></td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n            \r\n            \r\n        </Modal>\r\n    );\r\n    \r\n}\r\n\r\nconst getDlgTitle=createSelector(\r\n    props=>props.dir.trim(),\r\n    props=>props.name.trim(),\r\n    (dir,name)=>(\"新建图表 - \"+(dir ? dir+\"/\"+(name?name:\"<空>\") : (name?name:\"<空>\")))\r\n);\r\n\r\n\r\n\r\n\r\nexport default React.memo(NewGraphDlg);","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\EditGraphDlg.js",["340","341","342","343","344","345","346","347","348"],"/** @jsxImportSource @emotion/react */\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { Layout, Input, Tabs, Modal, Form, message, Button, Divider, Popover } from 'antd';\r\nimport { PictureOutlined, FolderOpenOutlined, QuestionCircleOutlined,CalendarOutlined,FileOutlined } from '@ant-design/icons';\r\nimport {useSelector} from 'react-redux';\r\n\r\nimport {withEnh} from '../../common/specialDlg';\r\n\r\nimport HelpDlg from './edit/HelpDlg';\r\nimport InsertImgDlg from './edit/InsertImgDlg';\r\nimport DateDlg from './edit/DateDlg';\r\nimport AdvColorPickerDlg from './edit/AdvColorPickerDlg';\r\nimport ColorPickerDlg from './edit/ColorPickerDlg';\r\nimport Editor from './edit/Editor';\r\n\r\n\r\n\r\nconst EnhDlg=withEnh(Modal);\r\n\r\n\r\n/**\r\n * 编辑图表对话框\r\n */\r\nconst EditGraphDlg=(props)=>{\r\n    const {winW,winH,activeKey}= useSelector((state)=>({\r\n        winW:       state.common.winW,\r\n        winH:       state.common.winH,\r\n        activeKey:  state.tabs.activeKey,\r\n    }));\r\n\r\n    const [editorForceRefresh, setEditorForceRefresh]= useState(Symbol());\r\n    const [editorAction, setEditorAction]= useState(null);\r\n    const [colorPickerVisible, setColorPickerVisible]=useState(false);\r\n    const [advColorPickerVisible, setAdvColorPickerVisible]=useState(false);\r\n    const [insertPicDlgVisible, setInsertPicDlgVisible]=useState(false);\r\n    const [helpDlgVisible, setHelpDlgVisible]=useState(false);\r\n    const [dateDlgVisible, setDateDlgVisible]=useState(false);\r\n    const [isImg, setIsImg]=useState(true);\r\n\r\n    \r\n\r\n    const hideAllDlg =useCallback(() => {\r\n        setColorPickerVisible(false);\r\n        setAdvColorPickerVisible(false);\r\n        setInsertPicDlgVisible(false);\r\n        setHelpDlgVisible(false);\r\n        setDateDlgVisible(false);\r\n    },[setColorPickerVisible, setAdvColorPickerVisible, setInsertPicDlgVisible, setHelpDlgVisible, setDateDlgVisible]);\r\n\r\n    const showHelpPicDlg = useCallback(() => {\r\n        setHelpDlgVisible(true);\r\n    },[setHelpDlgVisible]);\r\n\r\n\r\n\r\n    //-------------------颜色选择相关-----------------------------------\r\n    const onAddColor =useCallback((color = null, delayFocus = false) => {\r\n        setEditorAction({\r\n            type: 'addColor',\r\n            color,\r\n            delayFocus\r\n        });\r\n    },[setEditorAction]);\r\n\r\n    const onClearColor =useCallback(() => {\r\n        onAddColor(null);\r\n    },[onAddColor]);\r\n\r\n    const handleColorPickerColorChange =useCallback((color) => {\r\n        hideAllDlg();\r\n        onAddColor(color.hex, true);\r\n    },[hideAllDlg, onAddColor]);\r\n\r\n    const showColorPicker =useCallback(() => {\r\n        setColorPickerVisible(true);\r\n    },[setColorPickerVisible]);\r\n\r\n    const showAdvColorPicker =useCallback(() => {\r\n        setAdvColorPickerVisible(true);\r\n    },[setAdvColorPickerVisible]);\r\n\r\n\r\n\r\n    //-------------------增加图片或附件相关-----------------------------------\r\n    const onAddPic =useCallback((picRelaPath,pname) => {\r\n        setEditorAction({\r\n            type:       'addPic',\r\n            relaPath:   picRelaPath,\r\n            name:       pname,\r\n        });\r\n    },[setEditorAction]);\r\n\r\n    const onAddAtt =useCallback((picRelaPath,pname) => {\r\n        setEditorAction({\r\n            type:       'addAtt',\r\n            relaPath:   picRelaPath, \r\n            name:       pname,\r\n        });\r\n    },[setEditorAction]);\r\n\r\n    const showInsertPicDlg =useCallback(() => {\r\n        setIsImg(true);\r\n        setInsertPicDlgVisible(true);\r\n    },[setIsImg, setInsertPicDlgVisible]);\r\n\r\n    const showInsertAttDlg=useCallback(()=>{\r\n        setIsImg(false);\r\n        setInsertPicDlgVisible(true);\r\n    },[setIsImg, setInsertPicDlgVisible]);\r\n\r\n\r\n\r\n\r\n    //-------------------插入日期相关-----------------------------------    \r\n    const showDateDlg=useCallback(()=>{\r\n        setDateDlgVisible(true);\r\n    },[setDateDlgVisible]);\r\n\r\n    const onInsertDate=useCallback((dateStr)=>{\r\n        if(null===dateStr || ''===dateStr.trim()){\r\n            message.warn(\"请选择日期\");\r\n            return;\r\n        }\r\n\r\n        hideAllDlg();\r\n        setEditorAction({\r\n            type: 'addDate',\r\n            date: dateStr.trim(),\r\n        });        \r\n    },[hideAllDlg, setEditorAction]);\r\n\r\n    \r\n\r\n    /**\r\n     * 每次显示后强制子编辑器组件重新渲染\r\n     */\r\n    useEffect(()=>{\r\n        if(props.visible){\r\n            setEditorForceRefresh(Symbol());\r\n            setTimeout(() => {\r\n                setEditorForceRefresh(Symbol());\r\n            }, 500);\r\n        }\r\n    },[props.visible, setEditorForceRefresh]);\r\n\r\n\r\n    return (\r\n        <>\r\n            <EnhDlg\r\n                    title={\"编辑图表 - \" + props.currMapName}\r\n                    size={{w:winW-200}}\r\n                    maskClosable={false}\r\n                    visible={props.visible}\r\n                    footer={[\r\n                        <Button key=\"btncancel\" onClick={props.onCancel}>取消</Button>,\r\n                        <Button key=\"btnneutral\" type=\"primary\" onClick={props.onOnlySave}>保存</Button>,\r\n                        <Button key=\"btnok\" type=\"primary\" onClick={props.onOk}>保存并关闭</Button>,\r\n                    ]}\r\n                    onCancel={props.onCancel}>              \r\n                <div>\r\n                    <div css={{ 'marginBottom': \"10px\" }}>\r\n                        {/* 颜色选择器 */}\r\n                        {\r\n                            commonColors.map((eachcolor, colorInd) => (\r\n                                <div key={colorInd} title={eachcolor} css={getEditDlgColorBoxStyle(eachcolor)} onClick={onAddColor.bind(this, eachcolor)}></div>\r\n                            ))\r\n                        }\r\n                        <div css={selColorStyle} title='选择颜色' onClick={showColorPicker}></div>\r\n                        <div css={selColorStyleAdv} title='选择颜色（高级）' onClick={showAdvColorPicker}></div>\r\n                        <div css={clearColorStyle} title='清除颜色' onClick={onClearColor}></div>\r\n\r\n                        {/* 插入日期、图片、附件、帮助 */}\r\n                        <CalendarOutlined title='插入日期（ Ctrl + T ）' css={insertImgStyle} onClick={showDateDlg} />\r\n                        <PictureOutlined title='插入图片（ Ctrl + P ）' css={insertImgStyle} onClick={showInsertPicDlg} />\r\n                        <FileOutlined title='插入附件（ Ctrl + I ）' css={insertImgStyle} onClick={showInsertAttDlg} />\r\n                        <QuestionCircleOutlined title='帮助（ Ctrl + H ）' css={helpStyle} onClick={showHelpPicDlg} />\r\n                    </div>\r\n                    <Editor\r\n                        value={props.editTmpTxt}\r\n                        forceRefresh={editorForceRefresh}\r\n                        action={editorAction}\r\n                        onChange={props.onChangeEditTmpTxt}\r\n                        onOnlySave={props.onOnlySave}\r\n                        onOk={props.onOk}\r\n                        onShowInsertPicDlg={showInsertPicDlg}\r\n                        onShowInsertAttDlg={showInsertAttDlg}\r\n                        onShowHelpDlg={showHelpPicDlg}\r\n                        onShowDateDlg={showDateDlg}\r\n                    />\r\n                </div>\r\n            </EnhDlg>\r\n\r\n            {/*插入图片对话框*/}\r\n            <InsertImgDlg                    \r\n                visible={insertPicDlgVisible}\r\n                isImg={isImg}\r\n                activeKey={activeKey}\r\n                onAddPic ={onAddPic}\r\n                onAddAtt={onAddAtt}\r\n                onCancel={hideAllDlg}\r\n            />\r\n\r\n            {/* 颜色选择对话框 */}\r\n            <ColorPickerDlg\r\n                t={colorDlgY}\r\n                offsetX={colorDlgAdjustX}\r\n                parW={winW-200}\r\n                visible={colorPickerVisible}\r\n                onCancel={hideAllDlg}\r\n                onOk={handleColorPickerColorChange}\r\n            />\r\n            <AdvColorPickerDlg\r\n                t={colorDlgY}\r\n                offsetX={advColorDlgAdjustX}\r\n                parW={winW-200}\r\n                visible={advColorPickerVisible}\r\n                onCancel={hideAllDlg}\r\n                onOk={handleColorPickerColorChange}\r\n            />\r\n            \r\n            {/* 帮助对话框 */}\r\n            <HelpDlg\r\n                maxBodyH={winH-400+80}\r\n                visible={helpDlgVisible}\r\n                onCancel={hideAllDlg}/>\r\n\r\n            {/* 插入日期对话框 */}\r\n            <DateDlg\r\n                visible={dateDlgVisible}\r\n                onCancel={hideAllDlg}\r\n                onOk={onInsertDate}\r\n                />\r\n        </>\r\n    );\r\n    \r\n}\r\n\r\n//颜色选择对话框位置\r\nconst colorDlgAdjustX = 258;\r\nconst advColorDlgAdjustX = 284;\r\nconst colorDlgY = 204;\r\n\r\n\r\nconst commonColors=[\r\n    '#cf1322', '#389e0d', '#0050b3', '#fa8c16', \r\n    '#13c2c2', '#ad6800', '#1890ff', '#722ed1', '#c41d7f'\r\n];\r\n\r\n\r\nconst getCodeEditorStyle = (height) => ({\r\n    '& .CodeMirror': {\r\n        border: '1px solid lightgrey',\r\n        fontSize: 16,\r\n        height: height,\r\n        maxHeight: height,\r\n        minHeight: height,\r\n    }\r\n});\r\n\r\n\r\n\r\nconst baseHoverStyle = {\r\n    cursor: 'pointer',\r\n    transition: 'all 0.2s 0.1s',\r\n    '&:hover': {\r\n        borderRadius: 4,\r\n        opacity: 0.6,\r\n        // transform:'skew(-15deg)'\r\n    }\r\n}\r\n\r\nconst insertImgStyle = {\r\n    fontSize: 19,\r\n    marginLeft: 10,\r\n    color: 'grey',\r\n    ...baseHoverStyle,\r\n    '&:hover': {\r\n        opacity: 0.6,\r\n        transform: 'skew(-15deg)'\r\n    }\r\n}\r\n\r\nconst helpStyle = {\r\n    fontSize: 19,\r\n    marginLeft: 10,\r\n    color: '#1890ff',\r\n    ...baseHoverStyle,\r\n    '&:hover': {\r\n        opacity: 0.6,\r\n        transform: 'rotate(45deg)'\r\n    }\r\n}\r\n\r\nconst colorBoxhoverStyle = {\r\n    width: 16,\r\n    height: 16,\r\n    display: 'inline-block',\r\n    marginRight: 10,\r\n    ...baseHoverStyle\r\n}\r\n\r\nconst selColorStyle = {\r\n    backgroundImage: 'linear-gradient(135deg,orange 20%,green 100%)',\r\n    ...colorBoxhoverStyle\r\n};\r\n\r\nconst selColorStyleAdv = {\r\n    backgroundImage: 'linear-gradient(135deg,orange 20%,pink 40%,green 100%)',\r\n    ...colorBoxhoverStyle\r\n};\r\n\r\nconst clearColorStyle = {\r\n    backgroundColor: 'white',\r\n    border: '1px solid gray',\r\n    ...colorBoxhoverStyle\r\n};\r\n\r\nconst getEditDlgColorBoxStyle = (color) => ({\r\n    backgroundColor: color,\r\n    ...colorBoxhoverStyle\r\n});\r\n\r\n\r\n\r\nexport default React.memo(EditGraphDlg);","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\Welcome.js",["349","350","351","352"],"/** @jsxImportSource @emotion/react */\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { Button,Row, Col, Avatar   } from 'antd';\r\nimport { PlusOutlined,FolderOutlined,CodeOutlined,ControlOutlined,ReloadOutlined } from '@ant-design/icons';\r\n\r\nimport PathSelect from './PathSelect';\r\nimport logourl from '../../../assets/logo.jpg';\r\nimport { createSelector } from 'reselect';\r\nimport api from '../../../service/api';\r\nimport {connect} from '../../../common/gflow';\r\nimport ConnectedPathSelect from './ConnectedPathSelect';\r\nimport { useSelector } from 'react-redux';\r\n\r\n/**\r\n * 首页\r\n * @param {*} props \r\n */\r\nconst Welcome=(props)=>{\r\n    const {winW,winH}=useSelector((state)=>({\r\n        winW:state.common.winW,\r\n        winH:state.common.winH,\r\n    }));\r\n\r\n    const [appInfo]=useState(()=>appInfoSelector(undefined));\r\n    const fileselectRight= calcBackTopRight({winW,winH});\r\n\r\n    return (\r\n        <Row>\r\n            <Col span={16} offset={4}>\r\n                <Row css={{\r\n                    marginTop:50,\r\n                    padding:10,\r\n                    backgroundColor:'white'\r\n                }}>\r\n                    <Col span={14} >\r\n                        <ConnectedPathSelect \r\n                            maxH={winH-160}\r\n                            backtopLoc={[fileselectRight,120]}\r\n                            onSelectMapItem={props.onSelectMapItem}/>\r\n                    </Col>\r\n                    <Col span={10}>                   \r\n                        <div css={logoWrapperStyle}>\r\n                            <p><Avatar size={256} src={logourl}/></p>\r\n                            <p className='appname'>{appInfo.showname}<span className='ver'>V{appInfo.version}</span></p>\r\n                            <div className='btns'>\r\n                                <Button type=\"primary\"  icon={<PlusOutlined />} size='large' onClick={props.onAddMap}>新建</Button>\r\n                                <Button type=\"default\" className='r2btn' title='打开目录' shape='circle'  icon={<FolderOutlined />} size='large' onClick={props.onOpenMapsDir}></Button>\r\n                                <Button type=\"default\" className='rbtn' title='打开控制台' shape='circle' icon={<CodeOutlined/>} size='large' onClick={props.onOpenBash}></Button>\r\n                                <Button type=\"default\" className='rbtn' title='开发者工具' shape='circle' icon={<ControlOutlined/>} size='large' onClick={props.onShowDevTool}></Button>\r\n                                <Button type=\"default\" className='rbtn' title='重新载入应用' shape='circle' icon={<ReloadOutlined/>} size='large' onClick={props.onReloadApp}></Button>\r\n                            </div>                               \r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    );\r\n    \r\n}\r\n\r\n\r\nconst calcBackTopRight= createSelector(\r\n    props=>props.winW,\r\n    winw=>parseInt(winw*4/9)+80\r\n);\r\n\r\n\r\nconst appInfoSelector=createSelector(\r\n    noUse=>noUse,\r\n    noUse=>api.loadAppInfo()\r\n);\r\n\r\n\r\n\r\nconst logoWrapperStyle={\r\n    'textAlign':'center',\r\n    'marginBottom':50,\r\n\r\n    '& .appname':{\r\n        'fontSize':18\r\n    },\r\n    '& .ver':{\r\n        'display':'inline-block',\r\n        'marginLeft':30\r\n    },\r\n    '& .btns':{\r\n        'marginTop':20\r\n    },\r\n    '& .btns .rbtn':{\r\n        'marginLeft':10\r\n    },\r\n    '& .btns .r2btn':{\r\n        'marginLeft':20\r\n    }\r\n};\r\n\r\n\r\n\r\nexport default React.memo(Welcome);","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\OpenGraphDlg.js",["353","354","355","356","357","358","359","360"],"/** @jsxImportSource @emotion/react */\r\nimport React from 'react';\r\nimport { Layout,   Tabs, Modal, Input, message, Button, Divider } from 'antd';\r\nimport PathSelect from './PathSelect';\r\nimport {withEnh} from '../../common/specialDlg';\r\nimport {connect} from '../../../common/gflow';\r\nimport ConnectedPathSelect from './ConnectedPathSelect';\r\nimport {createSelector} from 'reselect';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst EnhDlg=withEnh(Modal);\r\n\r\n/**\r\n * 打开图表对话框\r\n * @param {*} props \r\n */\r\nconst OpenGraphDlg=(props)=>{\r\n    const {winW,winH}=useSelector((state)=>({\r\n        winW:state.common.winW,\r\n        winH:state.common.winH,\r\n    }));\r\n\r\n    let {dlgW, backtopLoc, contentMaxH}=calcSizeProps({winW,winH});\r\n\r\n    return (\r\n        <EnhDlg noFooter\r\n                title=\"打开图表\"\r\n                size={{w:dlgW}}\r\n                visible={props.visible}\r\n                onCancel={props.onCancel}>\r\n            <ConnectedPathSelect \r\n                maxH={contentMaxH}\r\n                forceMaxH={true}\r\n                backtopLoc={backtopLoc}\r\n                onSelectMapItem={props.onSelectMapItem}/>\r\n        </EnhDlg>\r\n    );\r\n    \r\n}\r\n\r\n/**\r\n * 计算对话框相关大小和位置等信息\r\n */\r\nconst calcSizeProps=createSelector(\r\n    props=>props.winW,\r\n    props=>props.winH,\r\n    (winW, winH)=>{\r\n        //对话框宽度计算\r\n        let dlgW=900;\r\n        if(winW<=dlgW){\r\n            dlgW=winW-50;\r\n        }\r\n\r\n        //backtop按钮的位置计算：右、上\r\n        let backtopLoc=[\r\n            (winW-dlgW)/2+100,\r\n            150\r\n        ];\r\n\r\n        //对话框内容区的最大高度\r\n        let contentMaxH=winH- 64 - 250;\r\n\r\n        return {\r\n            dlgW,\r\n            backtopLoc,\r\n            contentMaxH\r\n        };\r\n    }\r\n);\r\n\r\nexport default React.memo(OpenGraphDlg);","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\ConnectedPathSelect.js",["361"],"/** @jsxImportSource @emotion/react */\r\nimport React from 'react';\r\nimport PathSelect from './PathSelect';\r\nimport {connect,dispatcher} from '../../../common/gflow';\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\n/**\r\n * 路径选择组件的包装\r\n */\r\nconst ConnectedPathSelect=(props)=>{\r\n    const {filelist, dirs}= useSelector((state)=>{\r\n        return {\r\n            filelist:   state.filesel.filelist,\r\n            dirs:       state.filesel.dirs,\r\n        }\r\n    });\r\n\r\n    const extProps={...props, filelist, dirs};\r\n\r\n    return <PathSelect {...extProps} \r\n        onloadDir={dispatcher.filesel.load}\r\n        onloadCurrDir={dispatcher.filesel.loadCurrDir}\r\n    />;\r\n}\r\n\r\n\r\n\r\nexport default React.memo(ConnectedPathSelect);","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\PathSelect.js",["362"],"/** @jsxImportSource @emotion/react */\r\nimport React, { useCallback, useState } from 'react';\r\nimport { Breadcrumb,Button,Row, Col,List, Avatar,Divider,BackTop   } from 'antd';\r\nimport { FileMarkdownOutlined,ReloadOutlined,HomeOutlined,FolderOutlined } from '@ant-design/icons';\r\n\r\nimport {createSelector} from 'reselect';\r\n\r\n/**\r\n * 路径选择\r\n */\r\nconst PathSelect=(props)=>{\r\n    const [listWrapperId]=useState(()=>'fileselectlist'+new Date().getTime());\r\n\r\n    const getScrollTarget=useCallback(()=>{\r\n        return document.getElementById(listWrapperId);\r\n    },[]);\r\n\r\n    const onSelectMapItem=(item)=>{\r\n        if (!item.isfile) {\r\n            props.onloadDir(item.fullpath);\r\n            return;\r\n        }\r\n        props.onSelectMapItem(item);\r\n    }\r\n\r\n    \r\n    //列表样式，如果指定的forceMaxH，则保持高度和最大高度一致\r\n    let listWrapperStyle=getListWrapperStyle(props);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Row>\r\n                <Col span={22}>\r\n                    <Breadcrumb> \r\n                        {\r\n                            props.dirs.map((dir,ind)=>(\r\n                                <Breadcrumb.Item key={ind}  {...(dir.iscurr?{}:{'href':'#'})}  onClick={props.onloadDir.bind(this,dir.fullpath)}>\r\n                                    {dir.ishome ? <HomeOutlined /> : dir.showname}\r\n                                </Breadcrumb.Item>\r\n                            ))\r\n                        }    \r\n                    </Breadcrumb>\r\n                </Col>\r\n                <Col span={2} css={{textAlign:'right'}}>\r\n                    <Button title='刷新' size='small' type=\"default\" shape=\"circle\" icon={<ReloadOutlined />} onClick={props.onloadCurrDir} />\r\n                </Col>\r\n            </Row>                          \r\n            <Divider css={{marginTop:'10px',marginBottom:'0px'}}/>\r\n            \r\n            <div css={listWrapperStyle} id={listWrapperId}>                   \r\n                <List\r\n                    itemLayout=\"horizontal\"\r\n                    dataSource={props.filelist}\r\n                    renderItem={item => (\r\n                        <List.Item className='listitem' onClick={onSelectMapItem.bind(this,item)} {...getListItemExtra(item)}>\r\n                            <List.Item.Meta \r\n                                avatar={\r\n                                    <Avatar icon={item.isfile ? <FileMarkdownOutlined /> : <FolderOutlined />} \r\n                                        css={{ \"backgroundColor\": (item.isfile?'#40a9ff':'orange') }} />\r\n                                }\r\n                                title={item.showname}\r\n                                description={item.size}/>\r\n                        </List.Item>\r\n                    )}\r\n                />\r\n            </div>\r\n            \r\n            {\r\n                (props.backtopLoc && 2===props.backtopLoc.length) && (\r\n                    <BackTop target={getScrollTarget} css={{right:props.backtopLoc[0],bottom:props.backtopLoc[1]}}/>\r\n                )\r\n            }\r\n        </React.Fragment>\r\n    );\r\n    \r\n}\r\n\r\n\r\nconst getListItemExtra=(item)=>{\r\n    if(item.pic){\r\n        return {\r\n            extra: <div css={{marginRight:16,width:48,height:48,\r\n                    backgroundImage:`url('${item.pic}')`,\r\n                    backgroundRepeat:'no-repeat',\r\n                    backgroundSize:'cover',\r\n                    backgroundPosition:'center center'}}></div>\r\n        };\r\n    }\r\n\r\n    return {};\r\n}\r\n\r\nconst getListWrapperStyle=createSelector(\r\n    props=>props.maxH,\r\n    props=>props.forceMaxH,\r\n    (maxH,forceMaxH)=>{\r\n        let style={\r\n            'maxHeight':maxH,\r\n            'overflowY':'auto',\r\n            'overflowX':'hidden',\r\n\r\n            '& .listitem:hover':{\r\n                backgroundColor:'#EEE',\r\n                borderRadius:10,\r\n            },\r\n            '& .listitem':{\r\n                cursor:'pointer',\r\n                transition: 'all 0.3s 0s',\r\n                transitionTimingFunction: 'ease',\r\n            }\r\n\r\n        };\r\n        if(forceMaxH){\r\n            style={'height':maxH,'minHeight':maxH, ...style};\r\n        }\r\n        return style;\r\n    }\r\n);\r\n\r\nexport default PathSelect;","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\edit\\ColorPickerDlg.js",["363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381"],"/** @jsxImportSource @emotion/react */\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { Layout, Input, Tabs, Modal, Form, message, Button, Divider, Popover } from 'antd';\r\nimport { PictureOutlined, FolderOpenOutlined, QuestionCircleOutlined,CalendarOutlined,FileOutlined } from '@ant-design/icons';\r\nimport moment  from 'moment';\r\nimport { CirclePicker,PhotoshopPicker } from 'react-color';\r\nimport {withEnh} from '../../../common/specialDlg';\r\n\r\nconst EnhDlg=withEnh(Modal);\r\n\r\n\r\n/**\r\n * 颜色选择器对话框\r\n * @param {*} props \r\n */\r\nconst ColorPickerDlg=(props)=>{\r\n    return <EnhDlg noTitle noFooter closable={false}\r\n            size={{w: dlgW}}\r\n            css={{left: props.offsetX - (props.parW - dlgW) / 2, top: props.t}}\r\n            visible={props.visible}\r\n            onCancel={props.onCancel}>\r\n\r\n        <CirclePicker\r\n            width ='504px'\r\n            colors={colors}\r\n            onChange={props.onOk} />\r\n    </EnhDlg>;\r\n};\r\n\r\nconst dlgW =540;// 290;\r\nconst colors=[\r\n    '#4D4D4D', '#999999', '#EEEEEE',/*'#FFFFFF',*/ '#F44E3B', '#FE9200', '#FCDC00', '#DBDF00', '#A4DD00', '#68CCCA', '#73D8FF', '#AEA1FF', '#FDA1FF', \r\n    '#333333', '#808080', '#cccccc', '#D33115', '#E27300', '#FCC400', '#B0BC00', '#68BC00', '#16A5A5', '#009CE0', '#7B64FF', '#FA28FF', \r\n    '#000000', '#666666', '#B3B3B3', '#9F0500', '#C45100', '#FB9E00', '#808900', '#194D33', '#0C797D', '#0062B1', '#653294', '#AB149E'\r\n];\r\n\r\nexport default React.memo(ColorPickerDlg);","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\edit\\AdvColorPickerDlg.js",["382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399"],"/** @jsxImportSource @emotion/react */\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { Layout, Input, Tabs, Modal, Form, message, Button, Divider, Popover } from 'antd';\r\nimport { PictureOutlined, FolderOpenOutlined, QuestionCircleOutlined,CalendarOutlined,FileOutlined } from '@ant-design/icons';\r\nimport moment  from 'moment';\r\nimport { CirclePicker,PhotoshopPicker } from 'react-color';\r\nimport {withEnh} from '../../../common/specialDlg';\r\n\r\nconst EnhDlg=withEnh(Modal);\r\n\r\n/**\r\n * 高级颜色选择对话框\r\n * @param {*} props \r\n */\r\nconst AdvColorPickerDlg=(props)=>{\r\n    const [color, setColor]= useState({hex: \"#194D33\",});\r\n\r\n    const onOk=useCallback(()=>{\r\n        props.onOk(color);\r\n    },[props.onOk, color]);\r\n\r\n    return <EnhDlg noTitle noFooter closable={false}\r\n            size={{w: dlgW}}\r\n            css={{left: props.offsetX - (props.parW - dlgW) / 2, top: props.t}}\r\n            visible={props.visible}\r\n            onCancel={props.onCancel}\r\n            bodyStyle={{padding:0,}}>\r\n        <PhotoshopPicker css={{height:310,}} header='高级颜色选择' color={color.hex} onChange={setColor} onAccept ={onOk} onCancel={props.onCancel}/>\r\n    </EnhDlg>;\r\n};\r\n\r\n\r\n\r\nconst dlgW = 513;\r\n\r\nexport default React.memo(AdvColorPickerDlg);","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\edit\\Editor.js",["400","401","402","403","404","405","406","407","408","409","410","411","412","413","414"],"/** @jsxImportSource @emotion/react */\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { Layout, Input, Tabs, Modal, Form, message, Button, Divider, Popover } from 'antd';\r\nimport { PictureOutlined, FolderOpenOutlined, QuestionCircleOutlined,CalendarOutlined,FileOutlined } from '@ant-design/icons';\r\nimport {useSelector} from 'react-redux';\r\n\r\nimport { Controlled as CodeMirror } from 'react-codemirror2';\r\n\r\nimport 'codemirror/lib/codemirror.css';\r\nimport 'codemirror/addon/dialog/dialog.css';\r\nimport 'codemirror/addon/search/matchesonscrollbar.css';\r\n\r\nimport 'codemirror/mode/markdown/markdown';\r\nimport 'codemirror/keymap/sublime';\r\nimport 'codemirror/addon/selection/active-line';\r\nimport 'codemirror/addon/dialog/dialog';\r\nimport 'codemirror/addon/search/searchcursor';\r\nimport 'codemirror/addon/search/search';\r\nimport 'codemirror/addon/scroll/annotatescrollbar';\r\nimport 'codemirror/addon/search/matchesonscrollbar';\r\nimport 'codemirror/addon/search/jump-to-line';\r\n\r\nimport editorSvc from '../../../../service/editorSvc';\r\nimport { createSelector } from 'reselect';\r\n\r\n\r\n\r\n/**\r\n * 编辑器\r\n * @param {*} props \r\n */\r\nconst Editor=(props)=>{\r\n\r\n    const {winH}= useSelector((state)=>({\r\n        winH:       state.common.winH,\r\n    }));\r\n\r\n    const codeMirrorInstRef=useRef(null);\r\n    const bindCodeMirrorInstRef=useCallback((ele)=>{\r\n        codeMirrorInstRef.current=ele;\r\n    },[]);\r\n\r\n    /**\r\n     * 防止默认事件触发的处理\r\n     */\r\n    const onPreventKey =useCallback(() => {\r\n        if(window.event){\r\n            window.event.stopPropagation();\r\n            window.event.preventDefault();\r\n        }\r\n    },[]);\r\n\r\n\r\n    /**\r\n     * 替换内容并获得焦点\r\n     * @param {*} originCursor   替换前光标位置\r\n     * @param {*} originLineLen  替换前光标所在行的长度\r\n     * @param {*} newCursor      替换后光标位置\r\n     * @param {*} newLine        替换后整行的内容\r\n     * @param {*} delayFocus     是否延迟获得焦点\r\n     */\r\n    const replaceLine =useCallback((originCursor, originLineLen, newCursor, newLine, delayFocus = false) => {\r\n        if(!codeMirrorInstRef.current){\r\n            return;\r\n        }\r\n        const codeMirrorInst=codeMirrorInstRef.current;\r\n        codeMirrorInst.setCursor(originCursor);\r\n        codeMirrorInst.setSelection(originCursor, { line: originCursor.line, ch: originLineLen });\r\n        codeMirrorInst.replaceSelection(newLine);\r\n        codeMirrorInst.setCursor(newCursor);\r\n        codeMirrorInst.setSelection(newCursor);\r\n        codeMirrorInst.focus();\r\n\r\n        //对话框刚关闭时，不能马上获得焦点，因此这种情况需要延迟一下\r\n        if (delayFocus) {\r\n            setTimeout(() => {\r\n                codeMirrorInst.setCursor(newCursor);\r\n                codeMirrorInst.setSelection(newCursor);\r\n                codeMirrorInst.focus();\r\n            }, 500);\r\n        }\r\n    },[]);\r\n\r\n    const onAddColor =useCallback((color = null, delayFocus = false) => {\r\n        if(!codeMirrorInstRef.current){\r\n            return;\r\n        }\r\n        const codeMirrorInst=codeMirrorInstRef.current;\r\n\r\n        //获得当前光标位置与光标所在行\r\n        let cursor = codeMirrorInst.getCursor();\r\n        let { line } = cursor;\r\n        let lineTxt = codeMirrorInst.getLine(line);\r\n\r\n        //替换行\r\n        let newLine = editorSvc.setColor(lineTxt, color);\r\n        replaceLine({ line, ch: 0 }, lineTxt.length, { line, ch: newLine.length }, newLine, delayFocus);\r\n    },[replaceLine]);\r\n\r\n    const onAddPic = useCallback((picRelaPath,pname) => {\r\n        if(!codeMirrorInstRef.current){\r\n            return;\r\n        }\r\n        const codeMirrorInst=codeMirrorInstRef.current;\r\n\r\n        //获得当前光标位置与光标所在行     \r\n        let cursor = codeMirrorInst.getCursor();\r\n        let { line, ch } = cursor;\r\n        let lineTxt = codeMirrorInst.getLine(line);\r\n\r\n        //替换行\r\n        let { newLinetxt, cusorPos } = editorSvc.addPic(lineTxt, ch, picRelaPath,pname);\r\n        replaceLine({ line, ch: 0 }, lineTxt.length, { line, ch: cusorPos }, newLinetxt, true);\r\n    },[replaceLine]);\r\n\r\n    const onAddAtt = useCallback((picRelaPath,pname) => {\r\n        if(!codeMirrorInstRef.current){\r\n            return;\r\n        }\r\n        const codeMirrorInst=codeMirrorInstRef.current;\r\n\r\n        //获得当前光标位置与光标所在行     \r\n        let cursor = codeMirrorInst.getCursor();\r\n        let { line, ch } = cursor;\r\n        let lineTxt = codeMirrorInst.getLine(line);\r\n\r\n        //替换行\r\n        let { newLinetxt, cusorPos } = editorSvc.addAtt(lineTxt, ch, picRelaPath,pname);\r\n        replaceLine({ line, ch: 0 }, lineTxt.length, { line, ch: cusorPos }, newLinetxt, true);\r\n    },[replaceLine]);\r\n\r\n    const onAddDate=useCallback((dateStr)=>{\r\n        //获得当前光标位置与光标所在行\r\n        if(!codeMirrorInstRef.current){\r\n            return;\r\n        }\r\n        const codeMirrorInst=codeMirrorInstRef.current; \r\n        let cursor = codeMirrorInst.getCursor();\r\n        let { line, ch } = cursor;\r\n        let lineTxt = codeMirrorInst.getLine(line);\r\n\r\n        //替换行\r\n        let targetDateStr=dateStr.substring(2).replace(/[-]/g,'.');//去掉两位年\r\n        let { newLinetxt, cusorPos } = editorSvc.addDate(lineTxt, ch, targetDateStr);\r\n        replaceLine({ line, ch: 0 }, lineTxt.length, { line, ch: cusorPos }, newLinetxt, true);\r\n    },[replaceLine]);\r\n\r\n\r\n\r\n    /**\r\n     * 显示后获取焦点并刷新\r\n     */\r\n    useEffect(()=>{\r\n        if(props.forceRefresh) {\r\n             const focusFun=()=>{\r\n                if(codeMirrorInstRef.current){\r\n                    codeMirrorInstRef.current.focus();\r\n                    codeMirrorInstRef.current.refresh();\r\n                    console.log(\"codemirror刷新 \"+new Date().getTime());\r\n                    return true;\r\n                }\r\n                return false;\r\n             }\r\n             setTimeout(focusFun, 0);\r\n        }\r\n    },[props.forceRefresh]);\r\n\r\n    useEffect(()=>{\r\n        if(!props.action){\r\n            return;\r\n        }\r\n        if('addColor'===props.action.type){\r\n            onAddColor(props.action.color, props.action.delayFocus);\r\n            return;\r\n        }\r\n        if('addPic'===props.action.type){\r\n            onAddPic(props.action.relaPath, props.action.name);\r\n            return;\r\n        }\r\n        if('addAtt'===props.action.type){\r\n            onAddAtt(props.action.relaPath, props.action.name);\r\n            return;\r\n        }\r\n        if('addDate'===props.action.type){\r\n            onAddDate(props.action.date);\r\n        }\r\n    },[props.action, onAddColor, onAddPic, onAddAtt, onAddDate]);\r\n\r\n    \r\n    return <CodeMirror\r\n        css={getCodeEditorStyle(winH-400)}\r\n        editorDidMount={bindCodeMirrorInstRef}\r\n        value={props.value}\r\n        options={{\r\n            lineNumbers: true,\r\n            theme: 'default',\r\n            mode: 'markdown',\r\n            styleActiveLine: true,\r\n            indentWithTabs: true,\r\n            indentUnit: 4,\r\n            keyMap: \"sublime\",\r\n            extraKeys: {\r\n                \"Ctrl-F\": \"findPersistent\",\r\n                \"Ctrl-G\": \"jumpToLine\",\r\n                \"Ctrl-S\": props.onOnlySave,\r\n                \"Shift-Ctrl-S\": props.onOk,                                  \r\n                \"Ctrl-P\": props.onShowInsertPicDlg,\r\n                \"Ctrl-I\": props.onShowInsertAttDlg,\r\n                \"Ctrl-H\": props.onShowHelpDlg,\r\n                \"Ctrl-T\": props.onShowDateDlg,\r\n                \r\n                \"Shift-Ctrl-G\": onPreventKey,\r\n                \"Shift-Ctrl-F\": onPreventKey,\r\n                \"Shift-Ctrl-R\": onPreventKey,\r\n                \"Esc\":          onPreventKey,\r\n                \"Alt-G\":        onPreventKey,\r\n            }\r\n        }}\r\n        onBeforeChange={props.onChange} />;\r\n};\r\n\r\nconst getCodeEditorStyle = createSelector(\r\n    height=>height,\r\n    (height) => ({\r\n        '& .CodeMirror': {\r\n            border: '1px solid lightgrey',\r\n            fontSize: 16,\r\n            height: height,\r\n            maxHeight: height,\r\n            minHeight: height,\r\n        }\r\n    })\r\n);\r\n\r\n\r\nexport default React.memo(Editor);\r\n","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\edit\\HelpDlg.js",["415","416","417","418","419","420"],"/** @jsxImportSource @emotion/react */\r\nimport React from 'react';\r\nimport { Layout, Input, Tabs, Modal, Form, message, Button, Divider, Popover } from 'antd';\r\nimport {withEnh} from '../../../common/specialDlg';\r\nimport api from '../../../../service/api';\r\n\r\nconst EnhDlg=withEnh(Modal);\r\n\r\nconst { TabPane } = Tabs;\r\n\r\n/**\r\n * 帮助对话框\r\n * @param {*} props \r\n */\r\nconst HelpDlg=(props)=>{\r\n    return (\r\n        <EnhDlg noFooter\r\n                title=\"帮助\"\r\n                closable={true}\r\n                size={{w: 800}}\r\n                visible={props.visible}\r\n                onCancel={props.onCancel}>\r\n            \r\n            <Tabs tabPosition='left' css={getTabsStyle(props.maxBodyH)}>\r\n                <TabPane tab=\"节点部分\" key=\"1\" className='tabitem'>\r\n                    <div className='wrapper'>\r\n                        <table css={helpTableStyle}>\r\n                            <tbody>\r\n                            <tr>\r\n                                <th>类型</th>\r\n                                <th>用法示例</th>\r\n                            </tr>\r\n                            {\r\n                                nodes.map((item,ind)=>(\r\n                                    <tr key={ind}>\r\n                                        <td>{item[0]}</td>\r\n                                        <td>\r\n                                            {\r\n                                                item[1].map((subitem,subInd)=>(\r\n                                                    <div key={''+ind+\"_\"+subInd}>\r\n                                                        <div>\r\n                                                            <div>{subitem[0]}</div>\r\n                                                            <div dangerouslySetInnerHTML={{__html:subitem[1]}}></div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                ))\r\n                                            }\r\n                                            \r\n                                        </td>\r\n                                    </tr>\r\n                                ))\r\n                            }\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </TabPane>\r\n                <TabPane tab=\"引用部分\" key=\"2\" className='tabitem'>\r\n                    <div className='wrapper'>\r\n                        <table css={helpTableStyle}>\r\n                            <tbody>\r\n                            <tr>\r\n                                <th>类型</th>\r\n                                <th>用法示例</th>\r\n                            </tr>\r\n                            {\r\n                                refs.map((item,ind)=>(\r\n                                    <tr key={ind}>\r\n                                        <td>{item[0]}</td>\r\n                                        <td>\r\n                                            <div>\r\n                                                <div>\r\n                                                    <div>{item[1]}</div>\r\n                                                    <div>{item[2]}</div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))\r\n                            }\r\n                            </tbody>\r\n                        </table>\r\n                        <div css={{marginTop:'10px',}}>\r\n                            <Button type='link' css={{paddingLeft:0,}} onClick={api.openUrl.bind(this,'https://guides.github.com/features/mastering-markdown/')}>Markdown 语法说明</Button>\r\n                        </div>\r\n                        <div>\r\n                            <Button type='link' css={{paddingLeft:0,}} onClick={api.openUrl.bind(this,'https://katex.org/docs/supported.html')}>Latex 语法说明</Button>\r\n                        </div>\r\n                    </div>\r\n                </TabPane>\r\n                <TabPane tab=\"快捷键\" key=\"3\" className='tabitem'>\r\n                    <div className='wrapper'>\r\n                        <table css={helpTableStyle}>\r\n                            <tbody>\r\n                            {\r\n                                shortcuts.map((item,ind)=><React.Fragment key={ind}>\r\n                                    <tr key={ind}>\r\n                                        <th colSpan='2' css={{fontWeight:'bold',}}>{item.title}</th>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <th>按键</th>\r\n                                        <th>功能</th>\r\n                                    </tr>\r\n                                    <React.Fragment>\r\n                                    {\r\n                                        item.rows.map((row,rowInd)=><tr key={ind+\"_\"+rowInd}>\r\n                                            <td>{row[0]}</td>\r\n                                            <td>\r\n                                                <div>\r\n                                                    <div>\r\n                                                        <div>{row[1]}</div>\r\n                                                        <div></div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </td>\r\n                                        </tr>)\r\n                                    }\r\n                                    </React.Fragment>\r\n                                </React.Fragment>)\r\n                            }\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </TabPane>\r\n            </Tabs>\r\n        </EnhDlg>\r\n    );\r\n    \r\n}\r\n\r\nconst nodes=[\r\n    ['项目符号',[\r\n        ['- aaa',\"// '-' 前用[tab]表示层级关系\"],\r\n    ]],\r\n    ['文本',[\r\n        ['aaabbb','// 单行文本'],\r\n        ['aaa|bbb','// 多行用 <span style=\"color:black;\">|</span> 分隔'],\r\n        ['ls \\\\| grep aa','// 使用 <span style=\"color:black;\">\\\\|</span> 来显示竖线'],\r\n        ['press `ctrl` + `c`','// 支持markdown语法'],\r\n        ['[打开](file:///d:\\\\a\\\\b.txt)','// 执行文件或打开目录'],\r\n        ['[选择](dir:///d:\\\\a\\\\b.txt)','// 打开目录并选择指定文件或目录'],\r\n        ['[执行](cmd:///dir d:\\\\)','// 执行命令，使用 <span style=\"color:black;\">[space]\\\\</span> 表示换行'],\r\n        ['[复制](cp:///这是一段文本)','// 复制内容，使用 <span style=\"color:black;\">[space]\\\\</span> 表示换行'],\r\n    ]],\r\n    ['线条颜色',[\r\n        ['c:red',''],\r\n        ['c:#fbfbfb',''],\r\n        ['c:rgba(80,90,20,0.5)',''],\r\n    ]],\r\n    ['简短说明',[\r\n        ['m:说明1',''],\r\n        ['m:说明x|m:说明y','// 多条说明用 | 分隔'],\r\n    ]],\r\n    ['日期',[\r\n        ['d:10/8/2','// 可使用 / . - 分隔'],\r\n        ['d:10-8-2',\"// 无 ',' 则自动计算颜色\"],\r\n        ['d:10.8.2',''],\r\n        ['d:10.8.2,','// 使用线条的颜色'],\r\n        ['d:10.8.2,red','// 指定颜色'],\r\n    ]],\r\n    ['进度',[\r\n        ['p:10','// 进行中'],\r\n        ['p:100','// 已完成'],\r\n        ['p:-30','// 出错'],\r\n    ]],\r\n    ['甘特图',[\r\n        ['基本格式','// id、起始或引用id、结束或天数、进度'],\r\n        ['g:id,20.4.6,20.4.7,30','// id、起始、结束、进度'],\r\n        ['g:id,refid,8,30','// 引用任务的后一天为起始时间</div></div>'],\r\n        ['g:id,refid+2,20,30','// 引用任务可以向后(+)或向前(-)N天'],\r\n    ]],\r\n    ['默认折叠',[\r\n        ['zip:','']\r\n    ]],\r\n    ['子节点全在右侧',[\r\n        ['right:','// 只对根节点设置有效']\r\n    ]],\r\n    ['引用文字替换',[\r\n        ['tref:xxx','// 对应引用部分 # tref:xxx']\r\n    ]],\r\n    ['长段独立引用',[\r\n        ['ref:xxx','// 对应引用部分 # ref:xxx'],\r\n    ]],\r\n    ['链接',[\r\n        ['http://aa.bb','// 普通链接'],\r\n        ['[某网](http://cc.dd)','// markdown格式链接'],\r\n    ]]\r\n];\r\n\r\n\r\n                          \r\n                                     \r\n                                       \r\n                                      \r\n\r\n                       \r\n                         \r\n                          \r\n\r\n\r\n\r\nconst refs=[\r\n    ['开始标志','***','// 第一次出现表示引用开始'],\r\n    ['文字引用','# tref:xxx','// 节点内容可分多行写'],\r\n    ['文字正文','Markdown语法','// 多行会连接为一行，除非指定 | 符号'],\r\n    ['引用名称','# ref:xxx','// 对应节点中的设置'],\r\n    ['引用正文','Markdown语法','// 支持github markdown及latex'],\r\n    ['关系图引用','# graph:xxx','// 对应节点中的设置'],\r\n    ['关系图正文','- 名称1,名称2,关系1','// 每行一个关系，可写多行'],\r\n];\r\n\r\n\r\nconst shortcuts=[\r\n    {\r\n        title:'导图编辑窗口',\r\n        rows:[\r\n            ['Ctrl + S','只保存'],\r\n            ['Ctrl + Shift + S','保存并关闭'],\r\n            ['Ctrl + F','查找对话框'],\r\n            ['Enter','下一个'],\r\n            ['Shift + Enter','上一个'],\r\n            ['Ctrl + G','跳转到指定行'],\r\n            ['Ctrl + P','插入图片'],\r\n            ['Ctrl + I','插入附件'],\r\n            ['Ctrl + T','插入日期'],\r\n            ['Ctrl + H','打开帮助页'],\r\n        ]\r\n    },\r\n    {\r\n        title:'导图浏览窗口',\r\n        rows:[\r\n            ['Alt+W','关闭当前选项卡'],\r\n            ['Alt+Shift+W','关闭所有选项卡'],\r\n            ['Alt+O','关闭其它选项卡'],\r\n            ['Alt+P','关闭右侧选项卡'],\r\n            ['Alt+I','关闭左侧选项卡'],\r\n            ['Ctrl+PageUp','选中前一个选项卡'],\r\n            ['Ctrl+PageDown','选中后一个选项卡'],\r\n            ['Ctrl+Shift+PageUp','当前选项卡前移'],\r\n            ['Ctrl+Shift+PageDown','当前选项卡后移'],\r\n        ]\r\n    }\r\n];\r\n\r\n\r\n\r\n                          \r\n                  \r\n\r\n\r\nconst getTabsStyle=(maxH)=>{\r\n    let requireH=600;\r\n    let itemMaxH=maxH-0;\r\n    let factH=(requireH>itemMaxH ? itemMaxH : requireH);\r\n\r\n    return {\r\n        '& .tabitem div.wrapper': {\r\n            minHeight: factH,\r\n            maxHeight: factH,\r\n            height:    factH,\r\n            overflowY: 'auto',\r\n            overflowX: 'hidden',\r\n        },\r\n    }\r\n};\r\n\r\n\r\nconst helpTableStyle = {\r\n    width: '100%',\r\n    borderCollapse: 'collapse',\r\n    border: '1px solid lightgrey',\r\n    '& td,& th': {\r\n        border: '1px solid lightgrey',\r\n        padding: '5px 10px',\r\n    },\r\n    '& th': {\r\n        textAlign: 'center',\r\n    },\r\n    '& td:nth-child(1)': {\r\n        width: 120,\r\n        textAlign:'left',\r\n    },\r\n    '& td:nth-child(2) > div': {\r\n        display: 'table',\r\n        width: '100%',\r\n        // backgroundColor:'lightblue',\r\n    },\r\n    '& td:nth-child(2) > div > div': {\r\n        display: 'table-row',\r\n    },\r\n    '& td:nth-child(2) > div > div > div': {\r\n        display: 'table-cell',\r\n    },\r\n    '& td:nth-child(2) > div > div > div:nth-child(1)': {\r\n        width:180,\r\n        // backgroundColor:'red',\r\n        // textAlign:'center',\r\n    },\r\n    '& td:nth-child(2) > div > div > div:nth-child(2)': {\r\n        textAlign: 'left',\r\n        color:'#BBB',\r\n    },\r\n};\r\n\r\nexport default React.memo(HelpDlg);","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\edit\\DateDlg.js",["421","422","423","424","425","426","427","428","429","430","431","432"],"/** @jsxImportSource @emotion/react */\r\nimport {Global } from '@emotion/react';\r\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { Layout, Input, Tabs, Modal, Form, message, Button, Divider, Popover,DatePicker, Calendar  } from 'antd';\r\nimport { DoubleLeftOutlined,LeftOutlined,RightOutlined,DoubleRightOutlined } from '@ant-design/icons';\r\nimport moment  from 'moment';\r\nimport {withEnh} from '../../../common/specialDlg';\r\n\r\n\r\nconst EnhDlg=withEnh(Modal);\r\n\r\n/**\r\n * 日期选择对话框\r\n * @param {*} props \r\n */\r\nconst DateDlg=(props)=>{\r\n    const [datePickPopoverClassname]=useState(()=>'edigdlg-datepopup-container-'+new Date().getTime());\r\n    const [date, setDate]=useState(moment());\r\n\r\n    //每次显示都重置为当前日期\r\n    useEffect(()=>{\r\n        if(props.visible){\r\n            setDate(moment());\r\n        }\r\n    },[props.visible]);\r\n\r\n    //设置特殊日期\r\n    const onSelCommonDays=useCallback((offset)=>{\r\n        let time=moment();\r\n        if(offset>0){\r\n            time=time.add(offset, 'days');\r\n        }\r\n        if(offset<0){\r\n            time=time.subtract(0-offset, 'days');\r\n        }\r\n        setDate(time);\r\n    },[setDate]);\r\n\r\n    //确定按钮事件\r\n    const onOk=useCallback(()=>{\r\n        props.onOk(date.format(\"YYYY-MM-DD\"));\r\n    },[props.onOk, date]);\r\n\r\n\r\n\r\n    const headerRender=useCallback(({ value, type, onChange, onTypeChange }) => {\r\n        const changeYear=(delta)=>{\r\n            const y=parseInt(date.format(\"YYYY\"),10)+delta;\r\n            const result = value.clone().year(y);\r\n            onChange(result);\r\n        };\r\n        const changeMonth=(delta)=>{\r\n            const m=parseInt(date.format(\"MM\"),10)-1;//月份值以0开始\r\n            const y=parseInt(date.format(\"YYYY\"),10);\r\n\r\n            if(11===m && delta>0){\r\n                const result = value.clone().year(y+1).month(0);\r\n                onChange(result);\r\n                return;\r\n            }\r\n            if(0===m && delta<0){\r\n                const result = value.clone().year(y-1).month(11);\r\n                onChange(result);\r\n                return;\r\n            }\r\n            const result = value.clone().month(m+delta);\r\n            onChange(result);\r\n        };\r\n        \r\n        return <div css={calendarHeaderStyle}>\r\n            <Button size='small' type='text' title=\"前一年\" icon={<DoubleLeftOutlined className='icon'/>} onClick={changeYear.bind(this,-1)}></Button>\r\n            <Button size='small' type='text' title=\"上月\" icon={<LeftOutlined className='icon'/>} onClick={changeMonth.bind(this,-1)}></Button>\r\n            <span>{date.format(\"YYYY-MM-DD\")}</span>\r\n            <Button size='small' type='text' title=\"下月\" icon={<RightOutlined className='icon'/>} onClick={changeMonth.bind(this,1)}></Button>\r\n            <Button size='small' type='text' title=\"后一年\" icon={<DoubleRightOutlined className='icon'/>} onClick={changeYear.bind(this,1)}></Button>\r\n        </div>\r\n    },[date]);\r\n\r\n    return (\r\n        <EnhDlg  title=\"选择日期\"\r\n                closable={true}\r\n                maskClosable={true}\r\n                visible={props.visible}\r\n                onCancel={props.onCancel}\r\n                onOk={onOk}\r\n                size={{...dlgScale, fixh:true}}\r\n                bodyStyle={{paddingTop:5}}>\r\n            <Calendar\r\n                fullscreen={false}\r\n                value={date}\r\n                onChange={setDate}\r\n                headerRender={headerRender}/>\r\n            <Divider css={{margin:0,padding:0,paddingBottom:5,}}/>\r\n            <div css={commonDaysStyle}>\r\n                <Button type='link' className='day' onClick={onSelCommonDays.bind(this,-3)}><span css={getSpecialDateStyle(date,-3)}>大前天</span></Button>\r\n                <Button type='link' className='day' onClick={onSelCommonDays.bind(this,-2)}><span css={getSpecialDateStyle(date,-2)}>前天</span></Button>\r\n                <Button type='link' className='day' onClick={onSelCommonDays.bind(this,-1)}><span css={getSpecialDateStyle(date,-1)}>昨天</span></Button>\r\n                <Button type='link' className='day' onClick={onSelCommonDays.bind(this,0)}><span css={getSpecialDateStyle(date,0)}>今天</span></Button>\r\n                <Button type='link' className='day' onClick={onSelCommonDays.bind(this,1)}><span css={getSpecialDateStyle(date,1)}>明天</span></Button>\r\n                <Button type='link' className='day' onClick={onSelCommonDays.bind(this,2)}><span css={getSpecialDateStyle(date,2)}>后天</span></Button>\r\n                <Button type='link' className='day' onClick={onSelCommonDays.bind(this,3)}><span css={getSpecialDateStyle(date,3)}>大后天</span></Button>\r\n            </div>\r\n        </EnhDlg>\r\n    );\r\n    \r\n}\r\n\r\n\r\nconst getSpecialDateStyle=(date, deltaDays)=>{\r\n    const d1=date.format(\"YYYY-MM-DD\");\r\n    const d2=moment().add(deltaDays, 'days').format(\"YYYY-MM-DD\");\r\n    if(d1===d2){\r\n        return {\r\n            textDecoration:'underline',\r\n            color:'green',\r\n        };\r\n    }\r\n    return {};\r\n};\r\n\r\n\r\nconst calendarHeaderStyle={\r\n    textAlign:\"center\",\r\n    marginTop:10,\r\n    marginBottom:10,\r\n    marginLeft:'auto',\r\n    marginRight:'auto',\r\n    width:'96%',\r\n    display:'grid',\r\n    gridTemplateColumns: '25px 25px auto 25px 25px',\r\n\r\n    '& .icon':{\r\n        color:'#BBB',\r\n    },\r\n};\r\n\r\nconst dlgScale={\r\n    w:360,\r\n    h:360,\r\n};\r\n\r\nconst getDatePickerPopoverStyle=(parCls)=>{\r\n    let result={};\r\n    let key=`.${parCls} .ant-picker-panel-container`;\r\n    result[key]={\r\n        boxShadow:'0px 0px 0px gray',\r\n        border:'1px solid #DDD',//#DDD\r\n    }\r\n    return result;\r\n}\r\n\r\nconst commonDaysStyle={\r\n    marginTop:0,\r\n    marginBottom:0,\r\n    display:'flex',\r\n\r\n    '& .day':{\r\n        flex:1,\r\n        padding:0,\r\n    },\r\n};\r\n\r\nexport default React.memo(DateDlg);","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\edit\\InsertImgDlg.js",["433","434","435","436","437","438","439","440"],"/** @jsxImportSource @emotion/react */\r\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\r\nimport { Layout, Input, Tabs, Modal, Form, message, Button, Divider, Popover } from 'antd';\r\nimport { PictureOutlined, FolderOpenOutlined, QuestionCircleOutlined } from '@ant-design/icons';\r\nimport {withEnh} from '../../../common/specialDlg';\r\nimport api from '../../../../service/api';\r\nimport * as uiUtil from '../../../../common/uiUtil';\r\nimport {useSelector} from 'react-redux';\r\n\r\nconst EnhDlg=withEnh(Modal);\r\n\r\n/**\r\n * 插入图片或文件对话框\r\n * @param {*} props \r\n */\r\nconst InsertImgDlg=(props)=>{\r\n    const {winW}= useSelector((state)=>({\r\n        winW:       state.common.winW,\r\n    }));\r\n\r\n    const insertPicDlgW = (winW < 820 ? winW - 20 : 800);\r\n\r\n    const [picPath, setPicPath]=useState('');\r\n    const [picName, setPicName]=useState('');\r\n\r\n    let elePicPath=useRef();\r\n    let elePicName=useRef();\r\n\r\n    //显示时清空输入框并选中第一个输入框 \r\n    useEffect(()=>{\r\n       if(props.visible) {\r\n            setPicPath('');\r\n            setPicName('');\r\n            setTimeout(() => {\r\n                onFocusEle(elePicPath);\r\n            }, 300);\r\n       }\r\n    },[props.visible]);\r\n\r\n    /**\r\n     * 修改事件\r\n     * @param {*} fun \r\n     * @param {*} e \r\n     */\r\n    const onChange=useCallback((fun,e)=>{\r\n        let val=(e && e.target ? e.target.value : e);\r\n        val=('undefined'===typeof(val) ? '' : val);\r\n        fun(val);\r\n    },[]);\r\n\r\n    /**\r\n     * 使组件获得焦点\r\n     * @param {*} nextRef \r\n     * @param {*} e \r\n     */\r\n    const onFocusEle=useCallback((nextRef,e)=>{\r\n        if(e){\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n        }\r\n        if(nextRef && nextRef.current){\r\n            nextRef.current.focus();\r\n        }\r\n    },[]);\r\n\r\n    /**\r\n     * 选择图片或附件文件，选择后更新输入框，并使第二个输入框获得焦点\r\n     */\r\n    const onSelPicFile = () => {\r\n        let selFilePaths = (props.isImg ? api.selPicFile() : api.selAttFile());\r\n        if (selFilePaths && selFilePaths[0]) {\r\n            let fullpath = selFilePaths[0];\r\n            let fn = fullpath.substring(Math.max(fullpath.lastIndexOf(\"\\\\\"), fullpath.lastIndexOf(\"/\")) + 1);\r\n            \r\n            setPicPath(fullpath);\r\n            setPicName((oldName)=>(''===oldName.trim() ? fn : oldName.trim()));\r\n            onFocusEle(elePicName);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 确定按钮点击事件\r\n     * @param {*} e \r\n     */\r\n    const onOk=(e)=>{\r\n        if(e){\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n        }\r\n        const fun=(props.isImg ? onValidateAddPic : onValidateAddAtt);\r\n        fun({\r\n            insertPicPath: picPath, \r\n            insertPicName: picName\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 插入图片时的校验\r\n     * @param {*} param0 \r\n     */\r\n    const onValidateAddPic = ({insertPicPath, insertPicName}) => {\r\n        const pathAndName={insertPicPath, insertPicName};\r\n\r\n        if (null != insertPicPath && \r\n                \"\" !== insertPicPath.trim() && \r\n                !api.existsFullpath(insertPicPath) &&\r\n                !api.isUrlFormat(insertPicPath)) {\r\n            message.warn(\"图片路径或url格式有误\");\r\n            return;\r\n        }\r\n        if (null == insertPicName || \"\" ===insertPicName.trim()) {\r\n            message.warn(\"图片显示名称不能为空\");\r\n            return;\r\n        }\r\n        if (insertPicName.includes(\"/\") || insertPicName.includes(\"\\\\\")) {\r\n            message.warn('图片显示名称格式有误，不能包含 \"/\" 或 \"\\\\\" ');\r\n            return;\r\n        }\r\n        if (true === api.existsPic(insertPicName)) {\r\n            Modal.confirm({\r\n                title: '是否覆盖',\r\n                content: <>\r\n                    <div css={{ marginBottom: 10 }}>图片显示名称已存在，是否要覆盖 ？</div>\r\n                    <Button type=\"link\" title='查看已有同名图片' css={{ margin: 0, padding: 0 }} onClick={api.openPicByName.bind(this,insertPicName)}>查看已有同名图片</Button>\r\n                </>,\r\n                icon: <QuestionCircleOutlined />,\r\n                onOk: copyPicAndAddTxt.bind(this,pathAndName),\r\n                okText:'确定',\r\n                cancelText:'取消',\r\n            });\r\n            return;\r\n        }\r\n\r\n        copyPicAndAddTxt(pathAndName);\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * 插入附件时的校验\r\n     * @param {*} param0 \r\n     */\r\n    const onValidateAddAtt = ({insertPicPath, insertPicName}) => {\r\n        const pathAndName={insertPicPath, insertPicName};\r\n\r\n        if (null == insertPicPath && \r\n                \"\" === insertPicPath.trim()) {\r\n            message.warn(\"附件路径或url不能为空\");\r\n            return;\r\n        }\r\n        if (null != insertPicPath && \r\n                \"\" !== insertPicPath.trim() && \r\n                !api.existsFullpath(insertPicPath) &&\r\n                !api.isUrlFormat(insertPicPath)) {\r\n            message.warn(\"附件路径或url格式有误\");\r\n            return;\r\n        }\r\n        if (null == insertPicName || \"\" === insertPicName.trim()) {\r\n            message.warn(\"附件显示名称不能为空\");\r\n            return;\r\n        }\r\n        if (insertPicName.includes(\"/\") || insertPicName.includes(\"\\\\\")) {\r\n            message.warn('附件显示名称格式有误，不能包含 \"/\" 或 \"\\\\\" ');\r\n            return;\r\n        }\r\n        if (true === api.existsAtt(insertPicName)) {\r\n            Modal.confirm({\r\n                title: '是否覆盖',\r\n                content: <>\r\n                    <div css={{ marginBottom: 10 }}>附件显示名称已存在，是否要覆盖 ？</div>\r\n                    <Button type=\"link\" title='查看已有同名附件' css={{ margin: 0, padding: 0 }} onClick={api.openAttByName.bind(this,insertPicName)}>查看已有同名附件</Button>\r\n                </>,\r\n                icon: <QuestionCircleOutlined />,\r\n                onOk: copyAttAndAddTxt.bind(this,pathAndName),\r\n                okText:'确定',\r\n                cancelText:'取消',\r\n            });\r\n            return;\r\n        }\r\n\r\n        copyAttAndAddTxt(pathAndName);\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * 插入图片的校验\r\n     * @param {*} param0 \r\n     */\r\n    const copyPicAndAddTxt = ({insertPicPath, insertPicName}) => {\r\n        //如果路径为空，则从剪切板找图片；否则从指定路径加载图片\r\n        let prom =null;\r\n        if(''===insertPicPath.trim()){//路径为空，从剪切板取图片\r\n            prom=api.copyClipboardPicToImgsDir(insertPicName, props.activeKey);\r\n        }else{//路径不为空，从文件取图片\r\n            prom=api.copyPicToImgsDir(insertPicPath,insertPicName, props.activeKey);\r\n        }\r\n        prom.then(rs=>{\r\n            props.onCancel();\r\n            props.onAddPic(rs,insertPicName);\r\n        }).catch(e=>{\r\n            message.warn(e.msg);\r\n        });\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * 插入附件的校验\r\n     * @param {*} param0 \r\n     */\r\n    const copyAttAndAddTxt = ({insertPicPath, insertPicName}) => {\r\n        //从指定路径加载附件\r\n        let prom = api.copyAttToAttsDir(insertPicPath,insertPicName, props.activeKey);          \r\n        prom.then(rs=>{\r\n            props.onCancel();\r\n            props.onAddAtt(rs,insertPicName);\r\n        }).catch(e=>{\r\n            message.warn(e.msg);\r\n        });\r\n        return;\r\n    }\r\n\r\n\r\n    \r\n    return (\r\n        <EnhDlg\r\n                title={props.isImg?\"插入图片\":\"插入附件\"}\r\n                closable={true}\r\n                size={{w: insertPicDlgW}}\r\n                visible={props.visible}\r\n                onCancel={props.onCancel}\r\n                onOk={onOk}>\r\n                    \r\n            <div css={insertImgFormStyle}>\r\n                <div className='row'>\r\n                    <div className='cell lab'>{props.isImg?'图片位置：':'附件位置：'}</div>\r\n                    <div className='cell'>\r\n                        <Input \r\n                            value={picPath}\r\n                            onPressEnter={onFocusEle.bind(this,elePicName)}\r\n                            ref={elePicPath}\r\n                            onChange={onChange.bind(this,setPicPath)} \r\n                            addonAfter={<FolderOpenOutlined onClick={onSelPicFile} css={{ cursor: 'pointer' }} />} \r\n                            placeholder={props.isImg?'请输入图片路径、url、留空（以从剪切版读取）':'请输入附件路径或url'} />\r\n                    </div>\r\n                </div>\r\n                <div className='row'>\r\n                    <div className='cell lab'>显示名称：</div>\r\n                    <div className='cell'>\r\n                        <Input \r\n                            value={picName} \r\n                            onPressEnter={onOk}\r\n                            ref={elePicName}\r\n                            onChange={onChange.bind(this,setPicName)} \r\n                            placeholder={props.isImg?'请输入图片显示名称':'请输入附件显示名称'} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </EnhDlg>\r\n    );\r\n    \r\n}\r\n\r\nconst insertImgFormStyle = {\r\n    width: '100%',\r\n    display: 'table',\r\n    '& .row': {\r\n        display: 'table-row'\r\n    },\r\n    '& .cell': {\r\n        display: 'table-cell',\r\n        verticalAlign: 'center',\r\n        paddingTop: 5,\r\n        paddingBottom: 5,\r\n    },\r\n    '& .cell.lab': {\r\n        width: 80,\r\n    },\r\n};\r\n\r\nexport default React.memo(InsertImgDlg);","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\RelaChart.js",["441"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport * as echarts from 'echarts';\r\n\r\nconst RelaChart=(props)=>{\r\n    const containerRef=useRef();\r\n    const chartRef=useRef();\r\n\r\n    \r\n    console.log(\"chart\",props);\r\n    \r\n\r\n    const setContainerRef=(e)=>{\r\n        if(e){\r\n            containerRef.current=e;\r\n        }\r\n        if(containerRef.current && !chartRef.current){\r\n            chartRef.current = echarts.init(containerRef.current);\r\n        }\r\n    };\r\n\r\n    \r\n\r\n\r\n    useEffect(()=>{\r\n        if(chartRef.current){\r\n            chartRef.current.resize();\r\n            console.log(\"更新大小\");\r\n        }\r\n    },[props.w, props.h, chartRef]);\r\n\r\n\r\n    useEffect(()=>{\r\n        if(props.opts && chartRef.current){\r\n            chartRef.current.setOption(getOption(props.opts), true);    \r\n            console.log(\"更新选项\");\r\n        }\r\n    },[props.opts, chartRef]);\r\n\r\n    // useEffect(()=>{\r\n    //     if(chartRef.current){\r\n    //         chartRef.current.resize();\r\n    //         console.log(\"更新大小11\");\r\n    //     }\r\n    //     if(props.opts && chartRef.current){\r\n    //         chartRef.current.setOption(getOption(props.opts), true);    \r\n    //         console.log(\"更新选项11\");\r\n    //     }\r\n    // },[props.forceRender]);\r\n\r\n\r\n    \r\n\r\n    return <div ref={setContainerRef} style={{\r\n        width:`${props.w || 600}px`,\r\n        height:`${props.h || 400}px`,\r\n    }}></div>\r\n};\r\n\r\n/**\r\n * 生成echart选项对象\r\n * @param {*} sumOpts [\r\n *      [\"人物1\", \"人物2\", \"关系\"],\r\n *      [\"人物3\", \"人物4\", \"关系\"],\r\n *      ...\r\n * ]\r\n */\r\nconst getOption=(sumOpts)=>{\r\n    let names=[];\r\n    sumOpts.forEach(line=>{\r\n        names.push(line[0]);\r\n        names.push(line[1]);\r\n    });\r\n    names=Array.from(new Set(names));\r\n    \r\n    const data=names.map(item=>({name:item}));\r\n    const links=sumOpts.map(line=>({\r\n        source: line[0],\r\n        target: line[1],\r\n        //symbolSize: [4, 10],\r\n        label: {\r\n            show: true,\r\n            formatter:line[2]\r\n        },\r\n        tooltip:{\r\n            show:true,\r\n            formatter:line[2]\r\n        },\r\n    }));\r\n\r\n    return {\r\n        ...baseOption,\r\n        series:[\r\n            {\r\n                ...baseOption.series[0],\r\n                data,\r\n                links,\r\n            }\r\n        ]\r\n    };\r\n};\r\n\r\n/**\r\n * echart的选项对象的模板\r\n */\r\nconst baseOption= {\r\n    title: {\r\n        text: ''\r\n    },\r\n    tooltip: {\r\n        show:true,\r\n        trigger:'item',\r\n    },\r\n    animationDurationUpdate: 1500,\r\n    animationEasingUpdate: 'quinticInOut',\r\n    color:['#5470c6','#91cc75','#fac858','#ee6666','#73c0de','#3ba272', '#fc8452','#9a60b4','#ea7ccc',],\r\n    textStyle:{\r\n        width:60,\r\n        overflow:'truncate',\r\n        ellipsis:'...',\r\n    },\r\n    series: [\r\n        {\r\n            type: 'graph',\r\n            layout: 'force',\r\n            force: {\r\n                repulsion: 4000\r\n            },\r\n            symbolSize: 60,\r\n            roam: true,\r\n            draggable:true,\r\n            emphasis:{\r\n                focus: 'adjacency',\r\n            },\r\n            label: {\r\n                show: true,\r\n                formatter:\"{b}\",\r\n            },\r\n            edgeSymbol: ['none', 'arrow',/*'none', 'none'*/],\r\n            edgeSymbolSize: [0,10,/*10*/],\r\n            edgeLabel: {\r\n                fontSize: 12\r\n            },\r\n            tooltip:{\r\n                show:true,\r\n                formatter:\"{b}\",\r\n            },\r\n            lineStyle: {\r\n                opacity: 0.9,\r\n                width: 1,\r\n                curveness: 0\r\n            },\r\n\r\n            data: [\r\n                /*\r\n                此部分为动态生成\r\n                {name: '节点111'}, \r\n                */\r\n            ],\r\n            \r\n            links: [\r\n                /*\r\n                此部分为动态生成\r\n                {\r\n                    source: 0,\r\n                    target: 1,\r\n                    symbolSize: [5, 20],\r\n                    label: {\r\n                        show: true,\r\n                        formatter:\"父子11\"\r\n                    },\r\n                    tooltip:{\r\n                        show:true,\r\n                        formatter:\"父子11\"\r\n                    },\r\n                }\r\n                */\r\n            ],\r\n            \r\n        }\r\n    ]\r\n};\r\n\r\nexport default RelaChart;","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\NewMindmap.js",["442","443","444"],"/** @jsxImportSource @emotion/react */\r\nimport React, { useCallback, useEffect, useReducer, useRef, useState } from 'react';\r\nimport {Spin,Alert,Row, Col} from 'antd';\r\nimport {createSelector} from 'reselect';\r\nimport newMindmapSvc from '../../../service/newMindmapSvc';\r\n\r\n/**\r\n * 导图组件\r\n * @param {*} props \r\n */\r\nconst NewMindmap=(props)=>{\r\n    let beginTime=new Date().getTime();\r\n\r\n    const [{ndStyles, lineStyles, expBtnStyles, wrapperStyle},setAllStyles]=useState({\r\n        ndStyles:{}, \r\n        lineStyles:{}, \r\n        expBtnStyles:{}, \r\n        wrapperStyle:{}\r\n    });\r\n\r\n    const arrangeNdPositions=useCallback(()=>{\r\n        if(!props.ds){return;}\r\n        newMindmapSvc.loadStyles(props.ds);\r\n        setAllStyles({\r\n            ndStyles:       props.ds.ndStyles, \r\n            lineStyles:     props.ds.lineStyles, \r\n            expBtnStyles:   props.ds.expBtnStyles,\r\n            wrapperStyle:   props.ds.wrapperStyle,\r\n        });\r\n    },[props.ds]);\r\n\r\n    const defaultContentRenderer=useCallback((nd)=>{\r\n        return \"\"+nd.str;\r\n    },[]);\r\n\r\n    const defaultExpBtnRenderer=useCallback((nd)=>{\r\n        return nd.expand? \"-\":\"+\";\r\n    },[]);\r\n\r\n\r\n    useEffect(()=>{\r\n        if(props.ds && props.ds.tree && props.ds.list && props.ds.map){\r\n            // setTimeout(arrangeNdPositions, 5000);\r\n            arrangeNdPositions();\r\n        }\r\n    },[props.ds, arrangeNdPositions]);\r\n\r\n\r\n    let middleTime=new Date().getTime();\r\n\r\n    \r\n    //校验\r\n    if(!props.ds){\r\n        return (<Row>\r\n            <Col span={8} offset={8}>\r\n                <Alert\r\n                    css={{marginTop:50}}\r\n                    message='状态异常'\r\n                    description='读取图表文件时出现错误'\r\n                    type=\"error\"/>\r\n            </Col>\r\n        </Row>);\r\n    }\r\n    if(false===props.ds.succ){\r\n        return (<Row>\r\n            <Col span={8} offset={8}>\r\n                <Alert\r\n                    css={{marginTop:50}}\r\n                    message={props.ds.msg}\r\n                    description={props.ds.desc}\r\n                    type=\"error\"/>\r\n            </Col>\r\n        </Row>);\r\n    }\r\n    if(!props.ds.list){\r\n        return null;\r\n    }\r\n\r\n\r\n    //如果提供了节点渲染器或扩展按钮渲染器，则使用，否则使用默认的\r\n    let actNdRenderer=defaultContentRenderer;\r\n    let actExpBtnRenderer=defaultExpBtnRenderer;\r\n    if(props.ndContentRenderer){\r\n        actNdRenderer=props.ndContentRenderer;\r\n    }\r\n    if(props.ndExpBtnRenderer){\r\n        actExpBtnRenderer=props.ndExpBtnRenderer;\r\n    }\r\n\r\n\r\n    \r\n\r\n\r\n\r\n    const result= (\r\n        <div css={{...defaultWrapperStyle, ...wrapperStyle}}  id={`graphwrapper_${props.ind}`}>\r\n            {\r\n                props.ds.list.map((nd,ind)=>(<React.Fragment key={'nd-'+ind}>\r\n                    {/* 节点内容  css={nd.parid?{borderBottom:'1px solid lightgray'}:{}}*/}\r\n                    <div className='item'  id={nd.id} style={getNdStyle({ndStyles, nd})}>\r\n                        {actNdRenderer(nd)}\r\n                    </div>\r\n\r\n                    {/* 节点到父节点的连接线 */}\r\n                    {\r\n                        (nd.parid) && (<>\r\n                            <div className='linewrapper' id={`line_${nd.id}`} style={getLineStyle({lineStyles, nd, type:'line'})}>\r\n                                <div className='lineExp' id={`lineExp_${nd.id}`} style={getLineStyle({lineStyles, nd, type:'lineExp'})}></div>\r\n                                <div className='linefrom' id={`linefrom_${nd.id}`} style={getLineStyle({lineStyles, nd, type:'lineFrom'})}></div>\r\n                                <div className='lineto' id={`lineto_${nd.id}`} style={getLineStyle({lineStyles, nd, type:'lineTo'})}></div>\r\n                            </div>\r\n                        </>)\r\n                    }\r\n\r\n                    {/* 节点的展开按钮 */}\r\n                    {\r\n                        (nd.childs && 0<nd.childs.length) && \r\n                            <div id={`expbtn_${nd.id}`} className='expBtn' style={getExpBtnStyle({expBtnStyles, nd})}>\r\n                                {actExpBtnRenderer(nd)}\r\n                            </div>\r\n                    }\r\n                </React.Fragment>))\r\n            }\r\n        </div>\r\n    );\r\n\r\n\r\n    let endTime=new Date().getTime();\r\n    console.log(`导图渲染时间：${(endTime-beginTime)} ms，其中渲染前执行闭包的时间： ${(middleTime-beginTime)} ms`);\r\n    return result;\r\n    \r\n}\r\n\r\nconst getExpBtnStyle=createSelector(\r\n    json=>json.expBtnStyles,\r\n    json=>json.nd,\r\n    (expBtnStyles,nd)=>(\r\n        (nd && expBtnStyles && expBtnStyles[nd.id]) ? expBtnStyles[nd.id] : {}\r\n    )\r\n);\r\n\r\nconst getLineStyle=createSelector(\r\n    json=>json.lineStyles,\r\n    json=>json.nd,\r\n    json=>json.type,\r\n    (lineStyles,nd,type)=>(\r\n        (nd && lineStyles && lineStyles[nd.id] && lineStyles[nd.id][type]) ? \r\n            lineStyles[nd.id][type] \r\n                : \r\n            {}\r\n    )\r\n);\r\n\r\nconst getNdBorderStyle=(nd)=>{\r\n    if(!nd){\r\n        return {};\r\n    }\r\n\r\n    //根节点不设置边框，其样式由render props自己设置\r\n    if(0===nd.lev){\r\n        return {};\r\n    }\r\n    //二级节点使用四周的边框\r\n    if(1===nd.lev){\r\n        return {\r\n            borderRadius: 5,\r\n            border:`1px solid ${nd.color}`\r\n        };\r\n    }\r\n    //其他节点使用下边框\r\n    return {borderBottom:`1px solid ${nd.color}`};\r\n}\r\n\r\nconst getNdStyle=createSelector(\r\n    json=>json.ndStyles,\r\n    json=>json.nd,\r\n    (ndStyles,nd)=>{\r\n        let borderStyle=getNdBorderStyle(nd);\r\n        let positionStyle=((nd && ndStyles && ndStyles[nd.id]) ? ndStyles[nd.id]: {});\r\n        return {...borderStyle, ...positionStyle};\r\n    }\r\n);\r\n\r\n\r\n\r\nconst outOfViewStyle={\r\n    left:'-800px',\r\n    top:'-800px',\r\n};\r\n\r\nconst baseFloatBlockStyle={\r\n    position: 'absolute',\r\n    backgroundColor: 'transparent',\r\n    overflow: 'hidden',\r\n    boxSizing: 'border-box',\r\n}\r\n\r\n\r\nconst defaultWrapperStyle={\r\n    overflow:'hidden',\r\n    border:'0px solid red',\r\n    position:'relative',    //容器本身使用相对定位，其中内容使用绝对定位相对它来布局\r\n    marginLeft:'auto',\r\n    marginRight:'auto',\r\n\r\n    '& .item':{\r\n        whiteSpace:'nowrap',\r\n        position:'absolute',\r\n        display:'inline-block',\r\n        border:'0px solid green',\r\n        paddingBottom:0,\r\n        // paddingTop:10,\r\n        paddingTop:0,\r\n        // paddingLeft:20,\r\n        // paddingRight:20,\r\n        verticalAlign: 'bottom',\r\n        // backgroundColor: 'lightblue',\r\n        ...outOfViewStyle,\r\n    },\r\n\r\n    '& .expBtn':{\r\n        ...baseFloatBlockStyle,\r\n        ...outOfViewStyle,\r\n        zIndex:1,   //折叠按钮显示在连接线的上层\r\n    },\r\n\r\n    '& .linewrapper': {\r\n        ...baseFloatBlockStyle,\r\n        ...outOfViewStyle,\r\n    },\r\n  \r\n    '& .linewrapper .lineExp': {\r\n        ...baseFloatBlockStyle,\r\n    },\r\n\r\n    '& .linewrapper .linefrom': {\r\n        ...baseFloatBlockStyle,\r\n    },\r\n\r\n    '& .linewrapper .lineto': {\r\n        ...baseFloatBlockStyle,\r\n    }\r\n};\r\n\r\nexport default React.memo(NewMindmap);","D:\\ws\\web\\gmap-ui\\src\\ui\\home\\views\\MindNode.js",[],"D:\\ws\\web\\gmap-ui\\src\\service\\editorSvc.js",[],{"ruleId":"445","replacedBy":"446"},{"ruleId":"447","replacedBy":"448"},{"ruleId":"449","severity":1,"message":"450","line":4,"column":8,"nodeType":"451","messageId":"452","endLine":4,"endColumn":12},{"ruleId":"449","severity":1,"message":"453","line":31,"column":15,"nodeType":"451","messageId":"452","endLine":31,"endColumn":18},{"ruleId":"454","severity":1,"message":"455","line":420,"column":1,"nodeType":"456","endLine":420,"endColumn":32},{"ruleId":"454","severity":1,"message":"457","line":5,"column":1,"nodeType":"456","endLine":5,"endColumn":27},{"ruleId":"449","severity":1,"message":"458","line":73,"column":5,"nodeType":"451","messageId":"452","endLine":73,"endColumn":10},{"ruleId":"449","severity":1,"message":"459","line":74,"column":5,"nodeType":"451","messageId":"452","endLine":74,"endColumn":12},{"ruleId":"449","severity":1,"message":"460","line":75,"column":5,"nodeType":"451","messageId":"452","endLine":75,"endColumn":14},{"ruleId":"461","severity":1,"message":"462","line":83,"column":16,"nodeType":"463","messageId":"464","endLine":83,"endColumn":49},{"ruleId":"449","severity":1,"message":"465","line":88,"column":5,"nodeType":"451","messageId":"452","endLine":88,"endColumn":22},{"ruleId":"449","severity":1,"message":"466","line":30,"column":7,"nodeType":"451","messageId":"452","endLine":30,"endColumn":21},{"ruleId":"449","severity":1,"message":"467","line":4,"column":12,"nodeType":"451","messageId":"452","endLine":4,"endColumn":33},{"ruleId":"449","severity":1,"message":"468","line":702,"column":13,"nodeType":"451","messageId":"452","endLine":702,"endColumn":21},{"ruleId":"449","severity":1,"message":"469","line":703,"column":13,"nodeType":"451","messageId":"452","endLine":703,"endColumn":21},{"ruleId":"454","severity":1,"message":"455","line":1519,"column":1,"nodeType":"456","endLine":1534,"endColumn":3},{"ruleId":"449","severity":1,"message":"470","line":18,"column":13,"nodeType":"451","messageId":"452","endLine":18,"endColumn":19},{"ruleId":"449","severity":1,"message":"471","line":19,"column":9,"nodeType":"451","messageId":"452","endLine":19,"endColumn":16},{"ruleId":"472","severity":1,"message":"473","line":176,"column":7,"nodeType":"474","endLine":176,"endColumn":40,"suggestions":"475"},{"ruleId":"472","severity":1,"message":"473","line":191,"column":7,"nodeType":"474","endLine":191,"endColumn":36,"suggestions":"476"},{"ruleId":"472","severity":1,"message":"473","line":207,"column":7,"nodeType":"474","endLine":207,"endColumn":48,"suggestions":"477"},{"ruleId":"472","severity":1,"message":"473","line":218,"column":7,"nodeType":"474","endLine":218,"endColumn":40,"suggestions":"478"},{"ruleId":"449","severity":1,"message":"479","line":2,"column":10,"nodeType":"451","messageId":"452","endLine":2,"endColumn":16},{"ruleId":"449","severity":1,"message":"480","line":2,"column":20,"nodeType":"451","messageId":"452","endLine":2,"endColumn":24},{"ruleId":"449","severity":1,"message":"481","line":2,"column":26,"nodeType":"451","messageId":"452","endLine":2,"endColumn":31},{"ruleId":"449","severity":1,"message":"482","line":2,"column":33,"nodeType":"451","messageId":"452","endLine":2,"endColumn":38},{"ruleId":"449","severity":1,"message":"483","line":2,"column":49,"nodeType":"451","messageId":"452","endLine":2,"endColumn":55},{"ruleId":"449","severity":1,"message":"484","line":2,"column":57,"nodeType":"451","messageId":"452","endLine":2,"endColumn":64},{"ruleId":"449","severity":1,"message":"485","line":2,"column":65,"nodeType":"451","messageId":"452","endLine":2,"endColumn":72},{"ruleId":"449","severity":1,"message":"486","line":2,"column":73,"nodeType":"451","messageId":"452","endLine":2,"endColumn":80},{"ruleId":"449","severity":1,"message":"487","line":2,"column":81,"nodeType":"451","messageId":"452","endLine":2,"endColumn":87},{"ruleId":"488","severity":1,"message":"489","line":144,"column":21,"nodeType":"490","messageId":"491","endLine":144,"endColumn":77},{"ruleId":"488","severity":1,"message":"489","line":147,"column":21,"nodeType":"490","messageId":"491","endLine":147,"endColumn":63},{"ruleId":"488","severity":1,"message":"489","line":165,"column":21,"nodeType":"490","messageId":"491","endLine":165,"endColumn":44},{"ruleId":"488","severity":1,"message":"489","line":180,"column":17,"nodeType":"490","messageId":"491","endLine":180,"endColumn":59},{"ruleId":"454","severity":1,"message":"455","line":477,"column":1,"nodeType":"456","endLine":480,"endColumn":3},{"ruleId":"449","severity":1,"message":"479","line":3,"column":10,"nodeType":"451","messageId":"452","endLine":3,"endColumn":16},{"ruleId":"449","severity":1,"message":"480","line":3,"column":20,"nodeType":"451","messageId":"452","endLine":3,"endColumn":24},{"ruleId":"449","severity":1,"message":"482","line":3,"column":33,"nodeType":"451","messageId":"452","endLine":3,"endColumn":38},{"ruleId":"449","severity":1,"message":"492","line":3,"column":40,"nodeType":"451","messageId":"452","endLine":3,"endColumn":47},{"ruleId":"449","severity":1,"message":"484","line":3,"column":57,"nodeType":"451","messageId":"452","endLine":3,"endColumn":64},{"ruleId":"449","severity":1,"message":"485","line":3,"column":65,"nodeType":"451","messageId":"452","endLine":3,"endColumn":72},{"ruleId":"449","severity":1,"message":"487","line":3,"column":81,"nodeType":"451","messageId":"452","endLine":3,"endColumn":87},{"ruleId":"449","severity":1,"message":"493","line":4,"column":10,"nodeType":"451","messageId":"452","endLine":4,"endColumn":22},{"ruleId":"449","severity":1,"message":"494","line":4,"column":24,"nodeType":"451","messageId":"452","endLine":4,"endColumn":42},{"ruleId":"449","severity":1,"message":"495","line":4,"column":44,"nodeType":"451","messageId":"452","endLine":4,"endColumn":56},{"ruleId":"449","severity":1,"message":"496","line":4,"column":57,"nodeType":"451","messageId":"452","endLine":4,"endColumn":69},{"ruleId":"449","severity":1,"message":"497","line":4,"column":71,"nodeType":"451","messageId":"452","endLine":4,"endColumn":85},{"ruleId":"449","severity":1,"message":"498","line":4,"column":86,"nodeType":"451","messageId":"452","endLine":4,"endColumn":100},{"ruleId":"449","severity":1,"message":"499","line":4,"column":101,"nodeType":"451","messageId":"452","endLine":4,"endColumn":113},{"ruleId":"449","severity":1,"message":"500","line":4,"column":114,"nodeType":"451","messageId":"452","endLine":4,"endColumn":130},{"ruleId":"449","severity":1,"message":"501","line":4,"column":131,"nodeType":"451","messageId":"452","endLine":4,"endColumn":145},{"ruleId":"449","severity":1,"message":"502","line":4,"column":146,"nodeType":"451","messageId":"452","endLine":4,"endColumn":161},{"ruleId":"449","severity":1,"message":"503","line":4,"column":162,"nodeType":"451","messageId":"452","endLine":4,"endColumn":176},{"ruleId":"449","severity":1,"message":"504","line":4,"column":177,"nodeType":"451","messageId":"452","endLine":4,"endColumn":194},{"ruleId":"449","severity":1,"message":"505","line":4,"column":216,"nodeType":"451","messageId":"452","endLine":4,"endColumn":231},{"ruleId":"449","severity":1,"message":"506","line":4,"column":232,"nodeType":"451","messageId":"452","endLine":4,"endColumn":248},{"ruleId":"449","severity":1,"message":"471","line":6,"column":9,"nodeType":"451","messageId":"452","endLine":6,"endColumn":16},{"ruleId":"449","severity":1,"message":"471","line":6,"column":9,"nodeType":"451","messageId":"452","endLine":6,"endColumn":16},{"ruleId":"449","severity":1,"message":"507","line":3,"column":17,"nodeType":"451","messageId":"452","endLine":3,"endColumn":25},{"ruleId":"449","severity":1,"message":"471","line":6,"column":9,"nodeType":"451","messageId":"452","endLine":6,"endColumn":16},{"ruleId":"449","severity":1,"message":"471","line":7,"column":9,"nodeType":"451","messageId":"452","endLine":7,"endColumn":16},{"ruleId":"472","severity":1,"message":"508","line":47,"column":7,"nodeType":"474","endLine":47,"endColumn":22,"suggestions":"509"},{"ruleId":"472","severity":1,"message":"508","line":55,"column":7,"nodeType":"474","endLine":55,"endColumn":21,"suggestions":"510"},{"ruleId":"454","severity":1,"message":"455","line":59,"column":1,"nodeType":"456","endLine":59,"endColumn":114},{"ruleId":"449","severity":1,"message":"511","line":7,"column":8,"nodeType":"451","messageId":"452","endLine":7,"endColumn":17},{"ruleId":"472","severity":1,"message":"512","line":190,"column":7,"nodeType":"474","endLine":190,"endColumn":32,"suggestions":"513"},{"ruleId":"472","severity":1,"message":"514","line":229,"column":7,"nodeType":"474","endLine":229,"endColumn":26,"suggestions":"515"},{"ruleId":"449","severity":1,"message":"516","line":279,"column":7,"nodeType":"451","messageId":"452","endLine":279,"endColumn":19},{"ruleId":"449","severity":1,"message":"517","line":2,"column":41,"nodeType":"451","messageId":"452","endLine":2,"endColumn":47},{"ruleId":"449","severity":1,"message":"518","line":2,"column":49,"nodeType":"451","messageId":"452","endLine":2,"endColumn":57},{"ruleId":"449","severity":1,"message":"479","line":3,"column":10,"nodeType":"451","messageId":"452","endLine":3,"endColumn":16},{"ruleId":"449","severity":1,"message":"481","line":3,"column":26,"nodeType":"451","messageId":"452","endLine":3,"endColumn":31},{"ruleId":"449","severity":1,"message":"482","line":3,"column":33,"nodeType":"451","messageId":"452","endLine":3,"endColumn":38},{"ruleId":"449","severity":1,"message":"492","line":3,"column":40,"nodeType":"451","messageId":"452","endLine":3,"endColumn":47},{"ruleId":"449","severity":1,"message":"484","line":3,"column":57,"nodeType":"451","messageId":"452","endLine":3,"endColumn":64},{"ruleId":"449","severity":1,"message":"519","line":3,"column":65,"nodeType":"451","messageId":"452","endLine":3,"endColumn":69},{"ruleId":"449","severity":1,"message":"520","line":4,"column":49,"nodeType":"451","messageId":"452","endLine":4,"endColumn":61},{"ruleId":"449","severity":1,"message":"496","line":4,"column":62,"nodeType":"451","messageId":"452","endLine":4,"endColumn":74},{"ruleId":"449","severity":1,"message":"521","line":4,"column":96,"nodeType":"451","messageId":"452","endLine":4,"endColumn":111},{"ruleId":"449","severity":1,"message":"522","line":4,"column":112,"nodeType":"451","messageId":"452","endLine":4,"endColumn":128},{"ruleId":"449","severity":1,"message":"523","line":4,"column":142,"nodeType":"451","messageId":"452","endLine":4,"endColumn":154},{"ruleId":"449","severity":1,"message":"504","line":4,"column":155,"nodeType":"451","messageId":"452","endLine":4,"endColumn":172},{"ruleId":"449","severity":1,"message":"524","line":4,"column":173,"nodeType":"451","messageId":"452","endLine":4,"endColumn":185},{"ruleId":"449","severity":1,"message":"525","line":4,"column":186,"nodeType":"451","messageId":"452","endLine":4,"endColumn":205},{"ruleId":"449","severity":1,"message":"526","line":4,"column":206,"nodeType":"451","messageId":"452","endLine":4,"endColumn":219},{"ruleId":"449","severity":1,"message":"527","line":4,"column":220,"nodeType":"451","messageId":"452","endLine":4,"endColumn":233},{"ruleId":"449","severity":1,"message":"528","line":5,"column":9,"nodeType":"451","messageId":"452","endLine":5,"endColumn":23},{"ruleId":"449","severity":1,"message":"471","line":9,"column":9,"nodeType":"451","messageId":"452","endLine":9,"endColumn":16},{"ruleId":"449","severity":1,"message":"529","line":11,"column":8,"nodeType":"451","messageId":"452","endLine":11,"endColumn":11},{"ruleId":"449","severity":1,"message":"530","line":24,"column":12,"nodeType":"451","messageId":"452","endLine":24,"endColumn":16},{"ruleId":"449","severity":1,"message":"531","line":1,"column":17,"nodeType":"451","messageId":"452","endLine":1,"endColumn":26},{"ruleId":"449","severity":1,"message":"517","line":1,"column":28,"nodeType":"451","messageId":"452","endLine":1,"endColumn":34},{"ruleId":"449","severity":1,"message":"518","line":1,"column":36,"nodeType":"451","messageId":"452","endLine":1,"endColumn":44},{"ruleId":"449","severity":1,"message":"483","line":2,"column":9,"nodeType":"451","messageId":"452","endLine":2,"endColumn":15},{"ruleId":"449","severity":1,"message":"498","line":4,"column":86,"nodeType":"451","messageId":"452","endLine":4,"endColumn":100},{"ruleId":"449","severity":1,"message":"505","line":4,"column":216,"nodeType":"451","messageId":"452","endLine":4,"endColumn":231},{"ruleId":"449","severity":1,"message":"506","line":4,"column":232,"nodeType":"451","messageId":"452","endLine":4,"endColumn":248},{"ruleId":"449","severity":1,"message":"471","line":7,"column":9,"nodeType":"451","messageId":"452","endLine":7,"endColumn":16},{"ruleId":"449","severity":1,"message":"532","line":10,"column":17,"nodeType":"451","messageId":"452","endLine":10,"endColumn":24},{"ruleId":"449","severity":1,"message":"533","line":3,"column":24,"nodeType":"451","messageId":"452","endLine":3,"endColumn":36},{"ruleId":"449","severity":1,"message":"470","line":4,"column":13,"nodeType":"451","messageId":"452","endLine":4,"endColumn":19},{"ruleId":"449","severity":1,"message":"534","line":5,"column":10,"nodeType":"451","messageId":"452","endLine":5,"endColumn":30},{"ruleId":"449","severity":1,"message":"535","line":5,"column":46,"nodeType":"451","messageId":"452","endLine":5,"endColumn":58},{"ruleId":"449","severity":1,"message":"497","line":5,"column":59,"nodeType":"451","messageId":"452","endLine":5,"endColumn":73},{"ruleId":"449","severity":1,"message":"529","line":6,"column":8,"nodeType":"451","messageId":"452","endLine":6,"endColumn":11},{"ruleId":"449","severity":1,"message":"471","line":7,"column":9,"nodeType":"451","messageId":"452","endLine":7,"endColumn":16},{"ruleId":"472","severity":1,"message":"473","line":38,"column":7,"nodeType":"474","endLine":38,"endColumn":19,"suggestions":"536"},{"ruleId":"449","severity":1,"message":"517","line":2,"column":41,"nodeType":"451","messageId":"452","endLine":2,"endColumn":47},{"ruleId":"449","severity":1,"message":"479","line":3,"column":10,"nodeType":"451","messageId":"452","endLine":3,"endColumn":16},{"ruleId":"449","severity":1,"message":"482","line":3,"column":18,"nodeType":"451","messageId":"452","endLine":3,"endColumn":23},{"ruleId":"449","severity":1,"message":"480","line":3,"column":25,"nodeType":"451","messageId":"452","endLine":3,"endColumn":29},{"ruleId":"449","severity":1,"message":"537","line":3,"column":38,"nodeType":"451","messageId":"452","endLine":3,"endColumn":42},{"ruleId":"449","severity":1,"message":"484","line":3,"column":61,"nodeType":"451","messageId":"452","endLine":3,"endColumn":68},{"ruleId":"449","severity":1,"message":"485","line":3,"column":70,"nodeType":"451","messageId":"452","endLine":3,"endColumn":77},{"ruleId":"449","severity":1,"message":"494","line":4,"column":27,"nodeType":"451","messageId":"452","endLine":4,"endColumn":45},{"ruleId":"449","severity":1,"message":"538","line":250,"column":7,"nodeType":"451","messageId":"452","endLine":250,"endColumn":25},{"ruleId":"449","severity":1,"message":"531","line":2,"column":17,"nodeType":"451","messageId":"452","endLine":2,"endColumn":26},{"ruleId":"449","severity":1,"message":"517","line":2,"column":28,"nodeType":"451","messageId":"452","endLine":2,"endColumn":34},{"ruleId":"449","severity":1,"message":"539","line":6,"column":8,"nodeType":"451","messageId":"452","endLine":6,"endColumn":18},{"ruleId":"449","severity":1,"message":"471","line":10,"column":9,"nodeType":"451","messageId":"452","endLine":10,"endColumn":16},{"ruleId":"449","severity":1,"message":"479","line":3,"column":10,"nodeType":"451","messageId":"452","endLine":3,"endColumn":16},{"ruleId":"449","severity":1,"message":"480","line":3,"column":20,"nodeType":"451","messageId":"452","endLine":3,"endColumn":24},{"ruleId":"449","severity":1,"message":"482","line":3,"column":33,"nodeType":"451","messageId":"452","endLine":3,"endColumn":38},{"ruleId":"449","severity":1,"message":"492","line":3,"column":40,"nodeType":"451","messageId":"452","endLine":3,"endColumn":47},{"ruleId":"449","severity":1,"message":"483","line":3,"column":49,"nodeType":"451","messageId":"452","endLine":3,"endColumn":55},{"ruleId":"449","severity":1,"message":"484","line":3,"column":57,"nodeType":"451","messageId":"452","endLine":3,"endColumn":64},{"ruleId":"449","severity":1,"message":"539","line":4,"column":8,"nodeType":"451","messageId":"452","endLine":4,"endColumn":18},{"ruleId":"449","severity":1,"message":"471","line":6,"column":9,"nodeType":"451","messageId":"452","endLine":6,"endColumn":16},{"ruleId":"449","severity":1,"message":"471","line":4,"column":9,"nodeType":"451","messageId":"452","endLine":4,"endColumn":16},{"ruleId":"472","severity":1,"message":"540","line":16,"column":7,"nodeType":"474","endLine":16,"endColumn":9,"suggestions":"541"},{"ruleId":"449","severity":1,"message":"542","line":2,"column":17,"nodeType":"451","messageId":"452","endLine":2,"endColumn":28},{"ruleId":"449","severity":1,"message":"531","line":2,"column":30,"nodeType":"451","messageId":"452","endLine":2,"endColumn":39},{"ruleId":"449","severity":1,"message":"517","line":2,"column":41,"nodeType":"451","messageId":"452","endLine":2,"endColumn":47},{"ruleId":"449","severity":1,"message":"518","line":2,"column":49,"nodeType":"451","messageId":"452","endLine":2,"endColumn":57},{"ruleId":"449","severity":1,"message":"479","line":3,"column":10,"nodeType":"451","messageId":"452","endLine":3,"endColumn":16},{"ruleId":"449","severity":1,"message":"482","line":3,"column":18,"nodeType":"451","messageId":"452","endLine":3,"endColumn":23},{"ruleId":"449","severity":1,"message":"480","line":3,"column":25,"nodeType":"451","messageId":"452","endLine":3,"endColumn":29},{"ruleId":"449","severity":1,"message":"537","line":3,"column":38,"nodeType":"451","messageId":"452","endLine":3,"endColumn":42},{"ruleId":"449","severity":1,"message":"492","line":3,"column":44,"nodeType":"451","messageId":"452","endLine":3,"endColumn":51},{"ruleId":"449","severity":1,"message":"483","line":3,"column":53,"nodeType":"451","messageId":"452","endLine":3,"endColumn":59},{"ruleId":"449","severity":1,"message":"484","line":3,"column":61,"nodeType":"451","messageId":"452","endLine":3,"endColumn":68},{"ruleId":"449","severity":1,"message":"485","line":3,"column":70,"nodeType":"451","messageId":"452","endLine":3,"endColumn":77},{"ruleId":"449","severity":1,"message":"521","line":4,"column":10,"nodeType":"451","messageId":"452","endLine":4,"endColumn":25},{"ruleId":"449","severity":1,"message":"494","line":4,"column":27,"nodeType":"451","messageId":"452","endLine":4,"endColumn":45},{"ruleId":"449","severity":1,"message":"543","line":4,"column":47,"nodeType":"451","messageId":"452","endLine":4,"endColumn":69},{"ruleId":"449","severity":1,"message":"544","line":4,"column":70,"nodeType":"451","messageId":"452","endLine":4,"endColumn":86},{"ruleId":"449","severity":1,"message":"545","line":4,"column":87,"nodeType":"451","messageId":"452","endLine":4,"endColumn":99},{"ruleId":"449","severity":1,"message":"546","line":5,"column":8,"nodeType":"451","messageId":"452","endLine":5,"endColumn":14},{"ruleId":"449","severity":1,"message":"547","line":6,"column":23,"nodeType":"451","messageId":"452","endLine":6,"endColumn":38},{"ruleId":"449","severity":1,"message":"531","line":2,"column":30,"nodeType":"451","messageId":"452","endLine":2,"endColumn":39},{"ruleId":"449","severity":1,"message":"517","line":2,"column":41,"nodeType":"451","messageId":"452","endLine":2,"endColumn":47},{"ruleId":"449","severity":1,"message":"479","line":3,"column":10,"nodeType":"451","messageId":"452","endLine":3,"endColumn":16},{"ruleId":"449","severity":1,"message":"482","line":3,"column":18,"nodeType":"451","messageId":"452","endLine":3,"endColumn":23},{"ruleId":"449","severity":1,"message":"480","line":3,"column":25,"nodeType":"451","messageId":"452","endLine":3,"endColumn":29},{"ruleId":"449","severity":1,"message":"537","line":3,"column":38,"nodeType":"451","messageId":"452","endLine":3,"endColumn":42},{"ruleId":"449","severity":1,"message":"492","line":3,"column":44,"nodeType":"451","messageId":"452","endLine":3,"endColumn":51},{"ruleId":"449","severity":1,"message":"483","line":3,"column":53,"nodeType":"451","messageId":"452","endLine":3,"endColumn":59},{"ruleId":"449","severity":1,"message":"484","line":3,"column":61,"nodeType":"451","messageId":"452","endLine":3,"endColumn":68},{"ruleId":"449","severity":1,"message":"485","line":3,"column":70,"nodeType":"451","messageId":"452","endLine":3,"endColumn":77},{"ruleId":"449","severity":1,"message":"521","line":4,"column":10,"nodeType":"451","messageId":"452","endLine":4,"endColumn":25},{"ruleId":"449","severity":1,"message":"494","line":4,"column":27,"nodeType":"451","messageId":"452","endLine":4,"endColumn":45},{"ruleId":"449","severity":1,"message":"543","line":4,"column":47,"nodeType":"451","messageId":"452","endLine":4,"endColumn":69},{"ruleId":"449","severity":1,"message":"544","line":4,"column":70,"nodeType":"451","messageId":"452","endLine":4,"endColumn":86},{"ruleId":"449","severity":1,"message":"545","line":4,"column":87,"nodeType":"451","messageId":"452","endLine":4,"endColumn":99},{"ruleId":"449","severity":1,"message":"546","line":5,"column":8,"nodeType":"451","messageId":"452","endLine":5,"endColumn":14},{"ruleId":"449","severity":1,"message":"548","line":6,"column":10,"nodeType":"451","messageId":"452","endLine":6,"endColumn":22},{"ruleId":"472","severity":1,"message":"549","line":20,"column":7,"nodeType":"474","endLine":20,"endColumn":26,"suggestions":"550"},{"ruleId":"449","severity":1,"message":"518","line":2,"column":49,"nodeType":"451","messageId":"452","endLine":2,"endColumn":57},{"ruleId":"449","severity":1,"message":"479","line":3,"column":10,"nodeType":"451","messageId":"452","endLine":3,"endColumn":16},{"ruleId":"449","severity":1,"message":"482","line":3,"column":18,"nodeType":"451","messageId":"452","endLine":3,"endColumn":23},{"ruleId":"449","severity":1,"message":"480","line":3,"column":25,"nodeType":"451","messageId":"452","endLine":3,"endColumn":29},{"ruleId":"449","severity":1,"message":"481","line":3,"column":31,"nodeType":"451","messageId":"452","endLine":3,"endColumn":36},{"ruleId":"449","severity":1,"message":"537","line":3,"column":38,"nodeType":"451","messageId":"452","endLine":3,"endColumn":42},{"ruleId":"449","severity":1,"message":"492","line":3,"column":44,"nodeType":"451","messageId":"452","endLine":3,"endColumn":51},{"ruleId":"449","severity":1,"message":"483","line":3,"column":53,"nodeType":"451","messageId":"452","endLine":3,"endColumn":59},{"ruleId":"449","severity":1,"message":"484","line":3,"column":61,"nodeType":"451","messageId":"452","endLine":3,"endColumn":68},{"ruleId":"449","severity":1,"message":"485","line":3,"column":70,"nodeType":"451","messageId":"452","endLine":3,"endColumn":77},{"ruleId":"449","severity":1,"message":"521","line":4,"column":10,"nodeType":"451","messageId":"452","endLine":4,"endColumn":25},{"ruleId":"449","severity":1,"message":"494","line":4,"column":27,"nodeType":"451","messageId":"452","endLine":4,"endColumn":45},{"ruleId":"449","severity":1,"message":"543","line":4,"column":47,"nodeType":"451","messageId":"452","endLine":4,"endColumn":69},{"ruleId":"449","severity":1,"message":"544","line":4,"column":70,"nodeType":"451","messageId":"452","endLine":4,"endColumn":86},{"ruleId":"449","severity":1,"message":"545","line":4,"column":87,"nodeType":"451","messageId":"452","endLine":4,"endColumn":99},{"ruleId":"449","severity":1,"message":"479","line":3,"column":10,"nodeType":"451","messageId":"452","endLine":3,"endColumn":16},{"ruleId":"449","severity":1,"message":"482","line":3,"column":18,"nodeType":"451","messageId":"452","endLine":3,"endColumn":23},{"ruleId":"449","severity":1,"message":"537","line":3,"column":38,"nodeType":"451","messageId":"452","endLine":3,"endColumn":42},{"ruleId":"449","severity":1,"message":"492","line":3,"column":44,"nodeType":"451","messageId":"452","endLine":3,"endColumn":51},{"ruleId":"449","severity":1,"message":"484","line":3,"column":61,"nodeType":"451","messageId":"452","endLine":3,"endColumn":68},{"ruleId":"449","severity":1,"message":"485","line":3,"column":70,"nodeType":"451","messageId":"452","endLine":3,"endColumn":77},{"ruleId":"449","severity":1,"message":"551","line":2,"column":9,"nodeType":"451","messageId":"452","endLine":2,"endColumn":15},{"ruleId":"449","severity":1,"message":"552","line":3,"column":41,"nodeType":"451","messageId":"452","endLine":3,"endColumn":48},{"ruleId":"449","severity":1,"message":"479","line":4,"column":10,"nodeType":"451","messageId":"452","endLine":4,"endColumn":16},{"ruleId":"449","severity":1,"message":"482","line":4,"column":18,"nodeType":"451","messageId":"452","endLine":4,"endColumn":23},{"ruleId":"449","severity":1,"message":"480","line":4,"column":25,"nodeType":"451","messageId":"452","endLine":4,"endColumn":29},{"ruleId":"449","severity":1,"message":"537","line":4,"column":38,"nodeType":"451","messageId":"452","endLine":4,"endColumn":42},{"ruleId":"449","severity":1,"message":"492","line":4,"column":44,"nodeType":"451","messageId":"452","endLine":4,"endColumn":51},{"ruleId":"449","severity":1,"message":"485","line":4,"column":70,"nodeType":"451","messageId":"452","endLine":4,"endColumn":77},{"ruleId":"449","severity":1,"message":"553","line":4,"column":78,"nodeType":"451","messageId":"452","endLine":4,"endColumn":88},{"ruleId":"449","severity":1,"message":"554","line":17,"column":12,"nodeType":"451","messageId":"452","endLine":17,"endColumn":36},{"ruleId":"472","severity":1,"message":"549","line":42,"column":7,"nodeType":"474","endLine":42,"endColumn":25,"suggestions":"555"},{"ruleId":"449","severity":1,"message":"556","line":142,"column":7,"nodeType":"451","messageId":"452","endLine":142,"endColumn":32},{"ruleId":"449","severity":1,"message":"479","line":3,"column":10,"nodeType":"451","messageId":"452","endLine":3,"endColumn":16},{"ruleId":"449","severity":1,"message":"480","line":3,"column":25,"nodeType":"451","messageId":"452","endLine":3,"endColumn":29},{"ruleId":"449","severity":1,"message":"537","line":3,"column":38,"nodeType":"451","messageId":"452","endLine":3,"endColumn":42},{"ruleId":"449","severity":1,"message":"484","line":3,"column":61,"nodeType":"451","messageId":"452","endLine":3,"endColumn":68},{"ruleId":"449","severity":1,"message":"485","line":3,"column":70,"nodeType":"451","messageId":"452","endLine":3,"endColumn":77},{"ruleId":"449","severity":1,"message":"521","line":4,"column":10,"nodeType":"451","messageId":"452","endLine":4,"endColumn":25},{"ruleId":"449","severity":1,"message":"470","line":7,"column":13,"nodeType":"451","messageId":"452","endLine":7,"endColumn":19},{"ruleId":"472","severity":1,"message":"557","line":38,"column":7,"nodeType":"474","endLine":38,"endColumn":22,"suggestions":"558"},{"ruleId":"449","severity":1,"message":"518","line":1,"column":36,"nodeType":"451","messageId":"452","endLine":1,"endColumn":44},{"ruleId":"449","severity":1,"message":"559","line":2,"column":41,"nodeType":"451","messageId":"452","endLine":2,"endColumn":51},{"ruleId":"449","severity":1,"message":"517","line":2,"column":53,"nodeType":"451","messageId":"452","endLine":2,"endColumn":59},{"ruleId":"449","severity":1,"message":"519","line":3,"column":9,"nodeType":"451","messageId":"452","endLine":3,"endColumn":13},"no-native-reassign",["560"],"no-negated-in-lhs",["561"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'reg' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","Assign array to a variable before exporting as module default","'toStr' is assigned a value but never used.","'fnToStr' is assigned a value but never used.","'isFnRegex' is assigned a value but never used.","no-new-func","The Function constructor is eval.","CallExpression","noFunctionConstructor","'GeneratorFunction' is assigned a value but never used.","'needPromiseReg' is assigned a value but never used.","'getCurrentWebContents' is assigned a value but never used.","'ltreeCnt' is assigned a value but never used.","'rtreeCnt' is assigned a value but never used.","'uiUtil' is defined but never used.","'connect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useCallback has an unnecessary dependency: 'dispatcher'. Either exclude it or remove the dependency array. Outer scope values like 'dispatcher' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["562"],["563"],["564"],["565"],"'Layout' is defined but never used.","'Tabs' is defined but never used.","'Modal' is defined but never used.","'Input' is defined but never used.","'Button' is defined but never used.","'Divider' is defined but never used.","'Popover' is defined but never used.","'BackTop' is defined but never used.","'Avatar' is defined but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'message' is defined but never used.","'PlusOutlined' is defined but never used.","'FolderOpenOutlined' is defined but never used.","'EditOutlined' is defined but never used.","'LinkOutlined' is defined but never used.","'FolderOutlined' is defined but never used.","'ExportOutlined' is defined but never used.","'CodeOutlined' is defined but never used.","'CompressOutlined' is defined but never used.","'ExpandOutlined' is defined but never used.","'ControlOutlined' is defined but never used.","'ReloadOutlined' is defined but never used.","'FileImageOutlined' is defined but never used.","'FilePdfOutlined' is defined but never used.","'FileWordOutlined' is defined but never used.","'Timeline' is defined but never used.","React Hook useEffect has a missing dependency: 'delayRelayoutArrows'. Either include it or remove the dependency array.",["566"],["567"],"'userEvent' is defined but never used.","React Hook useCallback has a missing dependency: 'gantEleId'. Either include it or remove the dependency array.",["568"],"React Hook useEffect has a missing dependency: 'gantEleId'. Either include it or remove the dependency array.",["569"],"'getDynaCols2' is assigned a value but never used.","'useRef' is defined but never used.","'useState' is defined but never used.","'Spin' is defined but never used.","'FormOutlined' is defined but never used.","'PictureOutlined' is defined but never used.","'FileTextOutlined' is defined but never used.","'BookOutlined' is defined but never used.","'ReadOutlined' is defined but never used.","'ClockCircleOutlined' is defined but never used.","'CloseOutlined' is defined but never used.","'CheckOutlined' is defined but never used.","'createSelector' is defined but never used.","'api' is defined but never used.","'winW' is assigned a value but never used.","'useEffect' is defined but never used.","'Content' is assigned a value but never used.","'AutoComplete' is defined but never used.","'FileMarkdownOutlined' is defined but never used.","'HomeOutlined' is defined but never used.",["570"],"'Form' is defined but never used.","'getCodeEditorStyle' is assigned a value but never used.","'PathSelect' is defined but never used.","React Hook useCallback has a missing dependency: 'listWrapperId'. Either include it or remove the dependency array.",["571"],"'useCallback' is defined but never used.","'QuestionCircleOutlined' is defined but never used.","'CalendarOutlined' is defined but never used.","'FileOutlined' is defined but never used.","'moment' is defined but never used.","'PhotoshopPicker' is defined but never used.","'CirclePicker' is defined but never used.","React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["572"],"'Global' is defined but never used.","'useMemo' is defined but never used.","'DatePicker' is defined but never used.","'datePickPopoverClassname' is assigned a value but never used.",["573"],"'getDatePickerPopoverStyle' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'onFocusEle'. Either include it or remove the dependency array.",["574"],"'useReducer' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"575","fix":"576"},{"desc":"577","fix":"578"},{"desc":"579","fix":"580"},{"desc":"581","fix":"582"},{"desc":"583","fix":"584"},{"desc":"585","fix":"586"},{"desc":"587","fix":"588"},{"desc":"589","fix":"590"},{"desc":"591","fix":"592"},{"desc":"593","fix":"594"},{"desc":"595","fix":"596"},{"desc":"597","fix":"598"},{"desc":"599","fix":"600"},"Update the dependencies array to be: [setNewMapDlgVisible]",{"range":"601","text":"602"},"Update the dependencies array to be: [setEditDlgState]",{"range":"603","text":"604"},"Update the dependencies array to be: [setEditDlgState, editTmpTxt]",{"range":"605","text":"606"},"Update the dependencies array to be: [setSelMapDlgVisible]",{"range":"607","text":"608"},"Update the dependencies array to be: [delayRelayoutArrows, props.visible]",{"range":"609","text":"610"},"Update the dependencies array to be: [delayRelayoutArrows, resizeSymbol]",{"range":"611","text":"612"},"Update the dependencies array to be: [gantEleId, props.arrows]",{"range":"613","text":"614"},"Update the dependencies array to be: [debouncePutArrows, gantEleId]",{"range":"615","text":"616"},"Update the dependencies array to be: []",{"range":"617","text":"618"},"Update the dependencies array to be: [listWrapperId]",{"range":"619","text":"620"},"Update the dependencies array to be: [props, color]",{"range":"621","text":"622"},"Update the dependencies array to be: [props, date]",{"range":"623","text":"624"},"Update the dependencies array to be: [onFocusEle, props.visible]",{"range":"625","text":"626"},[5293,5326],"[setNewMapDlgVisible]",[5836,5865],"[setEditDlgState]",[6429,6470],"[setEditDlgState, editTmpTxt]",[6785,6818],"[setSelMapDlgVisible]",[1343,1358],"[delayRelayoutArrows, props.visible]",[1505,1519],"[delayRelayoutArrows, resizeSymbol]",[6135,6160],"[gantEleId, props.arrows]",[7328,7347],"[debouncePutArrows, gantEleId]",[1185,1197],"[]",[563,565],"[listWrapperId]",[725,744],"[props, color]",[1261,1279],"[props, date]",[1168,1183],"[onFocusEle, props.visible]"]